[
  {
    "objectID": "get-started/podaac-ecco-netrc.html",
    "href": "get-started/podaac-ecco-netrc.html",
    "title": "PO DAAC Authentication Example",
    "section": "",
    "text": "Note this is currently copied from https://github.com/podaac/ECCO/blob/main/Data_Access/local_bulk_download_and_open_in_py3.ipynb as a starting point and will be refined\n\n\n\n\nConfigure your .netrc file\nGood idea to back up your existing netrc file, if you have one. And while youre at it check for these entries because they might exist in there already:\n\n%cp ~/.netrc ~/bak.netrc\n\n%cat ~/.netrc | grep '.earthdata.nasa.gov' | cut -f-5 -d\" \"\n\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\n\n\n\nAdd entries to your netrc for these two earthdata.nasa.gov sub domains, at a minimum:\nmachine urs.earthdata.nasa.gov login jmcnelis password ***\nmachine opendap.earthdata.nasa.gov login jmcnelis password ***\nand replace jmcnelis and *** with your Earthdata Login username and password, respectively…\n\nReplace jmcnelis and *** with your Earthdata username and password, and then run the cell to append these two lines to your netrc file, if one exists. Otherwise write them to a new one. (all set up by -a)\n\n%%file -a ~/.netrc\nmachine urs.earthdata.nasa.gov login jmcnelis password ***\nmachine opendap.earthdata.nasa.gov login jmcnelis password ***\n\nAppending to /Users/lowndes/.netrc\n\n\nDump the netrc again sans passwords to confirm that it worked:\n\n!cat ~/.netrc | grep '.earthdata.nasa.gov' | cut -f-5 -d\" \"\n\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\n\n\nFinally, you need to make sure to limit access to the netrc file because it stores your plain text password. Simple on MacOS and Linux:\n\n!chmod 0600 ~/.netrc"
  },
  {
    "objectID": "get-started/lpdaac-netrc.html#this-is-otherwise-just-testing",
    "href": "get-started/lpdaac-netrc.html#this-is-otherwise-just-testing",
    "title": "LP DAAC Authentication Example",
    "section": "This is otherwise just testing ",
    "text": "This is otherwise just testing \n\nImport the required packages and set the input/working directory to run this Jupyter Notebook locally.\n\nimport requests as r\nfrom skimage import io\nimport matplotlib.pyplot as plt\n\n\nprint(1+1)\nprint(\"woo NASA data!\")\n\n2\nwoo NASA data!"
  },
  {
    "objectID": "get-started/api-primer.html",
    "href": "get-started/api-primer.html",
    "title": "API Primer",
    "section": "",
    "text": "The code-based chapters of this Cookbook utilize several NASA EOSDIS-supported Application Programming Interfaces, or APIs, to discover and access data programmatically.\n\n\n\n\n\n\nNote\n\n\n\nWhat is an API? You can think of an API as a middle man between an application or end-use and a data provider. In most cases the data provider is either the NASA Common Metadata Repository (CMR), which houses data information, or one or more of the NASA DAACs as the data distributors. These APIs are generally structured as a root URL, plus individual key-value-pairs separated by ‘&’.\n\n\nProgrammatic API access is beneficial for those who want to incorporate data access into a visualization and analysis workflow. This method is also reproducible and documented to ensure data provenance.\nThe table below describes each of the common NASA Earthdata APIs along with their functions and use case examples. Documentation for each API is linked in each row.\n\n\n\nAPI\nKey Functions\nUse Case Example\n\n\n\n\nCommon Metadata Repository (CMR)\nSearch for datasets and data files using several filtering options, as well as associated tools, services, and data variables.\nFor a given data set, I want to retrieve file information, including data access URLs, for all data occurring over my region and time period of interest.\n\n\nCMR-STAC:\n\nCMR STAC Catalog Documentation\nCMR STAC Catalog Endpoint\nCMR STAC Catalog Endpoint for Cloud-hosted Holdings Only\n\nSearch data information housed by the CMR as assets through the SpatioTemporal Asset Catalog specification (STAC), which provides a common language for interpreting geospatial information in order to standardize indexing and discovering data.\nIn addition to the CMR use case example above, I also want to use Python to directly load a dataset STAC asset into memory in order to view imagery and plot the data.\n\n\nGlobal Imagery Browse Service (GIBS)\nAccess full-resolution browse imagery using standards-based web services and formats.\nI want to access and browse near real-time satellite imagery in a programming language or GIS application.\n\n\nHarmony\nAccess and Customize data through subsetting, reformatting, and reprojection options.\nI want to receive subsetted data by time, area, and variables of interest in order to reduce data volume, as well as reformat to a cloud-optimized format to improve analysis performance in the cloud.\n\n\nOPeNDAP\nAccess and Customize data through subsetting and reformatting options.\nI want to access data files on-the-fly, subsetted by area or time dimensions."
  },
  {
    "objectID": "get-started/earthdata-login.html#background",
    "href": "get-started/earthdata-login.html#background",
    "title": "EarthData Login",
    "section": "Background",
    "text": "Background\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need EarthData Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nTo avoid being prompted for credentials every time you run and also allow clients such as curl to log in, you can create and/or add the following to a “netrc” file (pronounced “Net RC”). On a Mac, this is a file called .netrc, and on Windows it is _netrc. (There are no extensions on either file).\nBelow are ways to create a “netrc” file in your home directory."
  },
  {
    "objectID": "get-started/earthdata-login.html#r-for-windows-or-macos",
    "href": "get-started/earthdata-login.html#r-for-windows-or-macos",
    "title": "EarthData Login",
    "section": "R for Windows or macOS",
    "text": "R for Windows or macOS\nCreate a “netrc” file by running the following code in your R console (or after saving to an R script).\n#| eval: false\n\n# Required packages for this script\npackages = c('sys', 'getPass')\n\n# Identify missing (not installed) packages\nnew.packages = packages[!(packages %in% installed.packages()[,\"Package\"])]\n\n# Install missing packages\nif(length(new.packages)) install.packages(new.packages, repos='http://cran.rstudio.com/')\n\n# Load packages into R\nlibrary(sys)\nlibrary(getPass)\n\n# Determine OS and associated netrc file \nnetrc_type <- if(.Platform$OS.type == \"windows\") \"_netrc\" else \".netrc\"    # Windows OS uses _netrc file\n\n# Specify path to user profile \nup <- file.path(Sys.getenv(\"USERPROFILE\"))                            # Retrieve user directory (for netrc file)\n\n# Below, HOME and Userprofile directories are set.  \n\nif (up == \"\") {\n    up <- Sys.getenv(\"HOME\") \n    Sys.setenv(\"userprofile\" = up)\n    if (up == \"\") {\n        cat('USERPROFILE/HOME directories need to be set up. Please type sys.setenv(\"HOME\" = \"YOURDIRECTORY\") or  sys.setenv(\"USERPROFILE\" = \"YOURDIRECTORY\") in your console and type your USERPROFILE/HOME direcory instead of \"YOURDIRECTORY\". Next, run the code chunk again.')\n    }\n} else {Sys.setenv(\"HOME\" = up)}        \n\nnetrc_path <- file.path(up, netrc_type, fsep = .Platform$file.sep)    # Path to netrc file\n\n# Create a netrc file if one does not exist already\nif (file.exists(netrc_path) == false || grepl(\"urs.earthdata.nasa.gov\", readLines(netrc_path)) == false) {\n    netrc_conn <- file(netrc_path)\n    \n    # User will be prompted for NASA Earthdata Login Username and Password below\n    writeLines(c(\"machine urs.earthdata.nasa.gov\",\n                 sprintf(\"login %s\", getPass(msg = \"Enter NASA Earthdata Login Username \\n (An account can be Created at urs.earthdata.nasa.gov):\")),\n                 sprintf(\"password %s\", getPass(msg = \"Enter NASA Earthdata Login Password:\"))), netrc_conn)\n    close(netrc_conn)\n}"
  },
  {
    "objectID": "get-started/earthdata-login.html#python-for-windows-or-macos",
    "href": "get-started/earthdata-login.html#python-for-windows-or-macos",
    "title": "EarthData Login",
    "section": "Python for Windows or macOS",
    "text": "Python for Windows or macOS\nCreate a “netrc” file by running the following code in your python console (or after saving to an .py script).\nLP DAAC Approach:\n#| eval: false\n\n# Load necessary packages into Python\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom getpass import getpass\nimport os\n\n# -----------------------------------AUTHENTICATION CONFIGURATION-------------------------------- #\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL to call for authentication\nprompts = ['Enter NASA Earthdata Login Username \\n(or create an account at urs.earthdata.nasa.gov): ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(\"~/.netrc\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}.netrc | chmod og-rw {0}.netrc | echo machine {1} >> {0}.netrc'.format(homeDir + os.sep, urs), shell=True)\n    Popen('echo login {} >> {}.netrc'.format(getpass(prompt=prompts[0]), homeDir + os.sep), shell=True)\n    Popen('echo password {} >> {}.netrc'.format(getpass(prompt=prompts[1]), homeDir + os.sep), shell=True)\n\n# Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} >> {0}.netrc'.format(homeDir + os.sep, urs), shell=True)\n    Popen('echo login {} >> {}.netrc'.format(getpass(prompt=prompts[0]), homeDir + os.sep), shell=True)\n    Popen('echo password {} >> {}.netrc'.format(getpass(prompt=prompts[1]), homeDir + os.sep), shell=True)\nPO.DAAC Approach:\nJulie note to Catalina/Jack: I wasn't sure if this would be best here or in the search-by-shapefile.qmd: \n\nThe setup_earthdata_login_auth function will allow Python scripts to log into any Earthdata Login application programmatically. To avoid being prompted for credentials every time you run and also allow clients such as curl to log in, you can add the following to a .netrc (_netrc on Windows) file in your home directory:\n\nmachine urs.earthdata.nasa.gov\n    login <your username>\n    password <your password>\nMake sure that this file is only readable by the current user or you will receive an error stating \"netrc access too permissive.\"\n\n$ chmod 0600 ~/.netrc\n#| eval: false\nfrom netrc import netrc\nfrom platform import system\nfrom getpass import getpass\nfrom http.cookiejar import CookieJar\nfrom os.path import join, expanduser\n\nTOKEN_DATA = (\"<token>\"\n              \"<username>%s</username>\"\n              \"<password>%s</password>\"\n              \"<client_id>PODAAC CMR Client</client_id>\"\n              \"<user_ip_address>%s</user_ip_address>\"\n              \"</token>\")\n\n\ndef setup_cmr_token_auth(endpoint: str='cmr.earthdata.nasa.gov'):\n    ip = requests.get(\"https://ipinfo.io/ip\").text.strip()\n    return requests.post(\n        url=\"https://%s/legacy-services/rest/tokens\" % endpoint,\n        data=TOKEN_DATA % (input(\"Username: \"), getpass(\"Password: \"), ip),\n        headers={'Content-Type': 'application/xml', 'Accept': 'application/json'}\n    ).json()['token']['id']\n\n\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\n\n# Get your authentication token for searching restricted records in the CMR:\n_token = setup_cmr_token_auth(endpoint=\"cmr.earthdata.nasa.gov\")\n\n# Start authenticated session with URS to allow restricted data downloads:\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")"
  },
  {
    "objectID": "get-started/earthdata-login.html#common-questions",
    "href": "get-started/earthdata-login.html#common-questions",
    "title": "EarthData Login",
    "section": "Common questions",
    "text": "Common questions\n\nHow do I know if I already have a netrc file?\nYour netrc file will likely be in your root directory. It is a hidden file that you will not be able to see from your Finder (Mac) or Windows Explorer (Windows), so you’ll have to do this from the Command Line. Navigate to your root directory and list all:\n\nOn a Mac:\ncd ~\nls -la\nIf you see a .netrc file, view what’s inside (perhaps with nano), and if you’d like to delete the current version to start afresh, type rm .netrc."
  },
  {
    "objectID": "get-started/index.html#learning-to-code",
    "href": "get-started/index.html#learning-to-code",
    "title": "Overview: How to use this Cookbook",
    "section": "Learning to code",
    "text": "Learning to code\nFor programmatic access to NASA data on the cloud, we recommend familiarity with basic programming in R or Python. Here are resources we recommend to help get you started.\n\nIntro NASA Earthdata on the Cloud\n\nNASA Earthdata Cloud tutorials - NASA Openscapes Mentors. Follow-along tutorials for the Openscapes 2i2c JupyterHub\nNASA Earthdata Glossary \n\nIntro Python\n\nDuke STA-663 - Colin Rundel. Lecture slides & recordings, code & notebooks. Features Jupyter, git, numpy, scipy, pandas, scikit-learn…\nIntro to Geospatial Raster and Vector Data with Python - Carpentries. Follow-along tutorials & code. Features NEON data, intro to rasters & geostats rioxarray, geopandas…\nIntro to Earth and Environmental Data Science- Ryan Abernathy. Intro to Python, JupyterLab, Unix, Git, some packages & workflows\n\nIntro R\n\nIntro to Open Data Science with R - Lowndes & Horst. Follow-along tutorials & code. Features workflows with RMarkdown, tidyverse, RStudio, GitHub…\nWhat they forgot to teach you about R - Bryan & Hester. Reinforcing lessons for moderately experienced R users\nR for Data Science - Wickham & Grolemund. - All things tidyverse, including dates, plots, modeling, programming, RMarkdown\n\nOnline learning community/book club: rfordatasci.com\n\n\nScientific Python Ecosystem and Cloud Computing together:\n-   [Project Pythia Foundations Book](https://foundations.projectpythia.org/landing-page.html)\n\n-   [Jupyter meets Earth](https://jupytearth.org/)"
  },
  {
    "objectID": "get-started/index.html#cloud-optimized-data-formats",
    "href": "get-started/index.html#cloud-optimized-data-formats",
    "title": "Overview: How to use this Cookbook",
    "section": "Cloud Optimized Data Formats",
    "text": "Cloud Optimized Data Formats\nSome nice info here from Pangeo about Cloud Optimized Data Formats.\n\nCloud-Performant NetCDF4/HDF5 Reading with the Zarr Library"
  },
  {
    "objectID": "get-started/index.html#sw3-buckets-etc",
    "href": "get-started/index.html#sw3-buckets-etc",
    "title": "Overview: How to use this Cookbook",
    "section": "SW3 Buckets, etc",
    "text": "SW3 Buckets, etc\n\nNASA AWS Cloud Primer"
  },
  {
    "objectID": "get-started/authentication.html",
    "href": "get-started/authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "There are multiple ways to authenticate. Options are:…\nThe following are example notebooks (.ipynb)…"
  },
  {
    "objectID": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html#single-file-in-region-direct-s3-access-of-netcdf-file",
    "href": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html#single-file-in-region-direct-s3-access-of-netcdf-file",
    "title": "EarthData Cloud Cookbook",
    "section": "Single file in-region direct S3 access of netcdf file",
    "text": "Single file in-region direct S3 access of netcdf file\n\nfs_s3 = s3fs.S3FileSystem(anon=False, key=temp_creds_req['accessKeyId'], secret=temp_creds_req['secretAccessKey'], token=temp_creds_req['sessionToken'])\n\n\ns3_url = s3_urls[0]\ns3_url\n\n's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc'\n\n\n\ns3_file_obj = fs_s3.open(s3_url, mode='rb')\n\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (x: 7814, y: 8075, time: 365, nv: 2)\nCoordinates:\n  * x                        (x) float32 -4.56e+06 -4.559e+06 ... 3.253e+06\n  * y                        (y) float32 4.984e+06 4.983e+06 ... -3.09e+06\n    lat                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n    lon                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n  * time                     (time) datetime64[ns] 2015-01-01T12:00:00 ... 20...\nDimensions without coordinates: nv\nData variables:\n    yearday                  (time) int16 dask.array<chunksize=(365,), meta=np.ndarray>\n    time_bnds                (time, nv) datetime64[ns] dask.array<chunksize=(365, 2), meta=np.ndarray>\n    lambert_conformal_conic  int16 ...\n    tmax                     (time, y, x) float32 dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>\nAttributes:\n    start_year:        2015\n    source:            Daymet Software Version 4.0\n    Version_software:  Daymet Software Version 4.0\n    Version_data:      Daymet Data Version 4.0\n    Conventions:       CF-1.6\n    citation:          Please see http://daymet.ornl.gov/ for current Daymet ...\n    references:        Please see http://daymet.ornl.gov/ for current informa...xarray.DatasetDimensions:x: 7814y: 8075time: 365nv: 2Coordinates: (5)x(x)float32-4.56e+06 -4.559e+06 ... 3.253e+06units :mlong_name :x coordinate of projectionstandard_name :projection_x_coordinatearray([-4560250., -4559250., -4558250., ...,  3250750.,  3251750.,  3252750.],\n      dtype=float32)y(y)float324.984e+06 4.983e+06 ... -3.09e+06units :mlong_name :y coordinate of projectionstandard_name :projection_y_coordinatearray([ 4984000.,  4983000.,  4982000., ..., -3088000., -3089000., -3090000.],\n      dtype=float32)lat(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_northlong_name :latitude coordinatestandard_name :latitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         3 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \nlon(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_eastlong_name :longitude coordinatestandard_name :longitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         3 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \ntime(time)datetime64[ns]2015-01-01T12:00:00 ... 2015-12-...standard_name :timebounds :time_bndslong_name :24-hour day based on local timearray(['2015-01-01T12:00:00.000000000', '2015-01-02T12:00:00.000000000',\n       '2015-01-03T12:00:00.000000000', ..., '2015-12-29T12:00:00.000000000',\n       '2015-12-30T12:00:00.000000000', '2015-12-31T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (4)yearday(time)int16dask.array<chunksize=(365,), meta=np.ndarray>long_name :day of year (DOY) starting with day 1 on Januaray 1st\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         730 B \n                         730 B \n                    \n                    \n                    \n                         Shape \n                         (365,) \n                         (365,) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     int16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  365\n  1\n\n        \n    \ntime_bnds(time, nv)datetime64[ns]dask.array<chunksize=(365, 2), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.70 kiB \n                         5.70 kiB \n                    \n                    \n                    \n                         Shape \n                         (365, 2) \n                         (365, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  365\n\n        \n    \nlambert_conformal_conic()int16...grid_mapping_name :lambert_conformal_coniclongitude_of_central_meridian :-100.0latitude_of_projection_origin :42.5false_easting :0.0false_northing :0.0standard_parallel :[25. 60.]semi_major_axis :6378137.0inverse_flattening :298.257223563array(-32767, dtype=int16)tmax(time, y, x)float32dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>long_name :daily maximum temperatureunits :degrees Cgrid_mapping :lambert_conformal_coniccell_methods :area: mean time: maximum\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         85.80 GiB \n                         127.76 MiB \n                    \n                    \n                    \n                         Shape \n                         (365, 8075, 7814) \n                         (55, 475, 1282) \n                    \n                    \n                         Count \n                         834 Tasks \n                         833 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n  365\n\n        \n    \nAttributes: (7)start_year :2015source :Daymet Software Version 4.0Version_software :Daymet Software Version 4.0Version_data :Daymet Data Version 4.0Conventions :CF-1.6citation :Please see http://daymet.ornl.gov/ for current Daymet data citation informationreferences :Please see http://daymet.ornl.gov/ for current information on Daymet references"
  },
  {
    "objectID": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html#multi-file-in-region-direct-s3-access-of-netcdf-files",
    "href": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html#multi-file-in-region-direct-s3-access-of-netcdf-files",
    "title": "EarthData Cloud Cookbook",
    "section": "Multi-file in-region direct S3 access of netcdf files",
    "text": "Multi-file in-region direct S3 access of netcdf files\n\n# Iterate through remote_files to create a fileset\nfileset = [fs_s3.open(file) for file in s3_urls]\n\n\n# This works...if you rerun this line and get a context manager error, try 1. rerunning the line above then this line \nxr_ts = xr.open_mfdataset(fileset, chunks='auto', engine='h5netcdf')\n\n\nxr_ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (x: 7814, y: 8075, time: 2190, nv: 2)\nCoordinates:\n  * x                        (x) float32 -4.56e+06 -4.559e+06 ... 3.253e+06\n  * y                        (y) float32 4.984e+06 4.983e+06 ... -3.09e+06\n    lat                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n    lon                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n  * time                     (time) datetime64[ns] 2015-01-01T12:00:00 ... 20...\nDimensions without coordinates: nv\nData variables:\n    yearday                  (time) int16 dask.array<chunksize=(365,), meta=np.ndarray>\n    time_bnds                (time, nv) datetime64[ns] dask.array<chunksize=(365, 2), meta=np.ndarray>\n    lambert_conformal_conic  (time) int16 -32767 -32767 -32767 ... -32767 -32767\n    tmax                     (time, y, x) float32 dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>\nAttributes:\n    start_year:        2015\n    source:            Daymet Software Version 4.0\n    Version_software:  Daymet Software Version 4.0\n    Version_data:      Daymet Data Version 4.0\n    Conventions:       CF-1.6\n    citation:          Please see http://daymet.ornl.gov/ for current Daymet ...\n    references:        Please see http://daymet.ornl.gov/ for current informa...xarray.DatasetDimensions:x: 7814y: 8075time: 2190nv: 2Coordinates: (5)x(x)float32-4.56e+06 -4.559e+06 ... 3.253e+06units :mlong_name :x coordinate of projectionstandard_name :projection_x_coordinatearray([-4560250., -4559250., -4558250., ...,  3250750.,  3251750.,  3252750.],\n      dtype=float32)y(y)float324.984e+06 4.983e+06 ... -3.09e+06units :mlong_name :y coordinate of projectionstandard_name :projection_y_coordinatearray([ 4984000.,  4983000.,  4982000., ..., -3088000., -3089000., -3090000.],\n      dtype=float32)lat(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_northlong_name :latitude coordinatestandard_name :latitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         51 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \nlon(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_eastlong_name :longitude coordinatestandard_name :longitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         51 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \ntime(time)datetime64[ns]2015-01-01T12:00:00 ... 2020-12-...standard_name :timebounds :time_bndslong_name :24-hour day based on local timearray(['2015-01-01T12:00:00.000000000', '2015-01-02T12:00:00.000000000',\n       '2015-01-03T12:00:00.000000000', ..., '2020-12-28T12:00:00.000000000',\n       '2020-12-29T12:00:00.000000000', '2020-12-30T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (4)yearday(time)int16dask.array<chunksize=(365,), meta=np.ndarray>long_name :day of year (DOY) starting with day 1 on Januaray 1st\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         4.28 kiB \n                         730 B \n                    \n                    \n                    \n                         Shape \n                         (2190,) \n                         (365,) \n                    \n                    \n                         Count \n                         18 Tasks \n                         6 Chunks \n                    \n                    \n                     Type \n                     int16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  2190\n  1\n\n        \n    \ntime_bnds(time, nv)datetime64[ns]dask.array<chunksize=(365, 2), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         34.22 kiB \n                         5.70 kiB \n                    \n                    \n                    \n                         Shape \n                         (2190, 2) \n                         (365, 2) \n                    \n                    \n                         Count \n                         18 Tasks \n                         6 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  2190\n\n        \n    \nlambert_conformal_conic(time)int16-32767 -32767 ... -32767 -32767grid_mapping_name :lambert_conformal_coniclongitude_of_central_meridian :-100.0latitude_of_projection_origin :42.5false_easting :0.0false_northing :0.0standard_parallel :[25. 60.]semi_major_axis :6378137.0inverse_flattening :298.257223563array([-32767, -32767, -32767, ..., -32767, -32767, -32767], dtype=int16)tmax(time, y, x)float32dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>long_name :daily maximum temperatureunits :degrees Cgrid_mapping :lambert_conformal_coniccell_methods :area: mean time: maximum\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         514.78 GiB \n                         127.76 MiB \n                    \n                    \n                    \n                         Shape \n                         (2190, 8075, 7814) \n                         (55, 475, 1282) \n                    \n                    \n                         Count \n                         10002 Tasks \n                         4998 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n  2190\n\n        \n    \nAttributes: (7)start_year :2015source :Daymet Software Version 4.0Version_software :Daymet Software Version 4.0Version_data :Daymet Data Version 4.0Conventions :CF-1.6citation :Please see http://daymet.ornl.gov/ for current Daymet data citation informationreferences :Please see http://daymet.ornl.gov/ for current information on Daymet references\n\n\n\n#xr_ts.SSH.hvplot.image()"
  },
  {
    "objectID": "examples/ORNL/ORNL_DAYMET__Kerchunk.html",
    "href": "examples/ORNL/ORNL_DAYMET__Kerchunk.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "!mamba install kerchunk -y --quiet\n\n\n!mamba install h5py=3.2 -y --quiet\n\n\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport s3fs\nimport datetime as dt\nimport logging\nimport fsspec\nimport ujson\nimport requests\nfrom tqdm import tqdm\nfrom glob import glob\n\n\nimport kerchunk.hdf\n\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['ornldaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()\n\n\n#fs = fsspec.filesystem('s3', anon=True)\nfs = s3fs.S3FileSystem(anon=False, key=temp_creds_req['accessKeyId'], secret=temp_creds_req['secretAccessKey'], token=temp_creds_req['sessionToken'])\n\n\nurls = ['s3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2016.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2017.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2018.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2019.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2020.nc']\n\n\ndef gen_json(u):\n    so = dict(\n        mode=\"rb\", anon=False, default_fill_cache=False,\n        default_cache_type=\"none\"\n    )\n    with fs.open(u, **so) as infile:\n        print(u)\n        h5chunks = kerchunk.hdf.SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outfile:\n           outfile.write(ujson.dumps(h5chunks.translate()).encode())\n\n\nfor u in urls:\n    gen_json(u)\n\n\nu = 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc'\n\n\nso = dict(\n    mode=\"rb\", anon=False, default_fill_cache=False, default_cache_type=\"none\"\n    )\n\n\ninf = fs.open(u, **so)\n\n\nh5chunks = kerchunk.hdf.SingleHdf5ToZarr(inf, u, inline_threshold=300)\n\n\nh5chunks.translate()\n\nPermissionError: The provided token has expired."
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#requirements",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#requirements",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Requirements",
    "text": "Requirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n3. netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata."
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#import-required-packages",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#import-required-packages",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Import required packages",
    "text": "Import required packages\n\nimport requests\nimport xarray as xr\nimport ujson\nimport s3fs\nimport fsspec\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport pathlib\nimport hvplot.xarray\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\nimport warnings\nwarnings.simplefilter(\"ignore\")"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Create Dask client to process the output json file in parallel",
    "text": "Create Dask client to process the output json file in parallel\nGenerating the Kerchunk reference file can take some time depending on the internal structure of the data. Dask allows us to execute the reference file generation process in parallel, thus speeding up the overall process.\n\nimport dask\nfrom dask.distributed import Client\nclient = Client(n_workers=4)\nclient\n\n2022-05-11 15:27:29,674 - distributed.diskutils - INFO - Found stale lock file and directory '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-mezhdsy7', purging\n/srv/conda/envs/notebook/lib/python3.9/contextlib.py:126: UserWarning: Creating scratch directories is taking a surprisingly long time. This is often due to running workers on a network file system. Consider specifying a local-directory to point workers to write scratch data to a local disk.\n  next(self.gen)\n\n\n\n     \n    \n        Client\n        Client-ddf55e52-d13e-11ec-818c-b6609e8b92a4\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: distributed.LocalCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://127.0.0.1:41805/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        a24e60d3\n        \n            \n                \n                    Dashboard: http://127.0.0.1:41805/status\n                \n                \n                    Workers: 4\n                \n            \n            \n                \n                    Total threads: 4\n                \n                \n                    Total memory: 15.18 GiB\n                \n            \n            \n            \n    Status: running\n    Using processes: True\n\n\n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-8e045442-a409-4c3b-8c8c-a95470883931\n            \n                \n                    \n                        Comm: tcp://127.0.0.1:36901\n                    \n                    \n                        Workers: 4\n                    \n                \n                \n                    \n                        Dashboard: http://127.0.0.1:41805/status\n                    \n                    \n                        Total threads: 4\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 15.18 GiB\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:34235\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:42845/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:37927\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-869qv5xb\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:40997\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:41189/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:35257\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-3mo0d80c\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:46429\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:42211/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:34287\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-o2fvmao4\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:41615\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:41507/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:43053\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-9u77hywd"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#get-temporary-s3-credentials",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#get-temporary-s3-credentials",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Get temporary S3 credentials",
    "text": "Get temporary S3 credentials\nTemporary S3 credentials need to be passed to AWS. Note, these credentials must be refreshed after 1 hour.\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['podaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Direct Access a single netCDF4 file",
    "text": "Direct Access a single netCDF4 file\nPass temporary credentials to our filesystem object to access the S3 assets\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\nTime how long it takes to directly access a cloud asset for comparisons later.\n\n%%time\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\nCPU times: user 228 ms, sys: 8.51 ms, total: 237 ms\nWall time: 272 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 1, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * time            (time) datetime64[ns] 2015-01-16T12:00:00\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\n    latitude_bnds   (latitude, nv) float32 dask.array<chunksize=(360, 2), meta=np.ndarray>\n    longitude_bnds  (longitude, nv) float32 dask.array<chunksize=(720, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    Conventions:                  CF-1.8, ACDD-1.3\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-02-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2015-01-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         088d03b8-4158-11eb-876b-0cc47a3f47f1xarray.DatasetDimensions:time: 1latitude: 360longitude: 720nv: 2Coordinates: (6)time(time)datetime64[ns]2015-01-16T12:00:00axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2015-01-16T12:00:00.000000000'], dtype='datetime64[ns]')latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         16 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (1, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  1\n\n        \n    \nlatitude_bnds(latitude, nv)float32dask.array<chunksize=(360, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :latitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.81 kiB \n                         2.81 kiB \n                    \n                    \n                    \n                         Shape \n                         (360, 2) \n                         (360, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  360\n\n        \n    \nlongitude_bnds(longitude, nv)float32dask.array<chunksize=(720, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :longitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.62 kiB \n                         5.62 kiB \n                    \n                    \n                    \n                         Shape \n                         (720, 2) \n                         (720, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  720\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mcomment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.valid_min :-1.8805772066116333valid_max :1.4207719564437866\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mcomment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.valid_min :-0.30144819617271423valid_max :0.5245633721351624\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mcomment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.valid_min :-1.6654272079467773valid_max :1.4550364017486572\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nAttributes: (57)acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.Conventions :CF-1.8, ACDD-1.3coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-02-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2015-01-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :088d03b8-4158-11eb-876b-0cc47a3f47f1"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#specify-a-list-of-s3-urls",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#specify-a-list-of-s3-urls",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Specify a list of S3 URLs",
    "text": "Specify a list of S3 URLs\nData Collection: ECCO_L4_SSH_05DEG_MONTHLY_V4R4\nTime Range: 2015\n\nurls = ['s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-02_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-03_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-04_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-05_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-06_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-07_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-08_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-10_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-11_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-12_ECCO_V4r4_latlon_0p50deg.nc']"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Generate the Kerchunk reference files.",
    "text": "Generate the Kerchunk reference files.\nDefine a function to generate the Kerchunk reference files. These files can take a little time to generate.\n\ndef gen_json(u):\n    so = dict(\n        mode= \"rb\", \n        anon= False, \n        default_fill_cache= False,\n        default_cache_type= \"none\"\n    )\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outf:\n            outf.write(ujson.dumps(h5chunks.translate()).encode())\n\nCreate output jsons directory if one does not exist.\n\npathlib.Path('./jsons/').mkdir(exist_ok=True)\n\nUse the Dask Delayed function to create the Kerchunk reference file for each URL from the list of URLs in parallel\n\n%%time\n\nreference_files = []\nfor url in urls:\n    ref = dask.delayed(gen_json)(url)\n    reference_files.append(ref)\n\nreference_files_compute = dask.compute(*reference_files)\n\nCPU times: user 195 ms, sys: 83.4 ms, total: 278 ms\nWall time: 1.38 s\n\n\n\nfs_ref_list = fsspec.filesystem('file')\n\n\nreference_list = sorted([x for x in fs_ref_list.ls('jsons') if '.json' in x])\nreference_list\n\n['/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-02_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-03_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-04_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-05_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-06_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-07_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-08_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-10_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-11_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-12_ECCO_V4r4_latlon_0p50deg.nc.json']"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Read single netCDF4 using Kerchunk reference file",
    "text": "Read single netCDF4 using Kerchunk reference file\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\",\n                              fo=reference,\n                              ref_storage_args=s_opts,\n                              remote_protocol='s3', \n                              remote_options=r_opts)\n\nRead in a single reference object. We get a lot of SerializationWarnings which are ignored here using the warning package.\nNOTE, the fill value, data range, min value, and max value may not match the source file. Will need to look into this more.\n\n%%time\n\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\nCPU times: user 56.3 ms, sys: 26 ms, total: 82.2 ms\nWall time: 221 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 1, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float32 dask.array<chunksize=(360, 2), meta=np.ndarray>\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float32 dask.array<chunksize=(720, 2), meta=np.ndarray>\n  * time            (time) datetime64[ns] 2014-12-16T12:00:00\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2014-12-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         08a2fc68-4158-11eb-b498-0cc47a3f6943xarray.DatasetDimensions:time: 1latitude: 360longitude: 720nv: 2Coordinates: (6)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)latitude_bnds(latitude, nv)float32dask.array<chunksize=(360, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :latitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.81 kiB \n                         2.81 kiB \n                    \n                    \n                    \n                         Shape \n                         (360, 2) \n                         (360, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  360\n\n        \n    \nlongitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)longitude_bnds(longitude, nv)float32dask.array<chunksize=(720, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :longitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.62 kiB \n                         5.62 kiB \n                    \n                    \n                    \n                         Shape \n                         (720, 2) \n                         (720, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  720\n\n        \n    \ntime(time)datetime64[ns]2014-12-16T12:00:00axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000'], dtype='datetime64[ns]')time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         16 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (1, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  1\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mvalid_max :0.5245633721351624valid_min :-0.30144819617271423\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mvalid_max :1.4550364017486572valid_min :-1.6654272079467773\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nAttributes: (57)Conventions :CF-1.8, ACDD-1.3acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-01-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2014-12-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :08a2fc68-4158-11eb-b498-0cc47a3f6943"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "Read multiple netCDF4 files using Kerchunk reference file",
    "text": "Read multiple netCDF4 files using Kerchunk reference file\nCombine the individual reference files into a single time series reference object\n\n%%time\n\nds_k =[]\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\"reference\",\n                           fo=ref,\n                           ref_storage_args=s_opts,\n                           remote_protocol='s3',\n                           remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nCPU times: user 735 ms, sys: 31.4 ms, total: 766 ms\nWall time: 3.57 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 13, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float32 -90.0 -89.5 -89.5 ... 89.5 89.5 90.0\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float32 -180.0 -179.5 -179.5 ... 179.5 180.0\n  * time            (time) datetime64[ns] 2014-12-16T12:00:00 ... 2015-12-16T...\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2014-12-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         08a2fc68-4158-11eb-b498-0cc47a3f6943xarray.DatasetDimensions:time: 13latitude: 360longitude: 720nv: 2Coordinates: (6)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)latitude_bnds(latitude, nv)float32-90.0 -89.5 -89.5 ... 89.5 90.0coverage_content_type :coordinatelong_name :latitude bounds grid cellsarray([[-90. , -89.5],\n       [-89.5, -89. ],\n       [-89. , -88.5],\n       [-88.5, -88. ],\n       [-88. , -87.5],\n       [-87.5, -87. ],\n       [-87. , -86.5],\n       [-86.5, -86. ],\n       [-86. , -85.5],\n       [-85.5, -85. ],\n       [-85. , -84.5],\n       [-84.5, -84. ],\n       [-84. , -83.5],\n       [-83.5, -83. ],\n       [-83. , -82.5],\n       [-82.5, -82. ],\n       [-82. , -81.5],\n       [-81.5, -81. ],\n       [-81. , -80.5],\n       [-80.5, -80. ],\n...\n       [ 80. ,  80.5],\n       [ 80.5,  81. ],\n       [ 81. ,  81.5],\n       [ 81.5,  82. ],\n       [ 82. ,  82.5],\n       [ 82.5,  83. ],\n       [ 83. ,  83.5],\n       [ 83.5,  84. ],\n       [ 84. ,  84.5],\n       [ 84.5,  85. ],\n       [ 85. ,  85.5],\n       [ 85.5,  86. ],\n       [ 86. ,  86.5],\n       [ 86.5,  87. ],\n       [ 87. ,  87.5],\n       [ 87.5,  88. ],\n       [ 88. ,  88.5],\n       [ 88.5,  89. ],\n       [ 89. ,  89.5],\n       [ 89.5,  90. ]], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)longitude_bnds(longitude, nv)float32-180.0 -179.5 ... 179.5 180.0coverage_content_type :coordinatelong_name :longitude bounds grid cellsarray([[-180. , -179.5],\n       [-179.5, -179. ],\n       [-179. , -178.5],\n       ...,\n       [ 178.5,  179. ],\n       [ 179. ,  179.5],\n       [ 179.5,  180. ]], dtype=float32)time(time)datetime64[ns]2014-12-16T12:00:00 ... 2015-12-...axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000', '2015-01-16T12:00:00.000000000',\n       '2015-02-15T00:00:00.000000000', '2015-03-16T12:00:00.000000000',\n       '2015-04-16T00:00:00.000000000', '2015-05-16T12:00:00.000000000',\n       '2015-06-16T00:00:00.000000000', '2015-07-16T12:00:00.000000000',\n       '2015-08-16T12:00:00.000000000', '2015-09-16T00:00:00.000000000',\n       '2015-10-16T12:00:00.000000000', '2015-11-16T00:00:00.000000000',\n       '2015-12-16T12:00:00.000000000'], dtype='datetime64[ns]')time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         208 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (13, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  13\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mvalid_max :0.5245633721351624valid_min :-0.30144819617271423\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mvalid_max :1.4550364017486572valid_min :-1.6654272079467773\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nAttributes: (57)Conventions :CF-1.8, ACDD-1.3acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-01-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2014-12-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :08a2fc68-4158-11eb-b498-0cc47a3f6943\n\n\n\nds_multi['SSH']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'SSH' (time: 13, latitude: 360, longitude: 720)>\ndask.array<concatenate, shape=(13, 360, 720), dtype=float32, chunksize=(1, 360, 720), chunktype=numpy.ndarray>\nCoordinates:\n  * latitude   (latitude) float32 -89.75 -89.25 -88.75 ... 88.75 89.25 89.75\n  * longitude  (longitude) float32 -179.8 -179.2 -178.8 ... 178.8 179.2 179.8\n  * time       (time) datetime64[ns] 2014-12-16T12:00:00 ... 2015-12-16T12:00:00\nAttributes:\n    comment:                Dynamic sea surface height anomaly above the geoi...\n    coverage_content_type:  modelResult\n    long_name:              Dynamic sea surface height anomaly\n    standard_name:          sea_surface_height_above_geoid\n    units:                  m\n    valid_max:              1.4207719564437866\n    valid_min:              -1.8805772066116333xarray.DataArray'SSH'time: 13latitude: 360longitude: 720dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nCoordinates: (3)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)time(time)datetime64[ns]2014-12-16T12:00:00 ... 2015-12-...axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000', '2015-01-16T12:00:00.000000000',\n       '2015-02-15T00:00:00.000000000', '2015-03-16T12:00:00.000000000',\n       '2015-04-16T00:00:00.000000000', '2015-05-16T12:00:00.000000000',\n       '2015-06-16T00:00:00.000000000', '2015-07-16T12:00:00.000000000',\n       '2015-08-16T12:00:00.000000000', '2015-09-16T00:00:00.000000000',\n       '2015-10-16T12:00:00.000000000', '2015-11-16T00:00:00.000000000',\n       '2015-12-16T12:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n\n\n\n# Commenting for quarto site render\n# ds_multi['SSH'].hvplot.image()\n\nUnable to display output for mime type(s):"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#references",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#references",
    "title": "Reading ECCO Sea Surface Height (SSH) Data Using Kerchunk Reference File",
    "section": "References",
    "text": "References\n\nhttps://github.com/fsspec/kerchunk\nhttps://medium.com/pangeo/fake-it-until-you-make-it-reading-goes-netcdf4-data-on-aws-s3-as-zarr-for-rapid-data-access-61e33f8fe685\nhttps://medium.com/pangeo/cloud-performant-reading-of-netcdf4-hdf5-data-using-the-zarr-library-1a95c5c92314"
  },
  {
    "objectID": "examples/earthdata-access-demo.html#overview",
    "href": "examples/earthdata-access-demo.html#overview",
    "title": "EarthData Cloud Cookbook",
    "section": "Overview",
    "text": "Overview\n\nTL;DR: earthdata is a Python package to search, preview and access NASA datasets (on-prem or in the cloud) with a few lines of code.\n\nfrom earthdata import Auth, DataGranules, Store\n\n# first we authenticate with NASA EDL\nauth = Auth().login(strategy=\"netrc\")\n\n# Then we build a Query with spatiotemporal parameters\nGranuleQuery = DataGranules().concept_id(\"C1575731655-LPDAAC_ECS\").bounding_box(-134.7,58.9,-133.9,59.2)\n\n# We get the metadata records from CMR\ngranules = GranuleQuery.get()\n\n# Now it{s time to download (or open) our data granules list with get()\nfiles = Store(auth).get(granules, local_path='./data')\n\n# Now to the important science!\n\n\nWhy?\nThere are many ways to access NASA datasets, we can use the Earthdata search portal. We can use DAAC specific portals or tools. We could even use data.gov! Web portals are great but they are not designed for programmatic access and reproducible workflows. This is extremely important in the age of the cloud and reproducible open science.\nThe good news is that NASA also exposes APIs that allows us to search, transform and access data in a programmatic way. Many of these libraries contain amazing features and some similarities. In this context, earthdata aims to be a simple library that can deal with the important parts of the metadata so we can access or download data without having to worry if a given dataset is on-prem or in the cloud.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLibrary\nLanguage Agnostic\nOn-Prem Access\nCloud Access\nProgrammatic\nSubsetting\nGIS Operations\nAuthentication\nFull Archive Coverage\n\n\n\n\nearthdata\nPython\n✅\n✅\n✅\nNo\nNo\n✅\n✅\n\n\nHarmonyPy\nPython*\n✅\n✅\n✅\n✅\n✅\n✅\nNo\n\n\nOpenDAP\n✅\n✅\nNo\n✅\n✅\nNo\nNo\n✅\n\n\ncmr-stac\nPython\n✅\n✅\n✅\nNo\nNo\nNo\n✅\n\n\nEarthdata Portal\n✅\n✅\n✅\nNo\nNo\nNo\n✅\n✅\n\n\nGDAL\n✅*\n✅\n✅\n✅\nNo\n✅*\n✅*\n✅\n\n\nrsat\nR\n✅\nNo\n✅\nNo\n✅*\n✅*\nNo\n\n\ngetSpatialData\nR\n✅\nNo\n✅\nNo\n✅*\n✅*\nNo"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#requirements",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#requirements",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Requirements",
    "text": "Requirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n3. netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata."
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#import-required-packages",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#import-required-packages",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Import required packages",
    "text": "Import required packages\n\nimport requests\nimport xarray as xr\nimport ujson\nimport s3fs\nimport fsspec\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport pathlib\nimport hvplot.xarray\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\nimport warnings\nwarnings.simplefilter(\"ignore\")"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Create Dask client to process the output json file in parallel",
    "text": "Create Dask client to process the output json file in parallel\nGenerating the Kerchunk reference file can take some time depending on the internal structure of the data. Dask allows us to execute the reference file generation process in parallel, thus speeding up the overall process.\n\nimport dask\nfrom dask.distributed import Client\nclient = Client(n_workers=4)\nclient\n\n\n     \n    \n        Client\n        Client-3e6c0be3-d18c-11ec-809e-527eee20f3f0\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: distributed.LocalCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://127.0.0.1:8787/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        64356e89\n        \n            \n                \n                    Dashboard: http://127.0.0.1:8787/status\n                \n                \n                    Workers: 4\n                \n            \n            \n                \n                    Total threads: 4\n                \n                \n                    Total memory: 7.48 GiB\n                \n            \n            \n            \n    Status: running\n    Using processes: True\n\n\n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-9811e6a9-be9d-4a54-9cc3-f17a8d5ea5bb\n            \n                \n                    \n                        Comm: tcp://127.0.0.1:33947\n                    \n                    \n                        Workers: 4\n                    \n                \n                \n                    \n                        Dashboard: http://127.0.0.1:8787/status\n                    \n                    \n                        Total threads: 4\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 7.48 GiB\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:38069\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:44433/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:43685\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-6b5pkr_f\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:32859\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:36075/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:35291\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-piqb4cet\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:36601\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:45185/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:41163\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-d_91r19y\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:34309\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:38301/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:44119\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-9wa5m1vc"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#get-temporary-s3-credentials",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#get-temporary-s3-credentials",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Get temporary S3 credentials",
    "text": "Get temporary S3 credentials\nTemporary S3 credentials need to be passed to AWS. Note, these credentials must be refreshed after 1 hour.\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['gesdisc']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Direct Access a single netCDF4 file",
    "text": "Direct Access a single netCDF4 file\nPass temporary credentials to our filesystem object to access the S3 assets\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\nTime how long it takes to directly access a cloud asset for comparisons later.\n\n%%time\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\nCPU times: user 2.9 s, sys: 228 ms, total: 3.13 s\nWall time: 7.53 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (lon: 576, lat: 361, time: 24)\nCoordinates:\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-01T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\nAttributes: (12/30)\n    History:                           Original file generated: Sat May 11 22...\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    Conventions:                       CF-1\n    Institution:                       NASA Global Modeling and Assimilation ...\n    References:                        http://gmao.gsfc.nasa.gov\n    ...                                ...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    RangeBeginningDate:                2019-05-01\n    RangeBeginningTime:                00:00:00.000000\n    RangeEndingDate:                   2019-05-01\n    RangeEndingTime:                   23:59:59.000000xarray.DatasetDimensions:lon: 576lat: 361time: 24Coordinates: (3)lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...long_name :timetime_increment :10000begin_date :20190501begin_time :3000vmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', '2019-05-01T03:30:00.000000000',\n       '2019-05-01T04:30:00.000000000', '2019-05-01T05:30:00.000000000',\n       '2019-05-01T06:30:00.000000000', '2019-05-01T07:30:00.000000000',\n       '2019-05-01T08:30:00.000000000', '2019-05-01T09:30:00.000000000',\n       '2019-05-01T10:30:00.000000000', '2019-05-01T11:30:00.000000000',\n       '2019-05-01T12:30:00.000000000', '2019-05-01T13:30:00.000000000',\n       '2019-05-01T14:30:00.000000000', '2019-05-01T15:30:00.000000000',\n       '2019-05-01T16:30:00.000000000', '2019-05-01T17:30:00.000000000',\n       '2019-05-01T18:30:00.000000000', '2019-05-01T19:30:00.000000000',\n       '2019-05-01T20:30:00.000000000', '2019-05-01T21:30:00.000000000',\n       '2019-05-01T22:30:00.000000000', '2019-05-01T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :cloud_top_pressureunits :Pafmissing_value :1000000000000000.0standard_name :cloud_top_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :cloud_top_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :cloud_top_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :zero_plane_displacement_heightunits :mfmissing_value :1000000000000000.0standard_name :zero_plane_displacement_heightvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_1000_mbunits :mfmissing_value :1000000000000000.0standard_name :height_at_1000_mbvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_250_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_500_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_850_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :omega_at_500_hPaunits :Pa s-1fmissing_value :1000000000000000.0standard_name :omega_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :pbltop_pressureunits :Pafmissing_value :1000000000000000.0standard_name :pbltop_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :surface_pressureunits :Pafmissing_value :1000000000000000.0standard_name :surface_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_250_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_500_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_850_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_specific_humidityunits :kg kg-1fmissing_value :1000000000000000.0standard_name :10-meter_specific_humidityvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_specific_humidityunits :kg kg-1fmissing_value :1000000000000000.0standard_name :2-meter_specific_humidityvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :sea_level_pressureunits :Pafmissing_value :1000000000000000.0standard_name :sea_level_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_air_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :10-meter_air_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_250_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_air_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :2-meter_air_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :dew_point_temperature_at_2_munits :Kfmissing_value :1000000000000000.0standard_name :dew_point_temperature_at_2_mvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :wet_bulb_temperature_at_2_munits :Kfmissing_value :1000000000000000.0standard_name :wet_bulb_temperature_at_2_mvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_500_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_850_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_column_ozoneunits :Dobsonsfmissing_value :1000000000000000.0standard_name :total_column_ozonevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_column_odd_oxygenunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_column_odd_oxygenvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_ice_waterunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_ice_watervmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_liquid_waterunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_liquid_watervmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_water_vaporunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_water_vaporvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_blended_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_blended_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_thermal_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_thermal_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_EPV_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_EPV_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1fmissing_value :1000000000000000.0standard_name :tropopause_specific_humidity_using_blended_TROPP_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kfmissing_value :1000000000000000.0standard_name :tropopause_temperature_using_blended_TROPP_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :surface_skin_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :surface_skin_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_eastward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :10-meter_eastward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_250_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_eastward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :2-meter_eastward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_500_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_50_metersunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_50_metersvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_850_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_northward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :10-meter_northward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_250_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_northward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :2-meter_northward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_500_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_50_metersunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_50_metersvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_850_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :lifting_condensation_levelunits :mfmissing_value :1000000000000000.0standard_name :lifting_condensation_levelvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nAttributes: (30)History :Original file generated: Sat May 11 22:08:52 2019 GMTComment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Conventions :CF-1Institution :NASA Global Modeling and Assimilation OfficeReferences :http://gmao.gsfc.nasa.govFormat :NetCDF-4/HDF-5SpatialCoverage :globalVersionID :5.12.4TemporalRange :1980-01-01 -> 2016-12-31identifier_product_doi_authority :http://dx.doi.org/ShortName :M2T1NXSLVGranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTLongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsTitle :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsSouthernmostLatitude :-90.0NorthernmostLatitude :90.0WesternmostLongitude :-180.0EasternmostLongitude :179.375LatitudeResolution :0.5LongitudeResolution :0.625DataResolution :0.5 x 0.625Source :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSContact :http://gmao.gsfc.nasa.govidentifier_product_doi :10.5067/VJAFPLI1CSIVRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#specify-a-list-of-s3-urls",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#specify-a-list-of-s3-urls",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Specify a list of S3 URLs",
    "text": "Specify a list of S3 URLs\nData Collection: MERRA2_400.tavg1_2d_slv_Nx\nTime Range: 05/01/2019 - 05/31/2019\n\nurls = ['s3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4']"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Generate the Kerchunk reference files.",
    "text": "Generate the Kerchunk reference files.\nDefine a function to generate the Kerchunk reference files. These files can take a little time to generate.\n\ndef gen_json(u):\n    so = dict(\n        mode= \"rb\", \n        anon= False, \n        default_fill_cache= False,\n        default_cache_type= \"none\"\n    )\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outf:\n            outf.write(ujson.dumps(h5chunks.translate()).encode())\n\nCreate output jsons directory if one does not exist.\n\npathlib.Path('./jsons/').mkdir(exist_ok=True)\n\nUse the Dask Delayed function to create the Kerchunk reference file for each URL from the list of URLs in parallel\n\n%%time\n\nreference_files = []\nfor url in urls:\n    ref = dask.delayed(gen_json)(url)\n    reference_files.append(ref)\n\nreference_files_compute = dask.compute(*reference_files)\n\nCPU times: user 29 s, sys: 11.1 s, total: 40 s\nWall time: 11min 6s\n\n\nCreate a python list with the paths to the reference files.\n\nreference_list = sorted(glob('./jsons/*.json'))\nreference_list\n\n['./jsons/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4.json']"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Read single netCDF4 using Kerchunk reference file",
    "text": "Read single netCDF4 using Kerchunk reference file\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\",\n                              fo=reference,\n                              ref_storage_args=s_opts,\n                              remote_protocol='s3', \n                              remote_options=r_opts)\n\nRead in a single reference object. We get a lot of SerializationWarnings which are ignored here using the warning package.\nNOTE, the fill value, data range, min value, and max value DO NOT match the source file. Will need to look into this more.\n\n%%time\n\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\nCPU times: user 142 ms, sys: 3.29 ms, total: 146 ms\nWall time: 354 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (time: 24, lat: 361, lon: 576)\nCoordinates:\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-01T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\nAttributes: (12/30)\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    Conventions:                       CF-1\n    DataResolution:                    0.5 x 0.625\n    EasternmostLongitude:              179.375\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    ...                                ...\n    TemporalRange:                     1980-01-01 -> 2016-12-31\n    Title:                             MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Ti...\n    VersionID:                         5.12.4\n    WesternmostLongitude:              -180.0\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    identifier_product_doi_authority:  http://dx.doi.org/xarray.DatasetDimensions:time: 24lat: 361lon: 576Coordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', '2019-05-01T03:30:00.000000000',\n       '2019-05-01T04:30:00.000000000', '2019-05-01T05:30:00.000000000',\n       '2019-05-01T06:30:00.000000000', '2019-05-01T07:30:00.000000000',\n       '2019-05-01T08:30:00.000000000', '2019-05-01T09:30:00.000000000',\n       '2019-05-01T10:30:00.000000000', '2019-05-01T11:30:00.000000000',\n       '2019-05-01T12:30:00.000000000', '2019-05-01T13:30:00.000000000',\n       '2019-05-01T14:30:00.000000000', '2019-05-01T15:30:00.000000000',\n       '2019-05-01T16:30:00.000000000', '2019-05-01T17:30:00.000000000',\n       '2019-05-01T18:30:00.000000000', '2019-05-01T19:30:00.000000000',\n       '2019-05-01T20:30:00.000000000', '2019-05-01T21:30:00.000000000',\n       '2019-05-01T22:30:00.000000000', '2019-05-01T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_pressurestandard_name :cloud_top_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_temperaturestandard_name :cloud_top_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :zero_plane_displacement_heightstandard_name :zero_plane_displacement_heightunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_1000_mbstandard_name :height_at_1000_mbunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_250_hPastandard_name :height_at_250_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_500_hPastandard_name :height_at_500_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_850_hPastandard_name :height_at_850_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :omega_at_500_hPastandard_name :omega_at_500_hPaunits :Pa s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :pbltop_pressurestandard_name :pbltop_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_pressurestandard_name :surface_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_250_hPastandard_name :specific_humidity_at_250_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_500_hPastandard_name :specific_humidity_at_500_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_850_hPastandard_name :specific_humidity_at_850_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_specific_humiditystandard_name :10-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_specific_humiditystandard_name :2-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :sea_level_pressurestandard_name :sea_level_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_air_temperaturestandard_name :10-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_250_hPastandard_name :air_temperature_at_250_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_air_temperaturestandard_name :2-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :dew_point_temperature_at_2_mstandard_name :dew_point_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :wet_bulb_temperature_at_2_mstandard_name :wet_bulb_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_850_hPastandard_name :air_temperature_at_850_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_ozonestandard_name :total_column_ozoneunits :Dobsonsvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_odd_oxygenstandard_name :total_column_odd_oxygenunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_ice_waterstandard_name :total_precipitable_ice_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_liquid_waterstandard_name :total_precipitable_liquid_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_water_vaporstandard_name :total_precipitable_water_vaporunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_blended_estimatestandard_name :tropopause_pressure_based_on_blended_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_thermal_estimatestandard_name :tropopause_pressure_based_on_thermal_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_EPV_estimatestandard_name :tropopause_pressure_based_on_EPV_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_specific_humidity_using_blended_TROPP_estimatestandard_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_temperature_using_blended_TROPP_estimatestandard_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_skin_temperaturestandard_name :surface_skin_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_eastward_windstandard_name :10-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_250_hPastandard_name :eastward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_eastward_windstandard_name :2-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_500_hPastandard_name :eastward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_50_metersstandard_name :eastward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_850_hPastandard_name :eastward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_northward_windstandard_name :10-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_250_hPastandard_name :northward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_northward_windstandard_name :2-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_500_hPastandard_name :northward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_50_metersstandard_name :northward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_850_hPastandard_name :northward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :lifting_condensation_levelstandard_name :lifting_condensation_levelunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nAttributes: (30)Comment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Contact :http://gmao.gsfc.nasa.govConventions :CF-1DataResolution :0.5 x 0.625EasternmostLongitude :179.375Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Format :NetCDF-4/HDF-5GranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4History :Original file generated: Sat May 11 22:08:52 2019 GMTInstitution :NASA Global Modeling and Assimilation OfficeLatitudeResolution :0.5LongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsLongitudeResolution :0.625NorthernmostLatitude :90.0ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000References :http://gmao.gsfc.nasa.govShortName :M2T1NXSLVSource :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSSouthernmostLatitude :-90.0SpatialCoverage :globalTemporalRange :1980-01-01 -> 2016-12-31Title :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsVersionID :5.12.4WesternmostLongitude :-180.0identifier_product_doi :10.5067/VJAFPLI1CSIVidentifier_product_doi_authority :http://dx.doi.org/"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "Read multiple netCDF4 files using Kerchunk reference file",
    "text": "Read multiple netCDF4 files using Kerchunk reference file\nCombine the individual reference files into a single time series reference object\n\n%%time\n\nds_k =[]\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\"reference\",\n                           fo=ref,\n                           ref_storage_args=s_opts,\n                           remote_protocol='s3',\n                           remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nCPU times: user 8.93 s, sys: 174 ms, total: 9.1 s\nWall time: 14.9 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (time: 744, lat: 361, lon: 576)\nCoordinates:\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-31T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\nAttributes: (12/30)\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    Conventions:                       CF-1\n    DataResolution:                    0.5 x 0.625\n    EasternmostLongitude:              179.375\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    ...                                ...\n    TemporalRange:                     1980-01-01 -> 2016-12-31\n    Title:                             MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Ti...\n    VersionID:                         5.12.4\n    WesternmostLongitude:              -180.0\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    identifier_product_doi_authority:  http://dx.doi.org/xarray.DatasetDimensions:time: 744lat: 361lon: 576Coordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', ..., '2019-05-31T21:30:00.000000000',\n       '2019-05-31T22:30:00.000000000', '2019-05-31T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_pressurestandard_name :cloud_top_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_temperaturestandard_name :cloud_top_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :zero_plane_displacement_heightstandard_name :zero_plane_displacement_heightunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_1000_mbstandard_name :height_at_1000_mbunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_250_hPastandard_name :height_at_250_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_500_hPastandard_name :height_at_500_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_850_hPastandard_name :height_at_850_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :omega_at_500_hPastandard_name :omega_at_500_hPaunits :Pa s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :pbltop_pressurestandard_name :pbltop_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_pressurestandard_name :surface_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_250_hPastandard_name :specific_humidity_at_250_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_500_hPastandard_name :specific_humidity_at_500_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_850_hPastandard_name :specific_humidity_at_850_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_specific_humiditystandard_name :10-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_specific_humiditystandard_name :2-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :sea_level_pressurestandard_name :sea_level_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_air_temperaturestandard_name :10-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_250_hPastandard_name :air_temperature_at_250_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_air_temperaturestandard_name :2-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :dew_point_temperature_at_2_mstandard_name :dew_point_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :wet_bulb_temperature_at_2_mstandard_name :wet_bulb_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_850_hPastandard_name :air_temperature_at_850_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_ozonestandard_name :total_column_ozoneunits :Dobsonsvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_odd_oxygenstandard_name :total_column_odd_oxygenunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_ice_waterstandard_name :total_precipitable_ice_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_liquid_waterstandard_name :total_precipitable_liquid_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_water_vaporstandard_name :total_precipitable_water_vaporunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_blended_estimatestandard_name :tropopause_pressure_based_on_blended_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_thermal_estimatestandard_name :tropopause_pressure_based_on_thermal_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_EPV_estimatestandard_name :tropopause_pressure_based_on_EPV_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_specific_humidity_using_blended_TROPP_estimatestandard_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_temperature_using_blended_TROPP_estimatestandard_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_skin_temperaturestandard_name :surface_skin_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_eastward_windstandard_name :10-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_250_hPastandard_name :eastward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_eastward_windstandard_name :2-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_500_hPastandard_name :eastward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_50_metersstandard_name :eastward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_850_hPastandard_name :eastward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_northward_windstandard_name :10-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_250_hPastandard_name :northward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_northward_windstandard_name :2-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_500_hPastandard_name :northward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_50_metersstandard_name :northward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_850_hPastandard_name :northward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :lifting_condensation_levelstandard_name :lifting_condensation_levelunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nAttributes: (30)Comment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Contact :http://gmao.gsfc.nasa.govConventions :CF-1DataResolution :0.5 x 0.625EasternmostLongitude :179.375Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Format :NetCDF-4/HDF-5GranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4History :Original file generated: Sat May 11 22:08:52 2019 GMTInstitution :NASA Global Modeling and Assimilation OfficeLatitudeResolution :0.5LongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsLongitudeResolution :0.625NorthernmostLatitude :90.0ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000References :http://gmao.gsfc.nasa.govShortName :M2T1NXSLVSource :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSSouthernmostLatitude :-90.0SpatialCoverage :globalTemporalRange :1980-01-01 -> 2016-12-31Title :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsVersionID :5.12.4WesternmostLongitude :-180.0identifier_product_doi :10.5067/VJAFPLI1CSIVidentifier_product_doi_authority :http://dx.doi.org/\n\n\nAgains, the fill value, data range, min value, and max value DO NOT match the source file. TODO: explore why the values are different\n\nds_multi['T500']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'T500' (time: 744, lat: 361, lon: 576)>\ndask.array<concatenate, shape=(744, 361, 576), dtype=float32, chunksize=(1, 91, 144), chunktype=numpy.ndarray>\nCoordinates:\n  * lat      (lat) float64 -90.0 -89.5 -89.0 -88.5 -88.0 ... 88.5 89.0 89.5 90.0\n  * lon      (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time     (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-31T23:30:00\nAttributes:\n    fmissing_value:  999999986991104.0\n    long_name:       air_temperature_at_500_hPa\n    standard_name:   air_temperature_at_500_hPa\n    units:           K\n    valid_range:     [-999999986991104.0, 999999986991104.0]\n    vmax:            999999986991104.0\n    vmin:            -999999986991104.0xarray.DataArray'T500'time: 744lat: 361lon: 576dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nCoordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', ..., '2019-05-31T21:30:00.000000000',\n       '2019-05-31T22:30:00.000000000', '2019-05-31T23:30:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n\n\n\n# Commenting for quarto site render\n# ds_multi['T500'].hvplot.image(x='lon', y='lat')"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#references",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#references",
    "title": "Reading MERRA2 Data Using Kerchunk Reference File",
    "section": "References",
    "text": "References\n\nhttps://github.com/fsspec/kerchunk\nhttps://medium.com/pangeo/fake-it-until-you-make-it-reading-goes-netcdf4-data-on-aws-s3-as-zarr-for-rapid-data-access-61e33f8fe685\nhttps://medium.com/pangeo/cloud-performant-reading-of-netcdf4-hdf5-data-using-the-zarr-library-1a95c5c92314"
  },
  {
    "objectID": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#data-access---rioxarray",
    "href": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#data-access---rioxarray",
    "title": "USGS Landsat Cloud Data - Search and Access",
    "section": "Data Access - rioxarray",
    "text": "Data Access - rioxarray\nSet working environment\n\nsession = boto3.Session()\n\n\nrio_env = rio.Env(AWSSession(session, requester_pays=True), \n                  AWS_NO_SIGN_REQUEST='NO',\n                  GDAL_DISABLE_READDIR_ON_OPEN='TRUE')\nrio_env.__enter__()\n\n<rasterio.env.Env at 0x7f6e5276eb50>\n\n\n\ns3_url = 's3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF'\n\nRead S3 asset as xarray datarray\n\nda = rioxarray.open_rasterio(s3_url, chunks='auto').squeeze('band', drop=True)\n\n\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (y: 7821, x: 7661)>\ndask.array<getitem, shape=(7821, 7661), dtype=uint16, chunksize=(7821, 7661), chunktype=numpy.ndarray>\nCoordinates:\n  * x            (x) float64 2.889e+05 2.889e+05 ... 5.187e+05 5.187e+05\n  * y            (y) float64 2.992e+06 2.992e+06 ... 2.758e+06 2.758e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    0.0\n    scale_factor:  1.0\n    add_offset:    0.0xarray.DataArrayy: 7821x: 7661dask.array<chunksize=(7821, 7661), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         114.28 MiB \n                         114.28 MiB \n                    \n                    \n                    \n                         Shape \n                         (7821, 7661) \n                         (7821, 7661) \n                    \n                    \n                         Count \n                         3 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     uint16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  7661\n  7821\n\n        \n    \nCoordinates: (3)x(x)float642.889e+05 2.889e+05 ... 5.187e+05array([288900., 288930., 288960., ..., 518640., 518670., 518700.])y(y)float642.992e+06 2.992e+06 ... 2.758e+06array([2992200., 2992170., 2992140., ..., 2757660., 2757630., 2757600.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 17N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-81],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32617\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 17Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-81.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 17N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-81],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32617\"]]GeoTransform :288885.0 30.0 0.0 2992215.0 0.0 -30.0array(0)Attributes: (3)_FillValue :0.0scale_factor :1.0add_offset :0.0\n\n\nPlot scene\n\n#da.hvplot(x='x', y='y', crs='epsg:32617', rasterize=True, width=800, height=600, tiles = 'ESRI') # TODO: how to exclude fill values\nda.hvplot(x='x', y='y', crs='epsg:32617', rasterize=True, width=800, height=600)\n\nUnable to display output for mime type(s):"
  },
  {
    "objectID": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#aws-cli",
    "href": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#aws-cli",
    "title": "USGS Landsat Cloud Data - Search and Access",
    "section": "AWS CLI",
    "text": "AWS CLI\nList content in bucket\n\n! aws s3 ls s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/ --request-payer requester\n\n2021-11-05 08:37:33     116979 LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt\n2021-11-05 08:37:33   77713726 LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF\n2021-11-05 08:37:34   76108899 LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF\n2021-11-05 08:37:36   75282069 LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF\n2021-11-05 08:37:37   77374352 LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF\n2021-11-05 08:37:38   77527685 LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF\n2021-11-05 08:37:39   76485245 LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF\n2021-11-05 08:37:40   78304185 LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF\n2021-11-05 08:37:42   75847018 LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF\n2021-11-05 08:37:44   73697164 LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF\n2021-11-05 08:37:45  304168225 LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF\n2021-11-05 08:37:48   60967770 LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF\n2021-11-05 08:37:49      15036 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json\n2021-11-05 08:37:49      12369 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt\n2021-11-05 08:37:49      18065 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml\n2021-11-05 08:37:49    3527153 LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF\n2021-11-05 08:37:49     222983 LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF\n2021-11-05 08:37:49    2052489 LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF\n2021-11-05 08:37:49    1783702 LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF\n2021-11-05 08:37:50    8239344 LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF\n2021-11-05 08:37:50    2930826 LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF\n2021-11-05 08:37:50      26399 LC08_L1TP_016042_20211027_20211104_02_T1_stac.json\n2021-11-05 08:37:50      46747 LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg\n2021-11-05 08:37:50       6015 LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg\n\n\nDownload content in bucket to local\n\n! aws s3 cp s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/ . --recursive --request-payer \n\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt to ./LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_stac.json to ./LC08_L1TP_016042_20211027_20211104_02_T1_stac.json\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg to ./LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg to ./LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF"
  },
  {
    "objectID": "examples/LPDAAC/LPDAAC_ECOSTRESS_LSTE__Kerchunk.html",
    "href": "examples/LPDAAC/LPDAAC_ECOSTRESS_LSTE__Kerchunk.html",
    "title": "LPDAAC example with Kerchunk Reference File",
    "section": "",
    "text": "!mamba install kerchunk -y --quiet\n\n\n!mamba install h5py=3.2 -y --quiet # Default version in this environment does not work. Must update\n\n\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport s3fs\nimport datetime as dt\nimport logging\nimport fsspec\nimport ujson\nimport requests\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport hvplot.xarray\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\n#import warnings\n#warnings.simplefilter(\"ignore\")\n\n\n\n\n\n\n\n\n\n\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['lpdaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()\n\nDirect Access a Single file\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://lp-prod-protected/ECO_L1B_GEO.002/ECOv002_L1B_GEO_21547_021_20220424T215449_0700_01/ECOv002_L1B_GEO_21547_021_20220424T215449_0700_01.h5'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\n\nimport h5py\n\n\nh5_file = h5py.File(s3_file_obj)\n\n\n#list(h5_file['Geolocation']['latitude'])\n\n\n%%time\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf', backend_kwargs={\"mask_and_scale\" : False, \"decode_times\" : False, \"decode_timedelta\" : False, \"use_cftime\" : False, \"decode_coords\" : False})\nxr_ds\n\nCPU times: user 134 ms, sys: 35 ms, total: 169 ms\nWall time: 534 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    *empty*xarray.DatasetDimensions:Coordinates: (0)Data variables: (0)Attributes: (0)\n\n\n\nSpecify a list of S3 URLs (MERRA2, 05/01/2019 - 05/31/2019)\n\nurls = ['s3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4']\n\nGenerate the reference kerchunk files. These files can take a little time to generate. Do not run if JSON files already exist in ./jsons/ directory.\n\nso = dict(\n    mode=\"rb\",\n    anon=False,\n    default_fill_cache=False,\n    default_cache_type=\"none\"\n)\n\n#references = []\nfor u in urls:\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outfile:\n            translate = h5chunks.translate()\n            outfile.write(ujson.dumps(translate).encode())\n            #references.append(translate)\n\nCreate a list with the paths to the reference files\n\nfs_ref_list = fsspec.filesystem('file')\n\n\nreference_list = sorted([x for x in fs_ref_list.ls('jsons') if '.json' in x])\nreference_list\n\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\", \n                       fo=reference, \n                       ref_storage_args=s_opts,\n                       remote_protocol='s3', \n                       remote_options=r_opts)\n\nRead in a single reference object. Get lots of SerializationWarnings. Ignored using the warning package, but the fill value, data range, min value, and max value DO NOT match the source file.\n\n%%time\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\n\n#ds_single\n\n\nCombine the single reference files created above into a single time series reference file THIS DID NOT WORK\n\n# mzz = MultiZarrToZarr(\n#     reference_list,\n#     remote_protocol=\"s3\",\n#     remote_options=r_opts,\n#     concat_dims=[\"time\"]\n# )\n\n# out = mzz.translate()\n\n\n# fs_mzz = fsspec.filesystem(\"reference\",\n#                            fo=out,\n#                            ref_storage_args=s_opts,\n#                            remote_protocol='s3',\n#                            remote_options=r_opts)\n\n\n# m = fs_mzz.get_mapper(\"\")\n# ds_multi = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\n\n\nCombine the single reference files created above into a single time series reference file THIS DID WORK\n\n%%time\nds_k =[]\n\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\n        \"reference\", \n        fo=ref, \n        ref_storage_args=s_opts,\n        remote_protocol='s3', \n        remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nAgains, the fill value, data range, min value, and max value DO NOT match the source file\n\n#ds_multi = xr.concat(ds_k, dim='time')\n\n\n#ds_multi\n\n\nds_multi['T500']\n\n\n# Commenting for quarto site render\n# ds_multi['T500'].hvplot.image(x='lon', y='lat')"
  },
  {
    "objectID": "examples/Transform-workflow.html#summary",
    "href": "examples/Transform-workflow.html#summary",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Summary",
    "text": "Summary\nThis notebook will walk through two different access and transformation options across a single dataset available in the Earthdata Cloud: Direct s3 access and Harmony transformation services. These steps are based off of several notebook tutorials presented during the 2021 Earthdata Cloud Hackathon and 2021 AGU Workshop.\nThe following use case focuses on Sea Surface Temperature (SST) from the GHRSST MODIS L2 dataset (MODIS_T-JPL-L2P-v2019.0) available from PO.DAAC in the Earthdata Cloud.\n\nHurricane Ida snapshot\nUsing NASA Worldview, we can first explore SST during a tropical storm event; in this case, we can overlay L2 and L4 SST variables against true color imagery to observe Hurricane Ida in August 2021. Although this is a small sample set, this use case could be expanded to explore how SST responds during the Atlantic hurricane over the next several months. The same data that we are requesting below using direct s3 access and via Harmony-py can also be requested using NASA Earthdata Search\n\n\n\nHurrican Ida snapshot - Worldview\n\n\nWe will access a single netCDF file from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\nAfter inspecting the data, we will then access the same file, but in this case we will also subset the data to our area of interest using Harmony."
  },
  {
    "objectID": "examples/Transform-workflow.html#import-required-packages",
    "href": "examples/Transform-workflow.html#import-required-packages",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Import Required Packages",
    "text": "Import Required Packages\n\n# Earthdata Login\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom platform import system\nfrom getpass import getpass\nimport os\n\n# Direct access\nimport requests\nimport s3fs\nimport xarray as xr\nimport hvplot.xarray\n\n# Harmony\nfrom harmony import BBox, Client, Collection, Request, LinkType\nfrom harmony.config import Environment\nfrom pprint import pprint\nimport datetime as dt"
  },
  {
    "objectID": "examples/Transform-workflow.html#authentication-for-nasa-earthdata",
    "href": "examples/Transform-workflow.html#authentication-for-nasa-earthdata",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "1. Authentication for NASA Earthdata",
    "text": "1. Authentication for NASA Earthdata\nBased off of https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/tutorials/02_NASA_Earthdata_Authentication.html\nFirst, we will create a hidden .netrc file (_netrc for Window OS) with Earthdata login credentials in your home directory. This file is needed to access NASA Earthdata assets from a scripting environment like Python.\n\nEarthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\nAuthentication via netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. An example of the required content is below.\nmachine urs.earthdata.nasa.gov\nlogin <USERNAME>\npassword <PASSWORD>\n<USERNAME> and <PASSWORD> would be replaced by your actual Earthdata Login username and password respectively.\nThe code below will:\n\ncheck what operating system (OS) is being used to determine which netrc file to check for/create (.netrc or _netrc)\ncheck if you have an netrc file, and if so, varify if those credentials are for the Earthdata endpoint\ncreate a netrc file if a netrc file is not present.\n\n\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL endpoint for authentication\nprompts = ['Enter NASA Earthdata Login Username: ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine the OS (Windows machines usually use an '_netrc' file)\nnetrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(f\"~/{netrc_name}\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}{2} | echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n    # Set restrictive permissions\n    Popen('chmod 0600 {0}{1}'.format(homeDir + os.sep, netrc_name), shell=True)\n\n    # Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n\n\nSee if the file was created\nIf the file was created, we’ll see a .netrc file (_netrc for Window OS) in the list printed below. To view the contents from a Jupyter environment, click File on the top toolbar, select Open from Path…, type .netrc, and click Open. The .netrc file will open within the text editor.\n\n!!! Beware, your password will be visible if the .netrc file is opened in the text editor.\n\n\n!ls -al ~/"
  },
  {
    "objectID": "examples/Transform-workflow.html#accessing-a-netcdf4hdf5-file---s3-direct-access",
    "href": "examples/Transform-workflow.html#accessing-a-netcdf4hdf5-file---s3-direct-access",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "2. Accessing a NetCDF4/HDF5 File - S3 Direct Access",
    "text": "2. Accessing a NetCDF4/HDF5 File - S3 Direct Access\n_Based off of https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/how-tos/Earthdata_Cloud__Single_File_Direct_S3_Access_NetCDF4_Example.html and https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/tutorials/04_On-Prem_Cloud.html\n\nSummary\nWe will access a single netCDF file from the GHRSST MODIS L2 dataset (MODIS_T-JPL-L2P-v2019.0) inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\n\n\nRequirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\n\n\n3. netrc File\n\n\n\nLearning Objectives\n\nhow to retrieve temporary S3 credentials for in-region direct S3 bucket access\nhow to define a dataset of interest and find netCDF files in S3 bucket\nhow to perform in-region direct access of MODIS_T-JPL-L2P-v2019.0 data in S3\nhow to plot the data\n\n\n\nGet Temporary AWS Credentials\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\ntemp_creds_req = get_temp_creds('podaac')\n#temp_creds_req\n\n\n\nSet up an s3fs session for Direct Access\ns3fs sessions are used for authenticated access to s3 buckets and allow for typical file-system style operations. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'],\n                          client_kwargs={'region_name':'us-west-2'})\n\nIn this example we’re interested in the GHRSST MODIS L2 collection from NASA’s PO.DAAC in Earthdata Cloud. Below we specify the s3 URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\n\n\nDirect In-region Access\nOpen with the netCDF file using the s3fs package, then load the cloud asset into a concatenated xarray dataset.\n\ns3_file_obj = fs_s3.open(s3_url, mode='rb')\n\n\nssh_ds = xr.open_dataset(s3_file_obj)\nssh_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                      (nj: 2030, ni: 1354, time: 1)\nCoordinates:\n    lat                          (nj, ni) float32 ...\n    lon                          (nj, ni) float32 ...\n  * time                         (time) datetime64[ns] 2021-08-20T03:35:00\nDimensions without coordinates: nj, ni\nData variables:\n    sea_surface_temperature      (time, nj, ni) float32 ...\n    sst_dtime                    (time, nj, ni) timedelta64[ns] ...\n    quality_level                (time, nj, ni) float32 ...\n    sses_bias                    (time, nj, ni) float32 ...\n    sses_standard_deviation      (time, nj, ni) float32 ...\n    l2p_flags                    (time, nj, ni) int16 ...\n    sea_surface_temperature_4um  (time, nj, ni) float32 ...\n    quality_level_4um            (time, nj, ni) float32 ...\n    sses_bias_4um                (time, nj, ni) float32 ...\n    sses_standard_deviation_4um  (time, nj, ni) float32 ...\n    wind_speed                   (time, nj, ni) float32 ...\n    dt_analysis                  (time, nj, ni) float32 ...\nAttributes: (12/49)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      MODIS Terra L2P SST\n    summary:                    Sea surface temperature retrievals produced a...\n    references:                 GHRSST Data Processing Specification v2r5\n    institution:                NASA/JPL/OBPG/RSMAS\n    history:                    MODIS L2P created at JPL PO.DAAC\n    ...                         ...\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L2P\n    cdm_data_type:              swath\n    startDirection:             Ascending\n    endDirection:               Ascending\n    day_night_flag:             Nightxarray.DatasetDimensions:nj: 2030ni: 1354time: 1Coordinates: (3)lat(nj, ni)float32...long_name :latitudestandard_name :latitudeunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]lon(nj, ni)float32...long_name :longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]time(time)datetime64[ns]2021-08-20T03:35:00long_name :reference time of sst filestandard_name :timecomment :time of first sensor observationcoverage_content_type :coordinatearray(['2021-08-20T03:35:00.000000000'], dtype='datetime64[ns]')Data variables: (12)sea_surface_temperature(time, nj, ni)float32...long_name :sea surface temperaturestandard_name :sea_surface_skin_temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from thermal IR (11 um) channelssource :NASA and University of Miamicoverage_content_type :physicalMeasurement[2748620 values with dtype=float32]sst_dtime(time, nj, ni)timedelta64[ns]...long_name :time difference from reference timevalid_min :-32767valid_max :32767comment :time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981coverage_content_type :referenceInformation[2748620 values with dtype=timedelta64[ns]]quality_level(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[2748620 values with dtype=float32]sses_bias(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]sses_standard_deviation(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]l2p_flags(time, nj, ni)int16...long_name :L2P flagsvalid_min :0valid_max :16comment :These flags can be used to further filter data variablesflag_meanings :microwave land ice lake riverflag_masks :[ 1  2  4  8 16]coverage_content_type :qualityInformation[2748620 values with dtype=int16]sea_surface_temperature_4um(time, nj, ni)float32...long_name :sea surface temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from mid-IR (4 um) channels; non L2P core fieldcoverage_content_type :physicalMeasurement[2748620 values with dtype=float32]quality_level_4um(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :mid-IR SST proximity confidence value; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[2748620 values with dtype=float32]sses_bias_4um(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST bias error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]sses_standard_deviation_4um(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST standard deviation error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]wind_speed(time, nj, ni)float32...long_name :10m wind speedstandard_name :wind_speedunits :m s-1valid_min :-127valid_max :127comment :Wind at 10 meters above the sea surfacesource :TBD.  Placeholder.  Currently emptygrid_mapping :TBDtime_offset :2.0height :10 mcoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]dt_analysis(time, nj, ni)float32...long_name :deviation from SST reference climatologyunits :kelvinvalid_min :-127valid_max :127comment :TBDsource :TBD. Placeholder.  Currently emptycoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]Attributes: (49)Conventions :CF-1.7, ACDD-1.3title :MODIS Terra L2P SSTsummary :Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAACreferences :GHRSST Data Processing Specification v2r5institution :NASA/JPL/OBPG/RSMAShistory :MODIS L2P created at JPL PO.DAACcomment :L2P Core without DT analysis or other ancillary fields; Night, Start Node:Ascending, End Node:Ascending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Quicklooklicense :GHRSST and PO.DAAC protocol allow data use as free and open.id :MODIS_T-JPL-L2P-v2019.0naming_authority :org.ghrsstproduct_version :2019.0uuid :f6e1f61d-c4a4-4c17-8354-0c15e12d688bgds_version_id :2.0netcdf_version_id :4.1date_created :20210820T153042Zfile_quality_level :3spatial_resolution :1kmstart_time :20210820T033500Ztime_coverage_start :20210820T033500Zstop_time :20210820T033959Ztime_coverage_end :20210820T033959Znorthernmost_latitude :34.0296southernmost_latitude :12.9895easternmost_longitude :-68.4372westernmost_longitude :-95.5518source :MODIS sea surface temperature observations for the OBPGplatform :Terrasensor :MODISmetadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_T-JPL-L2P-v2019.0keywords :Oceans > Ocean Temperature > Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventiongeospatial_lat_units :degrees_northgeospatial_lat_resolution :0.01geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.01acknowledgment :The MODIS L2P sea surface temperature data are sponsored by NASAcreator_name :Ed Armstrong, JPL PO.DAACcreator_email :edward.m.armstrong@jpl.nasa.govcreator_url :http://podaac.jpl.nasa.govproject :Group for High Resolution Sea Surface Temperaturepublisher_name :The GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L2Pcdm_data_type :swathstartDirection :AscendingendDirection :Ascendingday_night_flag :Night\n\n\nLet’s make a quick plot to take a look at the sea_surface_temperature variable.\n\nssh_ds.sea_surface_temperature.plot() ;"
  },
  {
    "objectID": "examples/Transform-workflow.html#accessing-multiple-netcdf4hdf5-files---data-subsetting-and-transformation-services-in-the-cloud",
    "href": "examples/Transform-workflow.html#accessing-multiple-netcdf4hdf5-files---data-subsetting-and-transformation-services-in-the-cloud",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "3. Accessing Multiple NetCDF4/HDF5 Files - Data Subsetting and Transformation Services in the Cloud",
    "text": "3. Accessing Multiple NetCDF4/HDF5 Files - Data Subsetting and Transformation Services in the Cloud\n\nUsing the Harmony-Py library to access customized data from NASA Earthdata\n\nWhat other access options or services exist for this dataset?\nMaybe we’re interested in creating a time series over a larger area or with a larger dataset. Let’s see whether there are other services out there that could either make this operation more performant in the cloud (with a cloud-optimized output) or subsetting services to reduce the data volume.\nBased off of https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/07_Harmony_Subsetting.html\n\n\n\nSummary\nWe have already explored direct access to the NASA EOSDIS archive in the cloud via the Amazon Simple Storage Service (S3) by using the Common Metadata Repository (CMR) to search for granule locations. In addition to directly accessing the files archived and distributed by each of the NASA DAACs, many datasets also support services that allow us to customize the data via subsetting, reformatting, reprojection, and other transformations.\nThis tutorial demonstrates how to find, request, and use customized data from a new ecosystem of services operating within the NASA Earthdata Cloud: NASA Harmony.\n\n\nBenefits\nBut first, why use this option when we’ve already learned how to access data directly from the NASA Earthdata Cloud?\n\nConsistent access patterns to EOSDIS holdings make cross-data center data access easier\nData reduction services allow us to request only the data we want, in the format and projection we want\nAnalysis Ready Data and cloud access will help reduce time-to-science\nCommunity Development helps reduce the barriers for re-use of code and sharing of domain knowledge\n\nSee more on the Earthdata Harmony landing page, including documentation on the Harmony API itself.\n\n\nObjectives\n\nConceptualize the data transformation service types and offerings provided by NASA Earthdata, including Harmony.\nPractice skills learned from the introductory CMR tutorial to discover what access and service options exist for a given data set, as well as variable metadata.\nUtilize the Harmony-py library to request subsetted MODIS L2 Sea Surface Temperature data over the Gulf of Mexico.\nRead Harmony subsetted outputs directly into xarray."
  },
  {
    "objectID": "examples/Transform-workflow.html#discover-service-options-for-a-given-data-set",
    "href": "examples/Transform-workflow.html#discover-service-options-for-a-given-data-set",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Discover service options for a given data set",
    "text": "Discover service options for a given data set\n\nFirst, what do we mean by a “service”?\nIn the context of NASA Earthdata, we are usually referring to a service as any data transformation or customization process that packages or delivers data in a way that makes it easier to work with compared to how the data are natively archived at NASA EOSDIS. Basic customization options may include: * Subsetting (cropping) the data by: * Variable * Spatial boundary, * Temporal range * Reformatting * For example: From NetCDF-4 to Cloud Optimized GeoTIFF * Reprojection and/or Resampling * For example: From Sinusoidal to Polar Stereographic * Mosaicking * Aggregating\nA few main types or pathways for services that are commonly supported across the NASA DAACs include: * NASA Global Imagery Browse Service * Web services providing imagery, much of which is updated daily, to broaden accessibility of NASA EOSDIS data to the media and public. * OPeNDAP * The Open-source Project for a Network Data Access Protocol is a NASA community standard DAP that provides a simple way to access and work with data over the internet. OPeNDAP’s client/server software allows us to subset and reformat data using an internet browser, command line interface, and other applications. * Harmony * In the most basic sense, Harmony is an Application Programming Interface, or API, allowing us to request customization options described above, which are then processed and returned as file outputs. Harmony helps to reduce pre-processing steps so we can spend less time preparing the data, and more time doing science.\nNote: These service offerings are unique to each NASA EOSDIS dataset.\nWhy is this?\nDue to varying levels of service, cloud migration status, and unique characteristics of the datasets themselves, not all service options are provided for all datasets. Therefore it is important to first explore a given dataset’s metadata to discover what service options are provided.\n\n\nNote that the full Harmony tutorial from the 2021 Earthdata Cloud Hackathon demonstrates service and variable discovery, but this was removed here for simplification."
  },
  {
    "objectID": "examples/Transform-workflow.html#using-harmony-py-to-subset-data",
    "href": "examples/Transform-workflow.html#using-harmony-py-to-subset-data",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Using Harmony-Py to subset data",
    "text": "Using Harmony-Py to subset data\nHarmony-Py provides a pip installable Python alternative to directly using Harmony’s RESTful API to make it easier to request data and service options, especially when interacting within a Python Jupyter Notebook environment.\nThe next steps are adopted from the introduction tutorial notebook provided in the Harmony-Py library:\n\nCreate Harmony Client object\nFirst, we need to create a Harmony Client, which is what we will interact with to submit and inspect a data request to Harmony, as well as to retrieve results.\nWhen creating the Client, we need to provide Earthdata Login credentials, which are required to access data from NASA EOSDIS. This basic line below assumes that we have a .netrc available.\n\nharmony_client = Client()\n\n\n\nCreate Harmony Request\nThe following are common request parameters:\n\ncollection: Required parameter. This is the NASA EOSDIS collection, or data product. There are two options for inputting a collection of interest:\n\nProvide a concept ID (e.g. C1940473819-POCLOUD)\nData product short name (e.g. MODIS_A-JPL-L2P-v2019.0).\n\nspatial: Bounding box spatial constraints on the data. The Harmony Bbox class accepts spatial coordinates as decimal degrees in w, s, e, n order, where longitude = -180, 180 and latitude = -90, 90.\ntemporal: Date/time constraints on the data. The example below demonstrates temporal start and end ranges using the python datetime library.\n\nAs we identified above, only subsetting options are available for this dataset. If other service options such as reformatting are available for a given dataset, these can also be specified using Harmony-py: See the documentation for details on how to construct these parameters.\n\nrequest = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667,21.20806,-83.05197,30.16605),\n    temporal={\n        'start': dt.datetime(2021, 8, 20),\n        'stop': dt.datetime(2021, 8, 21),\n    },\n)\n\n\n\nSubmit request\nNow that the request is created, we can now submit it to Harmony using the Harmony Client object. A job id is returned, which is a unique identifier that represents the submitted request.\n\njob_id = harmony_client.submit(request)\njob_id\n\n'42f70e4f-5e6a-4473-8a5a-4ce56155ce92'\n\n\n\n\nCheck request status\nDepending on the size of the request, it may be helpful to wait until the request has completed processing before the remainder of the code is executed. The wait_for_processing() method will block subsequent lines of code while optionally showing a progress bar.\n\nharmony_client.wait_for_processing(job_id, show_progress=True)\n\n [ Processing: 100% ] |###################################################| [|]\n\n\n\n\nView Harmony job response and output URLs\nOnce the data request has finished processing, we can view details on the job that was submitted to Harmony, including the API call to Harmony, and informational messages on the request if available.\nresult_json() calls wait_for_processing() and returns the complete job in JSON format once processing is complete.\n\ndata = harmony_client.result_json(job_id)\npprint(data)\n\n{'createdAt': '2022-03-10T01:08:45.232Z',\n 'jobID': '42f70e4f-5e6a-4473-8a5a-4ce56155ce92',\n 'links': [{'href': 'https://harmony.earthdata.nasa.gov/stac/42f70e4f-5e6a-4473-8a5a-4ce56155ce92/',\n            'rel': 'stac-catalog-json',\n            'title': 'STAC catalog',\n            'type': 'application/json'},\n           {'bbox': [-97.8, 21.2, -90.8, 22.5],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T17:29:59.000Z',\n                         'start': '2021-08-20T17:25:01.000Z'},\n            'title': '20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-97.8, 21.2, -86.8, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T17:24:59.000Z',\n                         'start': '2021-08-20T17:20:01.000Z'},\n            'title': '20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-88.2, 21.2, -83.1, 28.3],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T15:49:59.000Z',\n                         'start': '2021-08-20T15:45:01.000Z'},\n            'title': '20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-87.1, 28, -83.1, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T15:44:59.000Z',\n                         'start': '2021-08-20T15:40:01.000Z'},\n            'title': '20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-97.8, 21.2, -94, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T05:19:59.000Z',\n                         'start': '2021-08-20T05:15:01.000Z'},\n            'title': '20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-95.4, 21.2, -83.1, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T03:39:59.000Z',\n                         'start': '2021-08-20T03:35:00.000Z'},\n            'title': '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'href': 'https://harmony.earthdata.nasa.gov/jobs/42f70e4f-5e6a-4473-8a5a-4ce56155ce92?linktype=https&page=1&limit=2000',\n            'rel': 'self',\n            'title': 'The current page',\n            'type': 'application/json'}],\n 'message': 'The job has completed successfully',\n 'numInputGranules': 6,\n 'progress': 100,\n 'request': 'https://harmony.earthdata.nasa.gov/MODIS_T-JPL-L2P-v2019.0/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?forceAsync=true&subset=lat(21.20806%3A30.16605)&subset=lon(-97.77667%3A-83.05197)&subset=time(%222021-08-20T00%3A00%3A00%22%3A%222021-08-21T00%3A00%3A00%22)',\n 'status': 'successful',\n 'updatedAt': '2022-03-10T01:09:26.492Z',\n 'username': 'amy.steiker'}\n\n\n\n\nDirect cloud access\nNote that the remainder of this tutorial will only succeed when running this notebook within the AWS us-west-2 region.\nHarmony data outputs can be accessed within the cloud using the s3 URLs and AWS credentials provided in the Harmony job response.\n\nRetrieve list of output URLs.\nThe result_urls() method calls wait_for_processing() and returns a list of the processed data URLs once processing is complete. You may optionally show the progress bar as shown below.\n\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\npprint(urls)\n\n['s3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4']\n\n\nWe’ll select a URL in the list to bring into xarray below, which matches the granule we opened directly from PO.DAAC’s archive bucket above. In Earthdata Search, we can see that this granule covers our area well.\n\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\nurl\n\n's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n\n\n\nAWS credential retrieval\nUsing aws_credentials you can retrieve the credentials needed to access the Harmony s3 staging bucket and its contents.\n\ncreds = harmony_client.aws_credentials()\n\n\n\n\nOpen staged files with s3fs and xarray\nWe use the AWS s3fs package to create a file system that can then be read by xarray:\n\ns3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nNow that we have our s3 file system set, including our declared credentials, we’ll use that to open the url, and read in the file through xarray. This extra step is needed because xarray cannot open the S3 location directly. Instead, the S3 file object is passed to xarray, in order to then open the dataset.\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                      (nj: 1228, ni: 660, time: 1)\nCoordinates:\n    lat                          (nj, ni, time) float32 ...\n    lon                          (nj, ni, time) float32 ...\n  * time                         (time) datetime64[ns] 2021-08-20T03:35:00\nDimensions without coordinates: nj, ni\nData variables:\n    sea_surface_temperature      (time, nj, ni) float32 ...\n    sst_dtime                    (time, nj, ni) timedelta64[ns] ...\n    quality_level                (time, nj, ni) float32 ...\n    sses_bias                    (time, nj, ni) float32 ...\n    sses_standard_deviation      (time, nj, ni) float32 ...\n    l2p_flags                    (time, nj, ni) int16 ...\n    sea_surface_temperature_4um  (time, nj, ni) float32 ...\n    quality_level_4um            (time, nj, ni) float32 ...\n    sses_bias_4um                (time, nj, ni) float32 ...\n    sses_standard_deviation_4um  (time, nj, ni) float32 ...\n    wind_speed                   (time, nj, ni) float32 ...\n    dt_analysis                  (time, nj, ni) float32 ...\nAttributes: (12/50)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      MODIS Terra L2P SST\n    summary:                    Sea surface temperature retrievals produced a...\n    references:                 GHRSST Data Processing Specification v2r5\n    institution:                NASA/JPL/OBPG/RSMAS\n    history:                    MODIS L2P created at JPL PO.DAAC\\n2022-03-10 ...\n    ...                         ...\n    processing_level:           L2P\n    cdm_data_type:              swath\n    startDirection:             Ascending\n    endDirection:               Ascending\n    day_night_flag:             Night\n    history_json:               [{\"date_time\": \"2022-03-10T01:09:25.100329+00...xarray.DatasetDimensions:nj: 1228ni: 660time: 1Coordinates: (3)lat(nj, ni, time)float32...long_name :latitudestandard_name :latitudeunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[810480 values with dtype=float32]lon(nj, ni, time)float32...long_name :longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[810480 values with dtype=float32]time(time)datetime64[ns]2021-08-20T03:35:00long_name :reference time of sst filestandard_name :timecomment :time of first sensor observationcoverage_content_type :coordinatearray(['2021-08-20T03:35:00.000000000'], dtype='datetime64[ns]')Data variables: (12)sea_surface_temperature(time, nj, ni)float32...long_name :sea surface temperaturestandard_name :sea_surface_skin_temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from thermal IR (11 um) channelssource :NASA and University of Miamicoverage_content_type :physicalMeasurement[810480 values with dtype=float32]sst_dtime(time, nj, ni)timedelta64[ns]...long_name :time difference from reference timevalid_min :-32767valid_max :32767comment :time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981coverage_content_type :referenceInformation[810480 values with dtype=timedelta64[ns]]quality_level(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[810480 values with dtype=float32]sses_bias(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]sses_standard_deviation(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]l2p_flags(time, nj, ni)int16...long_name :L2P flagsvalid_min :0valid_max :16comment :These flags can be used to further filter data variablesflag_meanings :microwave land ice lake riverflag_masks :[ 1  2  4  8 16]coverage_content_type :qualityInformation[810480 values with dtype=int16]sea_surface_temperature_4um(time, nj, ni)float32...long_name :sea surface temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from mid-IR (4 um) channels; non L2P core fieldcoverage_content_type :physicalMeasurement[810480 values with dtype=float32]quality_level_4um(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :mid-IR SST proximity confidence value; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[810480 values with dtype=float32]sses_bias_4um(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST bias error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]sses_standard_deviation_4um(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST standard deviation error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]wind_speed(time, nj, ni)float32...long_name :10m wind speedstandard_name :wind_speedunits :m s-1valid_min :-127valid_max :127comment :Wind at 10 meters above the sea surfacesource :TBD.  Placeholder.  Currently emptygrid_mapping :TBDtime_offset :2.0height :10 mcoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]dt_analysis(time, nj, ni)float32...long_name :deviation from SST reference climatologyunits :kelvinvalid_min :-127valid_max :127comment :TBDsource :TBD. Placeholder.  Currently emptycoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]Attributes: (50)Conventions :CF-1.7, ACDD-1.3title :MODIS Terra L2P SSTsummary :Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAACreferences :GHRSST Data Processing Specification v2r5institution :NASA/JPL/OBPG/RSMAShistory :MODIS L2P created at JPL PO.DAAC\n2022-03-10 01:09:25.100285 l2ss-py v1.3.1 (bbox=[[-97.77667, -83.05197], [21.20806, 30.16605]] cut=True)comment :L2P Core without DT analysis or other ancillary fields; Night, Start Node:Ascending, End Node:Ascending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Quicklooklicense :GHRSST and PO.DAAC protocol allow data use as free and open.id :MODIS_T-JPL-L2P-v2019.0naming_authority :org.ghrsstproduct_version :2019.0uuid :f6e1f61d-c4a4-4c17-8354-0c15e12d688bgds_version_id :2.0netcdf_version_id :4.1date_created :20210820T153042Zfile_quality_level :3spatial_resolution :1kmstart_time :20210820T033500Ztime_coverage_start :20210820T033500Zstop_time :20210820T033959Ztime_coverage_end :20210820T033959Znorthernmost_latitude :34.0296southernmost_latitude :12.9895easternmost_longitude :-68.4372westernmost_longitude :-95.5518source :MODIS sea surface temperature observations for the OBPGplatform :Terrasensor :MODISmetadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_T-JPL-L2P-v2019.0keywords :Oceans > Ocean Temperature > Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventiongeospatial_lat_units :degrees_northgeospatial_lat_resolution :0.01geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.01acknowledgment :The MODIS L2P sea surface temperature data are sponsored by NASAcreator_name :Ed Armstrong, JPL PO.DAACcreator_email :edward.m.armstrong@jpl.nasa.govcreator_url :http://podaac.jpl.nasa.govproject :Group for High Resolution Sea Surface Temperaturepublisher_name :The GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L2Pcdm_data_type :swathstartDirection :AscendingendDirection :Ascendingday_night_flag :Nighthistory_json :[{\"date_time\": \"2022-03-10T01:09:25.100329+00:00\", \"derived_from\": \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc\", \"program\": \"l2ss-py\", \"version\": \"1.3.1\", \"parameters\": \"bbox=[[-97.77667, -83.05197], [21.20806, 30.16605]] cut=True\", \"program_ref\": \"https://cmr.earthdata.nasa.gov:443/search/concepts/S1962070864-POCLOUD\", \"$schema\": \"https://harmony.earthdata.nasa.gov/schemas/history/0.1.0/history-v0.1.0.json\"}]\n\n\n\n\nPlot the data\nUse the xarray built in plotting function to create a simple plot along the x and y dimensions of the dataset:\n\nds.sea_surface_temperature.plot() ;\n\n\n\n\n\n\nSummary\nThis notebook demonstrated an abbreviated and simplified workflow to explore access and subsetting options available through the Earthdata Cloud. There are several other options that can be used to work “in place” in the Earthdata Cloud, from data discovery to analysis-ready data, including:\n\nZarr-EOSDIS-Store\n\nThe zarr-eosdis-store library allows NASA EOSDIS Collections to be accessed efficiently by the Zarr Python library, provided they have a sidecar DMR++ metadata file generated.\nTutorial highlighting this library’s usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/09_Zarr_Access.html\n\nOPeNDAP\n\nHyrax provides direct access to subsetting of NASA data using Python or your favorite analysis tool\nTutorial highlighting OPeNDAP usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/06_S6_OPeNDAP_Access_Gridding.html\n\nEarthdata Library\n\nA Python library to search and access NASA Earthdata datasets, aiming to provide a simple way to access or download data without having to worry if a given dataset is on-prem or in the cloud."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-used",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-used",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Data used:",
    "text": "Data used:\n\nICESat-2 ATL03: This data set contains height above the WGS 84 ellipsoid (ITRF2014 reference frame), latitude, longitude, and time for all photons."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#requirements",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#requirements",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Requirements",
    "text": "Requirements\n\nNASA Eartdata Login (EDL) credentials\npython libraries:\n\naws-cli\nxarray\nfs-s3fs\nzarr\ncmr\n\npython-cmr (optional fallback) NSIDC fork"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#querying-cmr-for-nsidc-data",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#querying-cmr-for-nsidc-data",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Querying CMR for NSIDC data",
    "text": "Querying CMR for NSIDC data\nMost collections at NSIDC have not being migrated to the cloud and can be found using CMR with no authentication at all. Here is a simple example for altimeter data (ATL03) coming from the ICESat-2 mission. First we’ll search the regular collection and then we’ll do the same using the cloud collection.\nNote: This notebook uses a low level CMR endpoint, this won’t be not the only workflow for data discovery.\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nimport textwrap\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# First let's search for some collections hosted at NSIDC using a keyword\ncollections = cmr_collection.search({'keyword':'ice',\n                                     'provider': NSIDC_PROVIDERS['NSIDC_HOSTED']})\n\n# Let's print some information about the first 3 collection that match our provider\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C1997321091-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C1705401930-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V003\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C2003771331-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L3A Land Ice Height V004\nAbstract: This data set (ATL06) provides geolocated, land-ice surface heights\n(above the WGS 84 ellipsoid, ITRF2014 reference frame), plus ancillary\nparameters that can be used to interpret and assess the quality of the height\nestimates. The data were acquired by the Advanced Topographic Laser Altimeter\nSystem (ATLAS) instrument on board the Ice, Cloud and land Elevation Satellite-2\n(ICESat-2) observatory.\n\n\n\n\n# Now let's do the same with short names, a more specific way of finding data.\n\n#First let's search for some collections hosted at NSIDC\ncollections = cmr_collection.search({'short_name':'ATL03',\n                                     'provider': NSIDC_PROVIDERS['NSIDC_HOSTED']})\n\n# Note how we get back the same collection twice, that's because we have 2 versions available.\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C1997321091-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C1705401930-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V003\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\n\n\n\n# now that we have the concept-ids we can look for data granules in that collection and pass spatiotemporal parameters.\nfrom cmr_serializer import QueryResult\n\n# a bbox over Juneau Icefield \n# bbox = min Longitude , min Latitude , max Longitude , max Latitude \nquery = {'concept-id': 'C1997321091-NSIDC_ECS',\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\n# This is a wrapper with convenient methods to work with CMR query results.\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\nfor g in granules[0:3]:\n    display(g)\n\nTotal granules found: 201 \n\n\n\n\n        \n          Id: ATL03_20181014001049_02350102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.0482205607256, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-14T00:10:49.722Z', 'EndingDateTime': '2018-10-14T00:19:19.918Z'}}\n          Size(MB): 1764.5729866028 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.14/ATL03_20181014001049_02350102_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181015124359_02580106_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': 49.70324528818096, 'StartLatitude': 59.5, 'StartDirection': 'D', 'EndLatitude': 27.0, 'EndDirection': 'D'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-15T12:43:57.696Z', 'EndingDateTime': '2018-10-15T12:52:28.274Z'}}\n          Size(MB): 276.2403841019 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.15/ATL03_20181015124359_02580106_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181018000228_02960102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.82682215638665, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-18T00:02:28.717Z', 'EndingDateTime': '2018-10-18T00:10:58.903Z'}}\n          Size(MB): 877.0574979782 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.18/ATL03_20181018000228_02960102_004_01.h5\n          \n        \n        \n\n\n\n# We  can access the data links with the data_links()\nfor g in granules[0:10]:\n    print(g.data_links())"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#cloud-collections",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#cloud-collections",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Cloud Collections",
    "text": "Cloud Collections\nSome NSIDC cloud collections are not yet public we need to authenticate ourselves with CMR first.\n\nimport getpass\nimport textwrap\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nfrom cmr_auth import CMRAuth\n\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# Use your own EDL username\nUSER= 'betolink'\n\nprint('Enter your NASA Earthdata login password:')\npassword = getpass.getpass()\nCMR_auth = CMRAuth(USER, password)\n# Token to search private collections on CMR\ncmr_token = CMR_auth.get_token()\n\nEnter your NASA Earthdata login password:\n\n\n ········\n\n\n\n# Now let's start our aunthenticated queries on CMR\nquery = {'short_name':'ATL03',\n         'token': cmr_token,\n         'provider': NSIDC_PROVIDERS['AWS_HOSTED']}\n\ncollections = cmr_collection.search(query)\n\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C2027878642-NSIDC_CPRD\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\n\n\n\n# now that we have the concept-id for our ATL03 in the cloud we do the same thing we did with ATL03 hosted at\nfrom cmr_serializer import QueryResult\n# NSIDC but using the cloud concept-id\n# Jeneau ice sheet\nquery = {'concept-id': 'C2027878642-NSIDC_CPRD',\n         'token': cmr_token,\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\n\n# Print the first 3 granules\nfor g in granules[0:3]:\n    display(g)\n    # You can use: print(g) for the regular text representation.\n\nTotal granules found: 135 \n\n\n\n\n        \n          Id: ATL03_20181014001049_02350102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.0482205607256, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-14T00:10:49.722Z', 'EndingDateTime': '2018-10-14T00:19:19.918Z'}}\n          Size(MB): 1764.5729866027832 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181015124359_02580106_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': 49.70324528818096, 'StartLatitude': 59.5, 'StartDirection': 'D', 'EndLatitude': 27.0, 'EndDirection': 'D'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-15T12:43:57.696Z', 'EndingDateTime': '2018-10-15T12:52:28.274Z'}}\n          Size(MB): 276.2403841018677 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181018000228_02960102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.82682215638665, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-18T00:02:28.717Z', 'EndingDateTime': '2018-10-18T00:10:58.903Z'}}\n          Size(MB): 877.0574979782104 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5\n          \n        \n        \n\n\n\nNOTE: Not all the data granules for NSIDC datasets have been migrated to S3. This might result in different counts between the NSIDC hosted data collections and the ones in AWS S3\n\n# We can list the s3 links but \nfor g in granules[0:10]:\n    print(g.data_links(only_s3=True))\n\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/05/ATL03_20181105113651_05780106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/07/ATL03_20181107225525_06160102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/09/ATL03_20181109112837_06390106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/11/ATL03_20181111224708_06770102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/15/ATL03_20181115223845_07380102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/12/04/ATL03_20181204101243_10200106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/12/06/ATL03_20181206213114_10580102_004_01.h5']\n\n\nWe note that our RelatedLinks array now contain links to AWS S3, these are the direct URIs for our data granules in the AWS us-west-2 region."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-access-using-aws-s3",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-access-using-aws-s3",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Data Access using AWS S3",
    "text": "Data Access using AWS S3\n\nIMPORTANT: This section will only work if this notebook is running on the AWS us-west-2 zone\n\nThere is more than one way of accessing data on AWS S3, either downloading it to your local machine using the official client library or using a python library.\nPerformance tip: using the HTTPS URLs will decrease the access performance since these links have to internally be processed by AWS’s content delivery system (CloudFront). To get a better performance we should access the S3:// URLs with BOTO3 or a high level S3 enabled library (i.e. S3FS)\nRelated links: * HDF in the Cloud challenges and solutions for scientific data * Cloud Storage (Amazon S3) HDF5 Connector\n\n# READ only temporary credentials\nimport s3fs\nimport h5py\n\n# This credentials only last 1 hour.\ns3_cred = CMR_auth.get_s3_credentials()\n\n\ns3_fs = s3fs.S3FileSystem(key=s3_cred['accessKeyId'],\n                          secret=s3_cred['secretAccessKey'],\n                          token=s3_cred['sessionToken'])\n\n# Now you could grab S3 links to your cloud instance (EC2, Hub etc) using:\n# s3_fs.get('s3://SOME_LOCATION/ATL03_20181015124359_02580106_004_01.h5', 'test.h5')\n\n\nWe now have the propper credentials and file mapper to access the data within AWS us-west-2.\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    with h5py.File(s3f, 'r') as f:\n        print([key for key in f.keys()])\n\n\n\nUsing xarray to open files on S3\nATL data is complex so xarray doesn’t know how to extract the important bits out of it.\n\nimport xarray\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    ds= xarray.open_dataset(s3f)\n    for varname in ds:\n        print(varname)\nds\n\n\n\n“Downloading” files on S3 using the official aws-cli library\nThe quotes on downloading are because ideally you’ll be working on an EC2 (virtual machine for short) instance on the us-west-2 region."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#the-big-picture",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#the-big-picture",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "The big picture:",
    "text": "The big picture:\nThere is nothing wrong with downloading data to our local machine but that can get complicated or even impossible if a dataset is too large. For this reason NSIDC along with other NASA data centers started to collocate or migrate their dataset holdings to the cloud.\n\nSteps\n\nAuthenticate with the NASA Earthdata Login API (EDL).\nSearch granules/collections using a CMR client that supports authentication\nParse CMR responses and get AWS S3 URLs\nAccess the data granules using temporary AWS credentials given by the NSIDC cloud credentials endpoint\n\n\n\nData used:\n\nICESat-2 ATL03: This data set contains height above the WGS 84 ellipsoid (ITRF2014 reference frame), latitude, longitude, and time for all photons.\n\n\n\nRequirements\n\nNASA Eartdata Login (EDL) credentials\npython libraries:\n\nh5py\nmatplotlib\nxarray\ns3fs\npython-cmr\n\ncmr helpers: included in this notebook"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#querying-cmr-for-nsidc-data-in-the-cloud",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#querying-cmr-for-nsidc-data-in-the-cloud",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Querying CMR for NSIDC data in the cloud",
    "text": "Querying CMR for NSIDC data in the cloud\nMost collections at NSIDC have not being migrated to the cloud and can be found using CMR with no authentication at all. Here is a simple example for altimeter data (ATL03) coming from the ICESat-2 mission. First we’ll search the regular collection and then we’ll do the same using the cloud collection.\nNote: This notebook uses CMR to search and locate the data granules, this is not the only workflow for data access and discovery.\n\nHarmonyPy: Uses Harmony the NASA API to search, subset and transform the data in the cloud.\ncmr-stac: A “static” metadata catalog than can be read by Intake oand other client libraries to optimize the access of files in the cloud."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#cloud-collections",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#cloud-collections",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Cloud Collections",
    "text": "Cloud Collections\nSome NSIDC cloud collections are not yet, which means that temporarily you’ll have to request access emailing nsidc@nsidc.org so your Eartdata login is in the authorized list for early users.\n\nimport getpass\nimport textwrap\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nfrom cmr_auth import CMRAuth\n\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# Use your own EDL username\nUSER = 'betolink'\n\nprint('Enter your NASA Earthdata login password:')\npassword = getpass.getpass()\n# This helper class will handle credentials with CMR\nCMR_auth = CMRAuth(USER, password)\n# Token to search preliminary collections on CMR\ncmr_token = CMR_auth.get_token()\n\n\n# The query object uses a simple python dictionary\nquery = {'short_name':'ATL03',\n         'token': cmr_token,\n         'provider': NSIDC_PROVIDERS['AWS_HOSTED']}\n\ncollections = cmr_collection.search(query)\n\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#searching-for-data-granules-in-the-cloud-with-cmr",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#searching-for-data-granules-in-the-cloud-with-cmr",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Searching for data granules in the cloud with CMR",
    "text": "Searching for data granules in the cloud with CMR\nCMR uses different collection id’s for datasets in the cloud.\n\n# now that we have the concept-id for our ATL03 in the cloud we do the same thing we did with ATL03 hosted at\nfrom cmr_serializer import QueryResult\n# NSIDC but using the cloud concept-id\n# Jeneau ice sheet\nquery = {'concept-id': 'C2027878642-NSIDC_CPRD',\n         'token': cmr_token,\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\n\n# Print the first 3 granules\nfor g in granules[0:3]:\n    display(g)\n    # You can use: print(g) for the regular text representation.\n\n\nNOTE: Not all the data granules for NSIDC datasets have been migrated to S3. This might result in different counts between the NSIDC hosted data collections and the ones in AWS S3\n\n\n# We can list the s3 links but \nfor g in granules:\n    for link in g.data_links():\n        print(link)\n\nWe note that our RelatedLinks array now contain links to AWS S3, these are the direct URIs for our data granules in the AWS us-west-2 region."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#data-access-using-aws-s3",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#data-access-using-aws-s3",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Data Access using AWS S3",
    "text": "Data Access using AWS S3\n\nIMPORTANT: This section will only work if this notebook is running on the AWS us-west-2 zone\n\nThere is more than one way of accessing data on AWS S3, either downloading it to your local machine using the official client library or using a python library.\nPerformance tip: using the HTTPS URLs will decrease the access performance since these links have to internally be processed by AWS’s content delivery system (CloudFront). To get a better performance we should access the S3:// URLs with BOTO3 or a high level S3 enabled library (i.e. S3FS)\nRelated links: * HDF in the Cloud challenges and solutions for scientific data * Cloud Storage (Amazon S3) HDF5 Connector\n\nimport s3fs\nimport h5py\n\nimport xarray as xr\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n\n# READ only temporary credentials\n# This credentials only last 1 hour.\ns3_cred = CMR_auth.get_s3_credentials()\n\ns3_fs = s3fs.S3FileSystem(key=s3_cred['accessKeyId'],\n                          secret=s3_cred['secretAccessKey'],\n                          token=s3_cred['sessionToken'])\n\n# Now you could grab S3 links to your cloud instance (EC2, Hub etc) using:\n# s3_fs.get('s3://SOME_LOCATION/ATL03_20181015124359_02580106_004_01.h5', 'test.h5')\n\nNow that we have the propper credentials in our file mapper, we can access the data within AWS us-west-2.\nIf we are not running this notebook in us-west-2 will get an access denied error"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#using-xarray-to-open-files-on-s3",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#using-xarray-to-open-files-on-s3",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Using xarray to open files on S3",
    "text": "Using xarray to open files on S3\nATL data is complex so xarray doesn’t know how to extract the important bits out of it.\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    with h5py.File(s3f, 'r') as f:\n        print([key for key in f.keys()])\n        gt1l = xr.Dataset({'height': (['x'], f['gt1l']['heights']['h_ph'][:]),\n                       'latitude': (['x'], f['gt1l']['heights']['lat_ph'][:]), \n                       'longitude': (['x'], f['gt1l']['heights']['lon_ph'][:]),\n                       'dist_ph': (['x'], f['gt1l']['heights']['dist_ph_along'][:])})\ngt1l"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#plotting-the-data",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#plotting-the-data",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Plotting the data",
    "text": "Plotting the data\n\ngt1l.height.plot()\n\n\n%matplotlib widget\n\nfig, ax = plt.subplots(figsize=(14, 4))\n\ngt1l.height.plot(ax=ax, ls='', marker='o', ms=1)\ngt1l.height.rolling(x=1000, min_periods=500, center=True).mean().plot(ax=ax, c='k', lw=2)\nax.set_xlabel('Along track distance (m)', fontsize=12);\nax.set_ylabel('Photon Height (m)', fontsize=12)\nax.set_title('ICESat-2 ATL03', fontsize=14)\nax.tick_params(axis='both', which='major', labelsize=12)\n\nsubax = fig.add_axes([0.69,0.50,0.3,0.3], projection=ccrs.NorthPolarStereo())\nsubax.set_aspect('equal')\nsubax.set_extent([-180., 180., 30, 90.], ccrs.PlateCarree())\nsubax.add_feature(cfeature.LAND)\nsubax.plot(gt1l.longitude, gt1l.latitude, transform=ccrs.PlateCarree(), lw=1);\n\nfig.savefig('test.png')\n\nplt.show()"
  },
  {
    "objectID": "external/cof-zarr-reformat.html#getting-started",
    "href": "external/cof-zarr-reformat.html#getting-started",
    "title": "EarthData Cloud Cookbook",
    "section": "Getting Started",
    "text": "Getting Started\nWe will access monthly ocean bottom pressure (OBP) data from ECCO V4r4 (10.5067/ECG5M-OBP44), which are provided as a monthly time series on a 0.5-degree latitude/longitude grid.\nThe data are archived in netCDF format. However, this notebook demonstration will request conversion to Zarr format for files covering the period between 2010 and 2018. Upon receiving our request, Harmony’s backend will convert the files and stage them in S3 for native access in AWS (us-west-2 region, specifically). We will access the new Zarr datasets as an aggregated dataset using xarray, and leverage the S3 native protocols for direct access to the data in an efficient manner.\n\n\nRequirements\n\nAWS\nThis notebook should be running in an EC2 instance in AWS region us-west-2, as previously mentioned. We recommend using an EC2 with at least 8GB of memory available.\nThe notebook was developed and tested using a t2.large instance (2 cpus; 8GB memory).\n\n\nPython 3\nMost of these imports are from the Python standard library. However, you will need to install these packages into your Python 3 environment if you have not already done so:\n\ns3fs\nrequests\npandas\nxarray\nmatplotlib\n\n\n\n\nRequirements\n\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nimport requests\nimport json\nimport time\nimport s3fs\n\nShortName = \"ECCO_L4_OBP_05DEG_MONTHLY_V4R4\"\n\n\n\nStudy period\nSet some “master” inputs to define the time and place contexts for our case studies in the ipynb. This example will be requesting time subsets and receiving global data back from the Harmony API.\n\nstart_date = \"2010-01-01\"\nend_date   = \"2018-12-31\"\n\n\n\nData Access\nSome features in the Harmony API require us to identify the target dataset/collection by its concept-id (which uniquely idenfifies it among the other datasets in the Common Metadata Repository). Support for selection by the dataset ShortName will be added in a future release.\n\nCommon Metadata Repository (CMR)\nFor now, we will need to get the concept-id that corresponds to our dataset by accessing its metadata from the CMR. Read more about the CMR at: https://cmr.earthdata.nasa.gov/\nRequest the UMM Collection metadata (i.e. metadata about the dataset) from the CMR and select the concept-id as a new variable ccid.\n\nresponse = requests.get(\n    url='https://cmr.earthdata.nasa.gov/search/collections.umm_json', \n    params={'provider': \"POCLOUD\",\n            'ShortName': ShortName,\n            'page_size': 1}\n)\n\nummc = response.json()['items'][0]\n\nccid = ummc['meta']['concept-id']\n\nccid\n\n'C1990404791-POCLOUD'\n\n\n\n\nHarmony API\nAnd get the Harmony API endpoint and zarr parameter like we did for SMAP before:\n\nbase = f\"https://harmony.earthdata.nasa.gov/{ccid}\"\nhreq = f\"{base}/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset\"\nrurl = f\"{hreq}?format=application/x-zarr\"\n\nprint(rurl)\n\nhttps://harmony.earthdata.nasa.gov/C1990404791-POCLOUD/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?format=application/x-zarr\n\n\nECCO monthly collections have 312 granules in V4r4 (you can confirm with the granule listing from CMR Search API) so we can get the entire time series for 2010 to 2018 with one request to the Harmony API.\nFormat a string of query parameters to limit the processing to the desired time period. Then, append the string of time subset parameters to the variable rurl.\n\nsubs = '&'.join([f'subset=time(\"{start_date}T00:00:00.000Z\":\"{end_date}T23:59:59.999Z\")'])\n\nrurl = f\"{rurl}&{subs}\"\n\nprint(rurl)\n\nhttps://harmony.earthdata.nasa.gov/C1990404791-POCLOUD/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?format=application/x-zarr&subset=time(\"2010-01-01T00:00:00.000Z\":\"2018-12-31T23:59:59.999Z\")\n\n\nSubmit the request and monitor the processing status in a while loop, breaking it on completion of the request job:\n\nresponse = requests.get(url=rurl).json()\n\n# Monitor status in a while loop. Wait 10 seconds for each check.\nwait = 10\nwhile True:\n    response = requests.get(url=response['links'][0]['href']).json()\n    if response['status']!='running':\n        break\n    print(f\"Job in progress ({response['progress']}%)\")\n    time.sleep(wait)\n\nprint(\"DONE!\")\n\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nDONE!\n\n\nAccess the staged cloud datasets over native AWS interfaces\nCheck the message field in the response for clues about how to proceed:\n\nprint(response['message'])\n\nThe job has completed successfully. Contains results in AWS S3. Access from AWS us-west-2 with keys from https://harmony.earthdata.nasa.gov/cloud-access.sh\n\n\nThe third item in the list of links contains the shell script from the job status message printed above. Let’s download the same information in JSON format. It should be the fourth item; check to be sure:\n\nlen(response['links'])\n\n102\n\n\nSelect the url and download the json, then load to Python dictionary and print the keys:\n\nwith requests.get(response['links'][3]['href']) as r:\n    creds = r.json()\n\nprint(creds.keys())\n\ndict_keys(['AccessKeyId', 'SecretAccessKey', 'SessionToken', 'Expiration'])\n\n\nCheck the expiration timestamp for the temporary credentials:\n\ncreds['Expiration']\n\n'2021-06-11T02:36:29.000Z'\n\n\nOpen zarr datasets with s3fs and xarray\nGet the s3 output directory and list of zarr datasets from the list of links. The s3 directory should be the fifth item; the urls are from item six onward:\n\ns3_dir = response['links'][4]['href']\n\nprint(s3_dir)\n\ns3://harmony-prod-staging/public/harmony/netcdf-to-zarr/2295236b-8086-4543-9482-f524a9f2d0c3/\n\n\nNow select the URLs for the staged files and print the first one:\n\ns3_urls = [u['href'] for u in response['links'][5:]]\n\nprint(s3_urls[0])\n\ns3://harmony-prod-staging/public/harmony/netcdf-to-zarr/2295236b-8086-4543-9482-f524a9f2d0c3/OCEAN_BOTTOM_PRESSURE_mon_mean_2009-12_ECCO_V4r4_latlon_0p50deg.zarr\n\n\nUse the AWS s3fs package and your temporary aws_creds to open the zarr directory storage:\n\ns3 = s3fs.S3FileSystem(\n    key=creds['AccessKeyId'],\n    secret=creds['SecretAccessKey'],\n    token=creds['SessionToken'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nlen(s3.ls(s3_dir))\n\n97\n\n\nPlot the first Ocean Bottom Pressure dataset\nCheck out the documentation for xarray’s open_zarr method at this link. Open the first dataset and plot the OBP variable:\n\nds0 = xr.open_zarr(s3.get_mapper(s3_urls[0]), decode_cf=True, mask_and_scale=True)\n\n# Mask the dataset where OBP is not within the bounds of the variable's valid min/max:\nds0_masked = ds0.where((ds0.OBP>=ds0.OBP.valid_min) & (ds0.OBP<=ds0.OBP.valid_max))\n\n# Plot the masked dataset\nds0_masked.OBP.isel(time=0).plot.imshow(size=10)\n\n<matplotlib.image.AxesImage at 0x7f28ed2ba4c0>\n\n\n\n\n\nLoad the zarr datasets into one large xarray dataset\nLoad all the datasets in a loop and concatenate them:\n\nzds = xr.concat([xr.open_zarr(s3.get_mapper(u)) for u in s3_urls], dim=\"time\")\n\nprint(zds)\n\n<xarray.Dataset>\nDimensions:         (latitude: 360, longitude: 720, nv: 2, time: 97)\nCoordinates:\n  * latitude        (latitude) float64 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float64 -90.0 -89.5 -89.5 ... 89.5 89.5 90.0\n  * longitude       (longitude) float64 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float64 -180.0 -179.5 -179.5 ... 179.5 180.0\n  * time            (time) datetime64[ns] 2009-12-16T12:00:00 ... 2017-12-16T...\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    OBP             (time, latitude, longitude) float64 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    OBPGMAP         (time, latitude, longitude) float64 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2010-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2009-12-01T00:00:00\n    title:                        ECCO Ocean Bottom Pressure - Monthly Mean 0...\n    uuid:                         297c8df0-4158-11eb-b208-0cc47a3f687b\n\n\nReference OBP and mask the dataset according to the valid minimum and maximum:\n\nobp = zds.OBP\n\nprint(obp)\n\n<xarray.DataArray 'OBP' (time: 97, latitude: 360, longitude: 720)>\ndask.array<concatenate, shape=(97, 360, 720), dtype=float64, chunksize=(1, 360, 720), chunktype=numpy.ndarray>\nCoordinates:\n  * latitude   (latitude) float64 -89.75 -89.25 -88.75 ... 88.75 89.25 89.75\n  * longitude  (longitude) float64 -179.8 -179.2 -178.8 ... 178.8 179.2 179.8\n  * time       (time) datetime64[ns] 2009-12-16T12:00:00 ... 2017-12-16T06:00:00\nAttributes:\n    comment:                OBP excludes the contribution from global mean at...\n    coverage_content_type:  modelResult\n    long_name:              Ocean bottom pressure given as equivalent water t...\n    units:                  m\n    valid_max:              72.07011413574219\n    valid_min:              -1.7899188995361328\n\n\nGet the valid min and max from the corresponding CF attributes:\n\nobp_vmin, obp_vmax = obp.valid_min, obp.valid_max\n\nobp_vmin, obp_vmax\n\n(-1.7899188995361328, 72.07011413574219)\n\n\nMask the dataset according to the OBP min and max and plot a series:\n\n# Mask dataset where not inside OBP variable valid min/max:\nzds_masked = zds.where((obp>=obp_vmin)&(obp<=obp_vmax))\n\n# Plot SSH again for the first 12 time slices:\nobpp = zds_masked.OBP.isel(time=slice(0, 6)).plot(\n    x=\"longitude\", \n    y=\"latitude\", \n    col=\"time\",\n    levels=8,\n    col_wrap=3, \n    add_colorbar=False,\n    figsize=(14, 8)\n)\n\n# Plot a colorbar on a secondary axis\nmappable = obpp.axes[0][0].collections[0]\ncax = plt.axes([0.05, -0.04, 0.95, 0.04])\ncbar1 = plt.colorbar(mappable, cax=cax, orientation='horizontal')"
  },
  {
    "objectID": "external/zarr-eosdis-store.html",
    "href": "external/zarr-eosdis-store.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "Zarr Example\nimported on: 2022-05-12\n\nThis notebook is from NASA’s Zarr EOSDIS store notebook\n\n\nThe original source for this document is https://github.com/nasa/zarr-eosdis-store\n\n\n\nzarr-eosdis-store example\nInstall dependencies\n\nimport sys\n\n# zarr and zarr-eosdis-store, the main libraries being demoed\n!{sys.executable} -m pip install zarr zarr-eosdis-store\n\n# Notebook-specific libraries\n!{sys.executable} -m pip install matplotlib\n\nImportant: To run this, you must first create an Earthdata Login account (https://urs.earthdata.nasa.gov) and place your credentials in ~/.netrc e.g.:\n   machine urs.earthdata.nasa.gov login YOUR_USER password YOUR_PASSWORD\nNever share or commit your password / .netrc file!\nBasic usage. After these lines, we work with ds as though it were a normal Zarr dataset\n\nimport zarr\nfrom eosdis_store import EosdisStore\n\nurl = 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210715090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc'\n\nds = zarr.open(EosdisStore(url))\n\nView the file’s variable structure\n\nprint(ds.tree())\n\n/\n ├── analysed_sst (1, 17999, 36000) int16\n ├── analysis_error (1, 17999, 36000) int16\n ├── dt_1km_data (1, 17999, 36000) int16\n ├── lat (17999,) float32\n ├── lon (36000,) float32\n ├── mask (1, 17999, 36000) int16\n ├── sea_ice_fraction (1, 17999, 36000) int16\n ├── sst_anomaly (1, 17999, 36000) int16\n └── time (1,) int32\n\n\nFetch the latitude and longitude arrays and determine start and end indices for our area of interest. In this case, we’re looking at the Great Lakes, which have a nice, recognizeable shape. Latitudes 41 to 49, longitudes -93 to 76.\n\nlats = ds['lat'][:]\nlons = ds['lon'][:]\nlat_range = slice(lats.searchsorted(41), lats.searchsorted(49))\nlon_range = slice(lons.searchsorted(-93), lons.searchsorted(-76))\n\nGet the analysed sea surface temperature variable over our area of interest and apply scale factor and offset from the file metadata. In a future release, scale factor and add offset will be automatically applied.\n\nvar = ds['analysed_sst']\nanalysed_sst = var[0, lat_range, lon_range] * var.attrs['scale_factor'] + var.attrs['add_offset']\n\nDraw a pretty picture\n\nfrom matplotlib import pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = [16, 8]\nplt.imshow(analysed_sst[::-1, :])\nNone\n\n\n\n\nIn a dozen lines of code and a few seconds, we have managed to fetch and visualize the 3.2 megabyte we needed from a 732 megabyte file using the original archive URL and no processing services"
  },
  {
    "objectID": "processing/processing.html",
    "href": "processing/processing.html",
    "title": "Processing",
    "section": "",
    "text": "Processing details here"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Earthdata Cloud Cookbook",
    "section": "Welcome",
    "text": "Welcome\nWelcome to the NASA Openscapes EarthData Cloud Cookbook!\nThis Cookbook is under active development but is an open resource as we iterate. Its purpose is to learning-oriented to support scientific researchers using NASA Earthdata from Distributed Active Archive Centers (DAACs) as they migrate their workflows to the cloud.\nThis Earthdata Cloud Cookbook complements the nasa-openscapes.github.io/tutorials, which have notebooks created for specific events and are available for reuse and self-paced learning. This Cookbook has several accompanying stand-alone lessons and example notebooks, as well as documentation for how we support researchers."
  },
  {
    "objectID": "index.html#the-new-cloud-paradigm",
    "href": "index.html#the-new-cloud-paradigm",
    "title": "Earthdata Cloud Cookbook",
    "section": "The new cloud paradigm",
    "text": "The new cloud paradigm\nNASA Distributed Active Archive Centers (DAACs) are in the process of moving their data holdings to the cloud. In the new paradigm, data storage (orange in the illustration) will migrate to the cloud (green) and DAAC-provided tools and services built on top of the data are co-located in the Earthdata Cloud.\n\n\n\nIllustration by Catalina Oaida, PO.DAAC\n\n\nAs this data migration occurs, DAACs will have more information about how users can access data. For example, the Cloud Data page at PO.DAAC offers access to resources to help guide data users in discovering, accessing, and utilizing cloud data. During this transition, some data will continue to be available from the traditional on premise archive, while some data will also be available from and within the Earthdata Cloud.\nTo learn more about NASA’s EarthData Cloud Migration:\n\nHow we work - Katie Baynes, Keynote at FedGeoDay2020 (video). Nice overview of EOSDIS work and emphasis on open science\nCloud Data Egress: How EOSDIS Supports User Needs - Emily Cassidy (blog). Describes supporting users’ needs during cloud migration by providing analysis-ready data"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Earthdata Cloud Cookbook",
    "section": "About",
    "text": "About\nThis Earthdata Cloud Cookbook is being developed as a cross-DAAC collaboration by the NASA-Openscapes team. Learn more at nasa-openscapes.github.io."
  },
  {
    "objectID": "contributing/setup.html#overview",
    "href": "contributing/setup.html#overview",
    "title": "Initial Setup",
    "section": "Overview",
    "text": "Overview\nThis is the setup required to contribute to our Cookbook. Instructions are for the command line; see quarto.org for equivalents in R and for the most up-to-date and more detailed information."
  },
  {
    "objectID": "contributing/setup.html#install-quarto",
    "href": "contributing/setup.html#install-quarto",
    "title": "Initial Setup",
    "section": "Install Quarto",
    "text": "Install Quarto\n\nOption 1: Install Quarto locally on your machine\nFirst, in your internet browser, go to the very latest version of the Quarto command line interface (CLI):\nhttps://github.com/quarto-dev/quarto-cli/releases/latest\nDownload Quarto by clicking on the file appropriate for your operating system:\n\nLinux: amd64.deb\nMac: macos.pkg\nWindows: win.msi\n\nOnce download is complete, follow the installation prompts on your computer like you do for other software.\nNote for Mac users: If you do not have administrative privileges, please select “Install for me only” during the Destination Selection installation step (you will first click on “Change Install Location” at the Installation Type step).\n\n\nCheck install\nFinally, check to make sure Quarto installed properly. Open a command line terminal and type:\nquarto check install\n\n\n\n\n\n\nAdditional checks\n\n\n\n\n\nYou can also run:\n\nquarto check knitr to locate R, verify we have the rmarkdown package, and do a basic render\nquarto check jupyter to locate Python, verify we have Jupyter, and do a basic render\nquarto check to run all of these checks together\n\n\n\n\n\n\nOption 2: Install Quarto in a docker container\nIf installing quarto locally is not an option, you can install it inside a container using the following Dockerfile:\n#| fold: true\n#| summary: \"Show the Dockerfile\"\n\n##############################\n# This Dockerfile installs quarto and then runs quarto serve against the\n# internal /home/quarto/to_serve.\n#\n# BUILD\n# -----\n# To build this container, run\n#\n#     docker build -t quarto_serve .\n#\n# Add the --no-cache option to force docker to build fresh and get the most\n# recent version of quarto.\n#\n#\n# RUN\n# ---\n# 1. Find the directory you want quarto to serve. Let's call this /PATH/TO/earthdata-cloud-cookbook.\n# 2. Run docker:\n#\n#     docker run --rm -it -p 4848:4848 -v /PATH/TO/earthdata-cloud-cookbook:/home/quarto/to_serve quarto_serve\n#\n# 3. Open your browser and go to http://127.0.0.1:4848/\n#\n##############################\n\nFROM ubuntu:hirsute\n\n######\n# Install some command line tools we'll need\n######\nRUN apt-get update\nRUN apt-get -y install wget\nRUN apt-get -y install gdebi-core\nRUN apt-get -y install git\n\n\n######\n# Install quarto (https://quarto.org/)\n######\n\n# This is a quick and dirty way of getting the newest version number from\n# https://github.com/quarto-dev/quarto-cli/releases/latest. What's happening is\n# we're pulling the version number out of the redirect URL. This will end up\n# with QVER set to something like 0.2.11.\nRUN QVER=`wget --max-redirect 0 https://github.com/quarto-dev/quarto-cli/releases/latest 2>&1 | grep \"Location\" | sed 's/L.*tag\\/v//' | sed 's/ .*//'` \\\n    && wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v$QVER/quarto-$QVER-amd64.deb\"\nRUN gdebi -n quarto.deb\n\n# Run this to make sure quarto installed correctly\nRUN quarto check install\n\n\n######\n# Create a non-root user called quarto\n######\nRUN useradd -ms /bin/bash quarto\nUSER quarto\nRUN mkdir /home/quarto/to_serve\nWORKDIR /home/quarto/to_serve\n\n\n######\n# Start quarto serve\n######\n\nCMD quarto serve --no-browse --host 0.0.0.0 --port 4848"
  },
  {
    "objectID": "contributing/setup.html#clone-cookbook-from-github",
    "href": "contributing/setup.html#clone-cookbook-from-github",
    "title": "Initial Setup",
    "section": "Clone Cookbook from GitHub",
    "text": "Clone Cookbook from GitHub\nNow clone our Cookbook and make it your current directory.\ngit clone https://github.com/NASA-Openscapes/earthdata-cloud-cookbook\ncd earthdata-cloud-cookbook"
  },
  {
    "objectID": "contributing/setup.html#build-cookbook",
    "href": "contributing/setup.html#build-cookbook",
    "title": "Initial Setup",
    "section": "Build Cookbook!",
    "text": "Build Cookbook!\nYou should now be able to serve our Cookbook from the earthdata-cloud-cookbook directory.\nquarto serve\nThis will open the Cookbook as a new tab in your browser. Now you’re all set to contribute to the Cookbook! Read about how in the next chapter."
  },
  {
    "objectID": "contributing/quarto-website-tutorial.html",
    "href": "contributing/quarto-website-tutorial.html",
    "title": "Quarto Tutorial",
    "section": "",
    "text": "We’ve created a tutorial on how to copy (fork or download) an existing Quarto website like this one and adapt it for your own uses. Please see: https://openscapes.github.io/quarto-website-tutorial/."
  },
  {
    "objectID": "contributing/resources.html#git-flight-rules",
    "href": "contributing/resources.html#git-flight-rules",
    "title": "Resources",
    "section": "Git Flight Rules",
    "text": "Git Flight Rules\n“A guide for astronauts (now, programmers using Git) about what to do when things go wrong.”\nhttps://github.com/k88hudson/git-flight-rules\nThis is quite a comprehensive and maintained list of git commands, using the command line."
  },
  {
    "objectID": "contributing/slides.html#quarto-slides",
    "href": "contributing/slides.html#quarto-slides",
    "title": "EarthData Cloud Cookbook",
    "section": "Quarto slides",
    "text": "Quarto slides\nquarto preview\nThis will return a url - open that url in another browser window and it will auto-refresh as you save your document. Note that previews will auto-update - but if they don’t, refresh the browser and the updates should flow again after that.\n<— From J.J.:\n\nThe websocket connection used to keep the preview live does seem to work, although I’ve seen times where a manual refresh of the browser is required. This is likely due to some very obscure websocket handling issue somewhere in the networking stack (so not really worth or even possible to debug). I would just tell people that previews will auto-update and if they don’t just refresh the browser and the updates should flow again after that.\n\n—>"
  },
  {
    "objectID": "contributing/environment.html#introduction",
    "href": "contributing/environment.html#introduction",
    "title": "JupyterHub environment",
    "section": "Introduction",
    "text": "Introduction\nOur JupyterHub is managed by 2i2c; see background from the 2021 Cloud Hackathon [JupyterHub intro]](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/clinic/jupyterhub.html).\nWe create the environment with software packages for everyone to use - this includes python packages and quarto. Our environment is called corn, developed by NSIDC software engineer Luis Lopez. Here are some notes about corn; please refer to the GitHub README for details about installation.\nWhen looking at environment.yml: - Main dependency is python. Python 3.9 has some stability “pinned” the version - Next thing: pangeo-notebook. This is not pinned to a version, whatever their latest is best. This is what makes environment run in 2i2c - The rest are optional, they’ve been added as different groups want them - It runs on linux-64 and mac-OS - side note: ~ means “don’t update past breaking versions”.\nNow getting to a point where they are conflicting and can get into problems with deprecation and failing the environment. Next strategy: trim down “core” corn environment. Then have a process & writeup for teams to copy that environment and add their additional packages, and make sure it’s the one running in 2i2c. Point to existing resources as much as possible (i.e. Turing Way, Pangeo, Pythia); link to them from here and provide our-case-specific details here."
  },
  {
    "objectID": "contributing/environment.html#more-background",
    "href": "contributing/environment.html#more-background",
    "title": "JupyterHub environment",
    "section": "More background",
    "text": "More background\nSome articles about Python environments with Conda that are interesting and related to our 2i2c workflow:\n\nhttps://www.anaconda.com/blog/understanding-and-improving-condas-performance\nhttps://medium.com/@marius.v.niekerk/conda-metachannel-f962241c9437\nhttps://wolfv.medium.com/making-conda-fast-again-4da4debfb3b7\nhttps://pythonspeed.com/articles/conda-dependency-management/\n\nWe are doing what article the fourth article describes. We are using conda-lock with versioned dependencies. Since corn was designed to run in 2i2c I never bothered to test it for windows or OSx but I think we should offer that possibility. I added OSX and will need some volunteers to test it on Windows."
  },
  {
    "objectID": "contributing/index.html#intro",
    "href": "contributing/index.html#intro",
    "title": "Contributing",
    "section": "Intro",
    "text": "Intro\nThis section describes how our NASA Openscapes team collaborates to create this Cookbook, with an eye towards how others could collaborate with us in the future.\nOur style of working is greatly influenced by:\n\nThe Turing Way Community Handbook\nThe Carpentries Curriculum Development Handbook\nThe Documentation System"
  },
  {
    "objectID": "contributing/index.html#quarto",
    "href": "contributing/index.html#quarto",
    "title": "Contributing",
    "section": "Quarto",
    "text": "Quarto\nWe’re making the EarthData Cloud Cookbook with Quarto: quarto.org. Quarto makes collaborating to create technical documentation streamlined because we work in plain text documents that can have executable code (Python, R) and are rendered using Jupyter and Knitr engines.\nWhat is Quarto? Quarto builds from what RStudio learned from RMarkdown but enables different engines (Jupyter and knitr). It is both a Command Line Tool and R package. .qmd is a new filetype like .Rmd — meaning it’s a text file but when coupled with an engine that executes code it can be rendered as html, pdf, word, and beyond. Collaborators can develop text and notebooks in wherever they are most comfortable. Then Quarto builds them together as a book or website, even converting between file types like .ipynb, .md and .qmd it’s a streamlined was to develop and publish with collaborators that have different workflows. Once the book is “served” locally, .md files auto-update as you edit, and files with executable code can be rendered individually, and the behavior of different code chunks can be controlled and cached.\n(Note: with Quarto, e-books and websites are very similarly structured, with e-books being set up for numbered chapters and references and websites set up for higher number of pages and organization. We can talk about our book as a book even as we explore whether book/website better suits our needs. Our Cookbook is currently a website; this is assigned in _quarto.yml, as we’ll explore later)."
  },
  {
    "objectID": "contributing/community.html",
    "href": "contributing/community.html",
    "title": "Community Resources",
    "section": "",
    "text": "Running the NASA Cloud Workshop notebooks with mybinder.org - by Eli Holmes, 2021 Cloud Hackathon Participant who then set up working in Binder"
  },
  {
    "objectID": "contributing/workflow.html#workflow-for-contributing-to-our-cookbook",
    "href": "contributing/workflow.html#workflow-for-contributing-to-our-cookbook",
    "title": "Workflow",
    "section": "Workflow for contributing to our Cookbook",
    "text": "Workflow for contributing to our Cookbook\nYour workflow can be from wherever you are most comfortable. You can develop chapters working in a text editor, integrated development environment (IDE), or notebook interface. And you can serve Quarto from the Command Line or R. Quarto will combine files of different types ( .md , .ipynb, .Rmd, and .qmd) to make the Cookbook. This workflow can streamline collaboration for scientific & technical writing across programming languages.\nBy default, rendering the Cookbook will only act on markdown text and will not execute any code. This way, rendering the whole Cookbook will not become overly cumbersome as it grows, and there is not one single virtual environment with all the libraries required. Instead, our workflow is that as you develop a single chapter (or section), you control when you render, and can create a requirements.txt file for that chapter (or section). This will also make it much easier to port lessons that work standalone and are ready for a Cloud instance or a workshop."
  },
  {
    "objectID": "contributing/workflow.html#quickstart-reference",
    "href": "contributing/workflow.html#quickstart-reference",
    "title": "Workflow",
    "section": "Quickstart reference",
    "text": "Quickstart reference\n\nDaily setup: get the latest!\nQuarto (and the RStudio IDE if you’re using it) are under active development; currently it’s important to get the daily versions before you start working.\n\nQuarto: https://github.com/quarto-dev/quarto-cli/releases/latest\n(RStudio IDE: https://dailies.rstudio.com/)\nPull from GitHub\ngit checkout main\ngit pull\n\n\n\n\n\n\n\nSummary of GitHub and Quarto commands detailed below\n\n\n\n\n\n## check which branches exist, where you are, and pull recent from main branch\ngit branch\ngit checkout main\ngit pull\n\n## create and switch to new branch\ngit checkout -b branch-name\n\n## develop content: write prose in markdown, code in R and Python\n## remember to render any .ipynb, .rmd, or .qmd files before pushing\nquarto serve\nquarto render # can also render single file\n\n## commit changes\ngit add --all\ngit status\ngit commit -m \"my commit message here\"\n\n## push changes\ngit push -u origin branch-name  # connect your branch to github.com and push\n\n## create a pull request\n## from GitHub.com, create a pull request and once it is merged, delete your branch\n\n## delete branch\ngit checkout main         # switch to the main branch\ngit pull                  # pull merged updates from github.com\ngit branch -d branch-name # delete old local  branch"
  },
  {
    "objectID": "contributing/workflow.html#github-workflow",
    "href": "contributing/workflow.html#github-workflow",
    "title": "Workflow",
    "section": "GitHub Workflow",
    "text": "GitHub Workflow\nFirst let’s talk about the GitHub part of the workflow.\nWe will work in branches so as to not overwrite each other’s work, and let GitHub do what it does best.\nThe main branch will be the current approved version of the book. The main branch is what displays at https://nasa-openscapes.github.io/earthdata-cloud-cookbook.\nA nice clean workflow with branches is to consider them temporary. You pull the most recent from main, you create a branch locally, you make your edits, you commit regularly, you push regularly to github.com, and then you create a pull request for it to be merged into main, and when it’s approved the branch is deleted on github.com and you also delete it locally. That’s the workflow we’ll walk through here. A great resource on GitHub setup and collaboration is Happy Git with R, which includes fantastic background philosophy as well as bash commands for setup, workflows, and collaboration.\nThe following assumes you’re all setup from the previous chapter.\n\nBranch setup\nFirst off, check what branch you’re on and pull the most recent edits from the main branch. If you need to switch branches, use git checkout. *Note: a new alternative to git checkout is git switch (see this blog); when you updated git consider using it here instead too.\ngit branch          # returns all local branches\ngit checkout main   # switch branch to main\ngit pull            # pull most recent from the main branch\nIf you are already on the main branch, git will tell you, and that’s fine.\n(If you have any residual branches from before, you’ll likely want to start off by deleting them — assuming they were temporary and have been merged into github.com. You can delete a branch with git branch -d branch-name).\nNext, create a new branch, then switch to that branch to work in. Below is a one-step approach for the two-step process of git branch branch-name then git checkout branch-name (read more).\ngit checkout -b branch-name  # create and switch to new branch\n\n\nDevelop content\nTime to edit and develop content, and run your Quarto Workflow – see specific instructions below. While you’re developing, you’ll want to frequently commit and push your changes.\n\n\nCommit changes\nYou’ll commit your work regularly as you go, likely using the following, which commits all files you’ve affected within the Cookbook project:\ngit add --all\ngit commit -m \"my commit message here\"\nFrom R Packages by Hadley Wickham:\n\nA commit takes a snapshot of your code at a specified point in time. Using a Git commit is like using anchors and other protection when climbing. If you’re crossing a dangerous rock face you want to make sure you’ve used protection to catch you if you fall. Commits play a similar role: if you make a mistake, you can’t fall past the previous commit.\n\nHere are more of Hadley’s suggested best practices.\n\n\n\n\n\n\nYou must re-render all files that aren’t plain .mds to view your edits\n\n\n\nIf you added or made changes to any text or code (including changing the dataset upon which existing code relies) within .ipynb, .qmd, or .Rmd files, you must re-render those files individually before pushing. See the Quarto render section for more details. Afterwards, git add and git commit any changes to the updated _freeze directory before continuing on to the next step.\nLocal re-rendering is necessary in cases where code is changed because the workflow used to make this site assumes that all code has been pre-executed. Read more about this at freeze section at the Quarto docs.\n\n\n\n\nPush changes\nWhen you’re ready to push changes you’ve made in your branch, you’ll first need to connect it to github.com by pushing it “upstream” to the “origin repository” (-u below is short for --set-upstream):\ngit push -u origin branch-name  # connect your branch to github.com and push\nThe above is a one-time command to connect your local branch back to github.com. After you’ve pushed successfully the first time, then as you continue to commit, you’ll be able to push as normal:\ngit push\n\n\nDelete your local changes\nThere are several ways to delete your local changes if you were playing around and want to reset. Here are a few:\nBurn it all down - delete the whole repo that you have locally, and then reclone.\ncd 2021-Cloud-Hackathon\nrm -rf 2021-Cloud-Hackathon \nUndo changes you’ve maybe saved or committed, but not pushed. This is less time and internet intensive (no new clone/download).\nIf you’ve got changes saved, but not yet staged, committed, or pushed, you’ll delete unstaged changes in the working directory with clean:\ncd 2021-Cloud-Hackathon\ngit clean -df\ngit checkout -- .\nHere is a whole blog on how to do this, with conceptual diagrams, command line code, and screenshots from RStudio. https://ohi-science.org/news/github-going-back-in-time\n\n\nUpdate local branch with remote main branch\nIf while you’re working you would like to update your local your-branch with the most recent updates on the main branch on GitHub.com, there are several ways to do this.\n\ncheckouts and merge main\nGit Update Local Branch with remote Master\ngit checkout main\ngit pull\ngit checkout your-branch\ngit merge main\n\n\nfetch and merge origin/main\ngit checkout your-branch\ngit fetch\ngit merge origin/main\n\n\n\nPull Request\nNow you’ve synced your work to github.com. It is currently online, in a separate branch from the main branch. Go to https://github.com/nasa-openscapes/earthdata-cloud-cookbook, find your branch, and do a pull request.\nTODO: Let’s discuss our review process:\n\nTag someone to review, (including you if it’s a quick fix?)\nTimeline\nMerging\n\nWhen the pull request is merged, delete the branch on github.com. GitHub will prompt you with a button at the end of the merge.\n\n\nDelete Branch\nOnce your pull request is merged and you’ve deleted the branch from github.com, then come back to your local setup and delete the branch locally:\ngit checkout main         # switch to the main branch\ngit pull                  # pull merged updates from github.com\ngit branch -d branch-name # delete old local  branch"
  },
  {
    "objectID": "contributing/workflow.html#quarto-workflow",
    "href": "contributing/workflow.html#quarto-workflow",
    "title": "Workflow",
    "section": "Quarto Workflow",
    "text": "Quarto Workflow\nNow the fun part! Our overall workflow will be to serve the book at the beginning, develop/edit chapters as simple text files (.md/.qmd/.Rmd) or executable notebooks (.ipynb) that will all render into the book.\nQuarto lets us easily convert between file types, so depending on how you prefer to work and how you’d like to interact with different audiences, we can go between formats as we wish. For example, we can converting an existing .ipynb to .qmd to collaborate during development, and then convert back to .ipynb files for our workshops. See quarto convert help for details.\nAs you work, you’ll follow our GitHub workflow above, committing regularly. Remember to quarto render individual notebooks you’re working on so that your changes will be be included in the whole Cookbook before pushing to github.com.\nThe following is to run Quarto from the command line; see quarto.org to see equivalents in R.\n\nQuarto serve\nThe thing to do first is to “serve” the Cookbook so that we can see what it looks like as we develop the chapters (it’s called “serve” because it’s really a website that looks like a book).\nRun the following from your branch in your earthdata-cloud-cookbook directory from the command line:\nquarto serve\nAnd after it’s is served, you can click from the console (or paste the url into your browser) to see the development version of the Cookbook.\n\n\n\n\n\n\nThis command line instance is now being used to serve Quarto\n\n\n\nYou can open another instance to continue working from the command line, including running other shell commands and rendering (see next). Launching your command line shell of choice will open a new instance.\n\n\n\n\nDevelop Cookbook Content\nYou can develop Cookbook chapters in the text editor, IDE, or notebook editor of your choice (i.e. see JupyterLab with Quarto).\n\nRStudio IDE & Visual Editor\nYou can also use the RStudio IDE. It can be used as a simple text editor, but it can also interactively execute code in .qmd and .Rmd files too.\nThe RStudio IDE Visual Editor makes this experience feel like a cross between an interactive notebook and a Google Doc:\n\n\n\nThe RStudio IDE Visual Editor with an interactive .qmd file\n\n\nAbove shows the Visual Editor in the top left pane with an interactive .qmd file. Learn more about the RStudio Visual Editor.\nAnother benefit of the RStudio IDE is that it has a docked command line (Terminal, bottom left pane), file navigation (bottom right pane) and GitHub interface (top right pane). The IDE helps keep things organized as you work, and provides a visual way to review your git commits and do common commands (see this RStudio-GitHub walk through from R for Excel Users). Note too that the image shows the second instance of the Terminal command line; the first is being used to serve Quarto.\n\n\n\nQuarto render\nAs you develop book chapters and edit files, any .md files will automatically refresh in the browser (so long as quarto serve is running)!\nTo refresh files with executable code, you’ll need to render them individually. You can do the following to render .ipynb/.qmd/.Rmd files so that they show up refreshed in the served Cookbook.\nquarto render my-document.ipynb      ## render a notebook\nquarto render my-work.qmd            ## render a Quarto file\nquarto render my-contribution.Rmd    ## render a RMarkdown file\nFrom the RStudio IDE, you can also press the Render button to render .qmd and .Rmd files.\nAnd you can also render the whole book:\nquarto render\nLearn more about rendering with Quarto. From J.J. Allaire:\n\nThe reason Quarto doesn’t render .Rmd and .qmd on save is that render could (potentially) be very long running and that cost shouldn’t be imposed on you whenever you save. Here we are talking about the age old debate of whether computational markdown should be rendered on save when running a development server. Quarto currently doesn’t do this to give the user a choice between an expensive render and a cheap save.\n\n\n\nIncludes (re-use markdown)\nWe are setup with an includes filter (details at Quarto.org) that lets us re-use markdown content within a project! (You can think of this like “knit child” in R Markdown and lets you source text like you source scripts from each other). This means that we can write text more modularly and re-use it in multiple places so that it’s always up to date.\nAn example of this in action is in our 2021-Cloud-Hackathon Quarto book, where each day of the schedule is saved in a separate file:\n\n\nThis is then called within a book chapter, with a relative filepath:\nThe Clinic will occur in 2 halves, with a 5 minute break in-between:\n\n{.include}\n../logistics/_schedule-clinic.md\n…to finally look like so:\n\nIncludes - things to note\n\nprefix files to include with an underscore.\n\nFrom quarto.org: You should always use an underscore prefix with included files so that they are automatically ignored (i.e. not treated as standalone files) by a quarto render of your project."
  },
  {
    "objectID": "contributing/workflow.html#i2c-workflow",
    "href": "contributing/workflow.html#i2c-workflow",
    "title": "Workflow",
    "section": "2i2c Workflow",
    "text": "2i2c Workflow\nWe use 2i2c to run notebooks.\n\nLog into 2i2c\n\nGo to the openscapes 2i2c. You should see the openscapes 2i2c instance.\nClick on the orange “Log in to continue” button. You should see the Openscapes-Prod page.\nClick the “Sign in with Github” button and log in. If you aren’t already logged into Github, you should see the login prompt. Otherwise, you will be logged in automatically.\n\n\n\nStart a 2i2c session\nAt this point, what you see depends on whether or not you have an active session. If your session is active, JupyterLab will load and you can start your work. If not, you’ll need to start a new session:\n\nSelect a server based on the size of your job. You should see a progress window showing you what 2i2c is doing to get your session started. It may take several minutes, but you’ll eventually see a JupyterLab instance.\n\n\n\nCreate a Jupyter kernel to run notebooks\nThe default jupyter kernel may not have all the libraries you need to run a notebook. Fortunately, you can make a new kernel on the fly to use with the notebook.\n\nOpen a terminal in JupyterLab.\n\nClick on the large blue “+” button on the upper left. You should get a new Laucher tab.\nIn the Launcher tab, click on “Terminal” under “Other.” You should get a tab with a command line prompt.\n\nCreate a conda environment using your favorite method.\nActivate the new environment with conda activate YOUR_ENVIRONMENT_HERE. You should see the name of the new environment in your command line prompt.\nCreate a new kernel by calling ipython kernel install --name YOUR_ENVIRONMENT_HERE --user. You should get a response saying saying the kernel has been installed.\n\nTo use this new kernel,\n\nOpen the notebook you want to run. You should see the notebook in a tab.\nClick on the current kernel on the upper right. The default kernel is called Python 3. You should see a kernel selection widget.\nSelect the new kernel you created and click the “Select” button. The kernel on the upper right should now give the name of your custom kernel.\n\n\n\nDockerfile\nJulie can merge PR\nIt takes 10 mins to rebuild. In the beginning our image was 10 mb. After Hackathon 1 GB now\nOnce it builds the image it should build to Dockerhub but it doesn’t rebuild the Hub.\nOnce the GA finishes it never updates the 2i2c Hub despite code to do so - something to follow up on\n<https://github.com/NASA-Openscapes/corn>\nRebuilding image takes about 10-13 minutes\nIn GitHub > Actions, click on the successful build to DockerHub, copy the tag from “Push new image to Hub”\nThen in 2i2c > Services > Configuration > Click Authorize > “User Docker Image”: paste the tag from GitHub Actions. Click Submit, then navigate away\nEvery once in a while, delete tags from the DockerHub: https://hub.docker.com/repository/docker/openscapes/corn/tags?page=1&ordering=last_updated"
  },
  {
    "objectID": "contributing/workflow.html#virtual-environments",
    "href": "contributing/workflow.html#virtual-environments",
    "title": "Workflow",
    "section": "Virtual Environments",
    "text": "Virtual Environments\nIf you are working on a chapter that loads any Python or R packages, to make your work reproducible you’ll need to create and then update the environments.txt file. Do this use the pip freeze command:\npip freeze > requirements.txt\nThis will overwrite/update the requirements.txt file. Depending on where you are working, you might also want to create a new subfolder to store the requirements.txt. See the next section on Cookbook Structure.\nYou you will then commit and push along with your other edits back to github.com.\nTODO: info about conda…"
  },
  {
    "objectID": "contributing/workflow.html#cookbook-structure",
    "href": "contributing/workflow.html#cookbook-structure",
    "title": "Workflow",
    "section": "Cookbook Structure",
    "text": "Cookbook Structure\nEach chapter in our Cookbook is a separate file (.md/ .ipynb/.qmd/.Rmd). These are stored in our files directory, organized by sub-directory.\nThe Cookbook structure (i.e. the order of sections and chapters) is determined in the _quarto.yml file in the root directory. We can shuffle chapter order by editing the _quarto.yml file, and and add new chapters by adding to the _quarto.yml and creating a new file in the appropriate sub-directory that is indicated in _quarto.yml.\n\n\n\nComparing `_quarto.yml` file to served project in the browser\n\n\nPlease experiment, add new chapters and sections; we can shuffle chapter order and subsections as we continue to develop the Cookbook, nothing is set in stone."
  },
  {
    "objectID": "contributing/workflow.html#cookbook-practices",
    "href": "contributing/workflow.html#cookbook-practices",
    "title": "Workflow",
    "section": "Cookbook Practices",
    "text": "Cookbook Practices\nThese are shared practices that we have for co-developing the Cookbook. This will be developed further as we go!\n\nMarkdown formatting with Quarto\nQuarto expects a certain “flavor of Markdown”, which means there are a few things we should be aware of with any Markdown in notebooks:\nAvoid --- as Markdown breaks because it is confused with yaml headers and will stop displaying your notebook. Instead, use *** to make any line breaks.\nPut a carriage return before lists\nThis will avoid the following, when ipynb can display the list correctly with no carriage return but quarto does not.\n\n\n\nmarkdown-nospace-ipynb\n\n\n\n\nExecuting notebooks\nAs you develop files with executable code ( .qmd, .Rmd, and .ipynb), you can decide if you don’t want the notebook to execute. By adding YAML as a raw text cell at the top of an .ipynb file, you can control whether it is executed or not. Adding execute: false to the YAML at the top of the file basically means that Quarto never runs the code, but the user of course still can interactively in Jupyter.\nUsing .qmd there are also ways to control execution cell-by-cell via # | syntax within a code chunk; see https://quarto.org/docs/computations/execution-options.html\n\n\nIncluding remote notebooks\nWe can include remote notebooks in the Cookbook by explicitly importing them with the following steps. This will create a local copy of them that have additional preamble inserted that includes the original urls and attribution for the notebook.\n\nNavigate to the _import directory.\nOpen assets.json in a text editor. Copy an existing example and use the same structure to indicate the remote notebook you’d like to include. You can write Markdown in the preamble.\n\ntitle: this will be the new title of the notebook\npreamble: this text will be inserted into the notebook below the new title. It should include any description and attribution of the notebook. The preamble is followed by two URL fields (next):\nsource: the url landing page. This should be more general than the specific notebook (i.e. this could be the root GitHub repository).\nurl: the url of the notebook. (i.e. a url that ends with .ipynb)\ntarget: the local filename to give the notebook. The notebook will be saved in the external folder in the root directory.\nprocess: true or false: whether or not to include the entire entry when running the quarto_import.py script\n\n\nAfter these updates to _import/assets.json, to the following in the terminal:\ncd _import\nconda env update -f environment.yml\nconda activate quarto-import\npython quarto_import.py -f assets.json\nThis will return a confirmation of the file that has been processed.\nThen update _quarto.yml by adding your file (external/<target) to the appropriate location in the Cookbook.\n\n\nCreate a .qmd from external .ipynb\nThis is a bit of a hacky way that we can formalize further if it’s useful:\n\nGo to an existing notebook, e.g. https://github.com/podaac/AGU-2020/blob/main/Part-II/01_sst_shpfile/AGU_tutorial1_shp_search.ipynb\nClick on Raw, e.g. https://raw.githubusercontent.com/podaac/AGU-2020/main/Part-II/01_sst_shpfile/AGU_tutorial1_shp_search.ipynb\nCopy text\nIn your local setup (e.g. RStudio IDE): New File > Text File > Paste > Save (with the same name if appropriate) and .ipynb extension, e.g.: discovery/search-by-shapefile.ipynb\nIn the command line:\n\n#| eval: false\nquarto convert help # reminder of commands!\nquarto convert discovery/search-by-shapefile.ipynb # convert to .qmd\nrm discovery/search-by-shapefile.ipynb # delete .ipynb"
  },
  {
    "objectID": "contributing/workflow.html#notebook-review",
    "href": "contributing/workflow.html#notebook-review",
    "title": "Workflow",
    "section": "Notebook Review",
    "text": "Notebook Review\n\nPreamble\nGitHub displays differences in code, so a nice way to review other people’s work (or your own) is to edit files directly and view the commit differences at GitHub. We’ll do this by first creating a branch and pull request so that that there is a chance for the original author to be notified of the suggestions and review them before merging back to the main branch (at which point the quarto book/site will be rebuilt since we have a GitHub action setup to do so).\nGitHub can have trouble with .ipynb notebooks; their differences include file-formatting changes and are often too big to display. See examples: CMR notebook with file-formatting diffs and the CMR-STAC API notebook review with diffs too big to display. This means that while you can still edit it directly, it’s hard to alert the author to what changes you made. Some emerging conventions to help with this:\n\nwrite TODO for “to do’s”, but this as one word all-caps makes it easier to search\n\n\n\nReview with .qmds\nSince quarto notebook files (.qmds) are text files, GitHub can display their differences nicely, for example: CMR-STAC API qmd.\nHere is a workflow to leverage .qmds in our review process:\n\nClone/pull the repo, create a branch following our GitHub Workflow above\n\n## git clone and branch\ngit clone https://github.com/NASA-Openscapes/2021-Cloud-Hackathon/\ngit checkout -b my-new-branch\n\nIn the terminal, use quarto convert to convert a notebook from .ipynb to .qmd. You’ll have to either cd into the folder or you can convert by specifying the filepath. Typing quarto convert help will describe more options. The following will create tutorials/Data_Discovery__CMR-STAC_API.qmd.\n\n## quarto convert\nquarto convert tutorials/Data_Discovery__CMR-STAC_API.ipynb\n\nCommit this file now so that the whole file is tracked and any changes you make will be viewed as diffs.\nNow, make edits/review the .qmd in your editor of choice, which will likely also have spell-check and markdown support. At the moment, this is best with making edits to the .qmd locally while ALSO running the .ipynb notebook in 2i2c. This will iterate as we get quarto set up in 2i2c (and as we work more with .qmds).\nWhen you’re done with your review, you’ll want to copy all your edits from the .qmd back to the .ipynb. This way, the notebook author can both easily see the diffs made to the .qmd, and run the .ipynb as they normally would in 2i2c. The following code creates tutorials/Data_Discovery__CMR-STAC_API.ipynb, and over-write the original .ipynb with your changes.\n\nquarto convert tutorials/Data_Discovery__CMR-STAC_API.qmd \n\nQuarto will consider the .qmd book chapter and try to render it. To avoid this, by hand you can prefix the filename with an underscore: before you push: _Data_Discovery__CMR-STAC_API.qmd (do this by hand for now, we’ll iterate further)\nFinally, commit and push your review!"
  },
  {
    "objectID": "contributing/workflow.html#code-review",
    "href": "contributing/workflow.html#code-review",
    "title": "Workflow",
    "section": "Code Review",
    "text": "Code Review\nUpcoming."
  },
  {
    "objectID": "contributing/workflow.html#troubleshooting",
    "href": "contributing/workflow.html#troubleshooting",
    "title": "Workflow",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nError: AddrInUse\nERROR: AddrInUse: Address already in use (os error 48)\nThis error is because you had more than one instance of quarto serve going in your session. So close other command line instances that are running and try again. (If you use the R package and do quarto_serve() it will automatically make sure you only ever have 1 instance.)\n\n\nLeave/exit a virtual environment\nIn your Command Line Shell, if you want to leave your virtual environment, the command is:\ndeactivate\nThe way you tell that you are in a virtual environment: it’s named in parentheses at the beginning of your prompt:\n(.venv) (base) JLos-Macbook-Pro:earthdata-cloud-cookbook lowndes$ deactivate\n(base) JLos-Macbook-Pro:earthdata-cloud-cookbook lowndes$"
  }
]