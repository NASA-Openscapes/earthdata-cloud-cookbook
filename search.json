[
  {
    "objectID": "appendix/authentication.html",
    "href": "appendix/authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. The following code creates a hidden .netrc file (_netrc for Windows OS) with Earthdata login credentials in your home directory. This file is needed to access NASA Earthdata assets from scripting environments like Python and R.\n\nPythonR\n\n\nWe recommend authentication with a few lines of code using earthdata Python package. Please check the tutorial on how to utilize earthdata package.\nAuthentication is also possible without the earthdata package; please review this 2021 Cloud Hackathon tutorial for more details.\n\n\nFor authentication in R, please run the code below:\n\n\n\n[R code]\n\n# Required packages for this script\npackages = c('sys', 'getPass')\n\n# Identify missing (not installed) packages\nnew.packages = packages[!(packages %in% installed.packages()[,\"Package\"])]\n\n# Install missing packages\nif(length(new.packages)) install.packages(new.packages, repos='http://cran.rstudio.com/')\n\n# Load packages into R\nlibrary(sys)\nlibrary(getPass)\n\n# Determine OS and associated netrc file \nnetrc_type <- if(.Platform$OS.type == \"windows\") \"_netrc\" else \".netrc\"    # Windows OS uses _netrc file\n\n# Specify path to user profile \nup <- file.path(Sys.getenv(\"USERPROFILE\"))                            # Retrieve user directory (for netrc file)\n\n# Below, HOME and Userprofile directories are set.  \n\nif (up == \"\") {\n    up <- Sys.getenv(\"HOME\") \n    Sys.setenv(\"userprofile\" = up)\n    if (up == \"\") {\n        cat('USERPROFILE/HOME directories need to be set up. Please type sys.setenv(\"HOME\" = \"YOURDIRECTORY\") or  sys.setenv(\"USERPROFILE\" = \"YOURDIRECTORY\") in your console and type your USERPROFILE/HOME direcory instead of \"YOURDIRECTORY\". Next, run the code chunk again.')\n    }\n} else {Sys.setenv(\"HOME\" = up)}        \n\nnetrc_path <- file.path(up, netrc_type, fsep = .Platform$file.sep)    # Path to netrc file\n\n# Create a netrc file if one does not exist already\nif (file.exists(netrc_path) == FALSE || grepl(\"urs.earthdata.nasa.gov\", readLines(netrc_path)) == FALSE) {\n    netrc_conn <- file(netrc_path)\n    \n    # User will be prompted for NASA Earthdata Login Username and Password below\n    writeLines(c(\"machine urs.earthdata.nasa.gov\",\n                 sprintf(\"login %s\", getPass(msg = \"Enter NASA Earthdata Login Username \\n (An account can be Created at urs.earthdata.nasa.gov):\")),\n                 sprintf(\"password %s\", getPass(msg = \"Enter NASA Earthdata Login Password:\"))), netrc_conn)\n    close(netrc_conn)\n}else{\n    i <- 0 \n    for (f in readLines(netrc_path)){\n        i <- i + 1\n        if (f ==\"machine urs.earthdata.nasa.gov\"){\n            username <- strsplit(readLines(netrc_path)[i+1], \" \")[[1]][2]\n            un <- getPass(msg = paste0(\"Is your NASA Earthdata Login Username: \", username, \"\\n\\n Type yes or no.\"))\n            if (tolower(un) == 'yes'){\n                tx <- gsub(readLines(netrc_path)[i+2], sprintf(\"password %s\", getPass(msg = \"Enter NASA Earthdata Login Password:\")), readLines(netrc_path))\n                writeLines(tx, netrc_path)\n                rm(username, un, tx, f, i)\n            }else{\n                user <- gsub(readLines(netrc_path)[i+1], sprintf(\"login %s\", getPass(msg = \"Enter NASA Earthdata Login Username:\")), readLines(netrc_path))\n                tx <- gsub(readLines(netrc_path)[i+2], sprintf(\"password %s\", getPass(msg = \"Enter NASA Earthdata Login Password:\")), readLines(netrc_path))\n                writeLines(tx, netrc_path)\n                rm(username, un, user, tx, f, i)\n            \n            }\n            break\n        }\n    }\n}"
  },
  {
    "objectID": "appendix/authentication.html#aws-credentials",
    "href": "appendix/authentication.html#aws-credentials",
    "title": "Authentication",
    "section": "AWS Credentials",
    "text": "AWS Credentials\ncoming soon"
  },
  {
    "objectID": "appendix/index.html",
    "href": "appendix/index.html",
    "title": "Appendix",
    "section": "",
    "text": "Extra resources for Earthdata Cloud."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html",
    "href": "in-development/CMR-STAC-Search.html",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "",
    "text": "This tutorial demonstrates how to interact with CMR-STAC in R.\nThis tutorial will teach you how to navigate and explore NASA’s Common Metadata Repository (CMR) SpatioTemporal Asset Catalog (STAC) to learn about the datasets available through LP DAAC Cumulus cloud archive."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#a.-what-is-stac",
    "href": "in-development/CMR-STAC-Search.html#a.-what-is-stac",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "1a. What is STAC?",
    "text": "1a. What is STAC?\nSTAC is short for Spatiotemporal Asset Catalog, a series of specifications that provide a common language for interpreting geospatial information in order to standardize indexing and discovery of spatiotemporal assets (files containing information about the Earth across space and time).\nThere are four specifications that work both independently and together:\n\nSTAC Catalog\nSTAC Collection\nSTAC Item\n\nSTAC API specification builds on top of the three core specifications mentioned above. All these specifications are intended to be used together, yet are designed in a way that each piece is small, self-contained, and reusable in other contexts."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#b.-what-is-the-cmr-stac-api",
    "href": "in-development/CMR-STAC-Search.html#b.-what-is-the-cmr-stac-api",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "1b. What is the CMR-STAC API?",
    "text": "1b. What is the CMR-STAC API?\nThe Common Metadata Repository (CMR) is a metadata system that catalogs Earth Science data and associated metadata records. NASA’s CMR-STAC Application Programming Interface (API) is a translation API for STAC users who want to access and search through CMR’s vast metadata holdings using STAC keywords."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#a.-cmr-stac-api",
    "href": "in-development/CMR-STAC-Search.html#a.-cmr-stac-api",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "2a. CMR-STAC API",
    "text": "2a. CMR-STAC API\nThe CMR-STAC API contains endpoints that enable the querying of STAC items.\nAssign the CMR-STAC URL to a static variable.\n\nCMR_STAC_URL <- 'https://cmr.earthdata.nasa.gov/stac/'\n\nConnect to the CMR-STAC landing page which contains all the available data providers and their STAC endpoint. In this tutorial, the httr package is used to navigate CMR-STAC API.\n\ncmr_cat <- httr::GET(CMR_STAC_URL) %>%          # Request and retrieve the info from CMR-STAC URL\n  httr::content()         \ncat('You are using',cmr_cat$title,'version',cmr_cat$stac_version,\".\", cmr_cat$description,sep=\" \")\n\nYou are using NASA CMR STAC Proxy version 1.0.0 . This is the landing page for CMR-STAC. Each provider link contains a STAC endpoint.\n\n\nHere, jsonlite is used to change the format of the content returned from our request and the DT package is used to make the returned information more readable. The providers’ names and URL links are found in the title and ‘href’ fields respectively.\n\ncmr_cat_links <- cmr_cat$links %>% \n  jsonlite::toJSON(auto_unbox = TRUE) %>% \n  jsonlite::fromJSON() %>% \n  as.data.frame()\nDT::datatable(cmr_cat_links)\n\n\n\n\n\n\nThe data frame above shows all the data providers with their associated STAC catalog endpoints. You will notice above that the CMR-STAC API contains many different endpoints–not just from NASA LP DAAC, but also contains endpoints for other NASA ESDIS DAACs. Use the title field to identify the data provider you are interested in. The data product used in this tutorial is hosted in the LP DAAC Cumulus Cloud space (LPCLOUD).\nAssign LPCLOUD to the provider variable and get this provider’s endpoint from the CMR catalog using the URL in Link field.\n\nprovider <- 'LPCLOUD'\nlpcloud_cat_link <- cmr_cat_links[which(cmr_cat_links$title == provider), 'href']\nlpcloud_cat_link\n\n[1] \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\""
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#b.-stac-catalog",
    "href": "in-development/CMR-STAC-Search.html#b.-stac-catalog",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "2b. STAC Catalog",
    "text": "2b. STAC Catalog\nSTAC Catalog Contains a JSON file of links that organize all the available collections. Below, connect to the LPCLOUD STAC Catalog endpoint using httr package and print the information contained in the Catalog.\n\nlpcloud_cat <- httr::GET(lpcloud_cat_link) %>% \n  httr::content()\n\nlpcloud_cat <- lpcloud_cat %>% \n  jsonlite::toJSON(auto_unbox = TRUE) %>% \n  jsonlite::fromJSON() \n\nDT::datatable(lpcloud_cat$links)\n\n\n\n\n\n\nLPCLOUD STAC catalog includes URL links to the root, collections, search, and child STAC Catalogs. The data frame above also shows the available collections in the LPCLOUD catalog."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#c.-stac-collection",
    "href": "in-development/CMR-STAC-Search.html#c.-stac-collection",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "2c. STAC Collection",
    "text": "2c. STAC Collection\nSTAC Collection is extension of STAC Catalog containing additional information that describe the STAC Items in that Collection.\nGet the URL link to the STAC Collections.\n\nlpcloud_col_link <- lpcloud_cat$links[which(lpcloud_cat$links$rel == 'collections'),'href']\nlpcloud_col_link\n\n[1] \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections\"\n\n\nNext, get the content describing the collections within LPCLOUD Catalog. Important information such as data collection ID, title, description, and links to collection endpoints are provided here.\n\nlpcloud_collection <- httr::GET(lpcloud_col_link) %>% \n  httr::content() \n\nlpcloud_collection <- lpcloud_collection %>% \n  jsonlite::toJSON(auto_unbox = TRUE, pretty = TRUE)\n\nPrint the collections within LPCLOUD STAC catalog.\n\nlpcloud_collection_df <- jsonlite::fromJSON(lpcloud_collection)$collections\nlpcloud_collection_df$id\n\n [1] \"ASTGTM.v003\"       \"ECO_L1B_ATT.v002\"  \"ECO_L2_CLOUD.v002\"\n [4] \"ECO_L1B_GEO.v002\"  \"ECO_L2_LSTE.v002\"  \"ECO_L1B_RAD.v002\" \n [7] \"ECO_L2T_LSTE.v002\" \"EMITL1BRAD.v001\"   \"EMITL2ARFL.v001\"  \n[10] \"HLSL30.v2.0\"      \n\n\nIn CMR, Collection ID is used to query by a specific product, so be sure to save the ID for a collection you are interested in. For instance, the Collection ID for ASTER Global Digital Elevation Model V003 is ASTGTM.v003. Note that the “id” shortname is in the format: productshortname.vVVV (where VVV = product version).\nHere, get the URL link to the ASTGTM.v003 STAC Collection. If you are interested in querying a different LPCLOUD product, swap out the shortname to assign to the collection variable below.\n\ncollection <- 'ASTGTM.v003'    # USER INPUT\ncol_links <- lpcloud_collection_df$links[which(lpcloud_collection_df$id == collection)] %>% \n  as.data.frame()\n\nastgtm_URL <- col_links[which(col_links$rel == 'self'), 'href']\nastgtm_URL\n\n[1] \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\"\n\n\nThe STAC Collection metadata for any collection contains metadata and information that is applicable to every STAC Item and asset(s) that it contains. Get the content of the ASTGTM.v003 collection URL and print the collection description.\n\nastgtm_collection <- httr::GET(astgtm_URL) %>% \n  httr::content()\n\nastgtm_collection <- astgtm_collection %>% \n  jsonlite::toJSON(auto_unbox = TRUE) %>% \n  jsonlite::fromJSON()\n\ncat(astgtm_collection$description)\n\nThe ASTER Global Digital Elevation Model (GDEM) Version 3 (ASTGTM) provides a global digital elevation model (DEM) of land areas on Earth at a spatial resolution of 1 arc second (approximately 30 meter horizontal posting at the equator).\n\nThe development of the ASTER GDEM data products is a collaborative effort between National Aeronautics and Space Administration (NASA) and Japan’s Ministry of Economy, Trade, and Industry (METI). The ASTER GDEM data products are created by the Sensor Information Laboratory Corporation (SILC) in Tokyo. \n\nThe ASTER GDEM Version 3 data product was created from the automated processing of the entire ASTER Level 1A (https://doi.org/10.5067/ASTER/AST_L1A.003) archive of scenes acquired between March 1, 2000, and November 30, 2013. Stereo correlation was used to produce over one million individual scene based ASTER DEMs, to which cloud masking was applied. All cloud screened DEMs and non-cloud screened DEMs were stacked. Residual bad values and outliers were removed. In areas with limited data stacking, several existing reference DEMs were used to supplement ASTER data to correct for residual anomalies. Selected data were averaged to create final pixel values before partitioning the data into 1 degree latitude by 1 degree longitude tiles with a one pixel overlap. To correct elevation values of water body surfaces, the ASTER Global Water Bodies Database (ASTWBD) (https://doi.org/10.5067/ASTER/ASTWBD.001) Version 1 data product was also generated. \n\nThe geographic coverage of the ASTER GDEM extends from 83° North to 83° South. Each tile is distributed in GeoTIFF format and projected on the 1984 World Geodetic System (WGS84)/1996 Earth Gravitational Model (EGM96) geoid. Each of the 22,912 tiles in the collection contain at least 0.01% land area. \n\nProvided in the ASTER GDEM product are layers for DEM and number of scenes (NUM). The NUM layer indicates the number of scenes that were processed for each pixel and the source of the data.\n\nWhile the ASTER GDEM Version 3 data products offer substantial improvements over Version 2, users are advised that the products still may contain anomalies and artifacts that will reduce its usability for certain applications. \n\nImprovements/Changes from Previous Versions \n• Expansion of acquisition coverage to increase the amount of cloud-free input scenes from about 1.5 million in Version 2 to about 1.88 million scenes in Version 3.\n• Separation of rivers from lakes in the water body processing. \n• Minimum water body detection size decreased from 1 km2 to 0.2 km2. \n\n\nWe can also get the spatial and temporal extent information. Below, we can see this collection has a global spatial extent. ASTER GDEM is a single, static dataset that incorporates observation from March 2000 to November 2013.\n\nastgtm_collection$extent %>% \n  jsonlite::toJSON(auto_unbox = TRUE)\n\n{\"spatial\":{\"bbox\":[[-180,-83,180,82]]},\"temporal\":{\"interval\":[[\"2000-03-01T00:00:00.000Z\",\"2013-11-30T23:59:59.999Z\"]]}} \n\n\nSTAC collection also includes useful links. You can visit all the items within this collection using the Items URL.\n\nDT::datatable(astgtm_collection$links)\n\n\n\n\n\n\nGet the URL to the ASTGTM.v003 Items.\n\nitems_url <- astgtm_collection$links [which(astgtm_collection$links$rel == 'items'), 'href']\nitems_url\n\n[1] \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003/items\""
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#d.-stac-item",
    "href": "in-development/CMR-STAC-Search.html#d.-stac-item",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "2d. STAC Item",
    "text": "2d. STAC Item\nSTAC Item represents data and metadata assets that are spatiotemporally coincident. Below, query the STAC Items within the ASTGTM.v003 STAC Collection and print the first item in the collection.\n\nastgtm_items <- httr::GET(items_url) %>% \n  httr::content(as = \"text\") %>%  \n  jsonlite::fromJSON()\n\nF1 <- astgtm_items$features[1,] %>% \n  jsonlite::toJSON(auto_unbox = TRUE, pretty = TRUE)\nF1\n\n[\n  {\n    \"type\": \"Feature\",\n    \"id\": \"ASTGTMV003_N03E008\",\n    \"stac_version\": \"1.0.0\",\n    \"stac_extensions\": [],\n    \"collection\": \"ASTGTM.v003\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        [\n          [7.9999, 2.9999],\n          [9.0001, 2.9999],\n          [9.0001, 4.0001],\n          [7.9999, 4.0001],\n          [7.9999, 2.9999]\n        ]\n      ]\n    },\n    \"bbox\": [7.9999, 2.9999, 9.0001, 4.0001],\n    \"links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003/items/ASTGTMV003_N03E008\"\n      },\n      {\n        \"rel\": \"parent\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\"\n      },\n      {\n        \"rel\": \"collection\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\"\n      },\n      {\n        \"rel\": \"root\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/\"\n      },\n      {\n        \"rel\": \"provider\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\"\n      },\n      {\n        \"rel\": \"via\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1716133754-LPCLOUD.json\"\n      },\n      {\n        \"rel\": \"via\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1716133754-LPCLOUD.umm_json\"\n      }\n    ],\n    \"properties\": {\n      \"datetime\": \"2000-03-01T00:00:00.000Z\",\n      \"start_datetime\": \"2000-03-01T00:00:00.000Z\",\n      \"end_datetime\": \"2013-11-30T23:59:59.000Z\"\n    },\n    \"assets\": {\n      \"003/ASTGTMV003_N03E008_dem\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E008_dem.tif\",\n        \"title\": \"Download ASTGTMV003_N03E008_dem.tif\"\n      },\n      \"003/ASTGTMV003_N03E008_num\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E008_num.tif\",\n        \"title\": \"Download ASTGTMV003_N03E008_num.tif\"\n      },\n      \"browse\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-public/ASTGTM.003/ASTGTMV003_N03E008.1.jpg\",\n        \"type\": \"image/jpeg\",\n        \"title\": \"Download ASTGTMV003_N03E008.1.jpg\"\n      },\n      \"metadata\": {\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1716133754-LPCLOUD.xml\",\n        \"type\": \"application/xml\"\n      },\n      \"003/ASTGTMV003_N02E022_dem\": {},\n      \"003/ASTGTMV003_N02E022_num\": {},\n      \"003/ASTGTMV003_N00W065_dem\": {},\n      \"003/ASTGTMV003_N00W065_num\": {},\n      \"003/ASTGTMV003_N01E009_dem\": {},\n      \"003/ASTGTMV003_N01E009_num\": {},\n      \"003/ASTGTMV003_N02E009_dem\": {},\n      \"003/ASTGTMV003_N02E009_num\": {},\n      \"003/ASTGTMV003_N03E021_dem\": {},\n      \"003/ASTGTMV003_N03E021_num\": {},\n      \"003/ASTGTMV003_N01E021_dem\": {},\n      \"003/ASTGTMV003_N01E021_num\": {},\n      \"003/ASTGTMV003_N01E042_dem\": {},\n      \"003/ASTGTMV003_N01E042_num\": {},\n      \"003/ASTGTMV003_N01W069_dem\": {},\n      \"003/ASTGTMV003_N01W069_num\": {},\n      \"003/ASTGTMV003_N01W080_dem\": {},\n      \"003/ASTGTMV003_N01W080_num\": {}\n    }\n  }\n] \n\n\nNotice that the number of items matching our request is far more than what is returned.\n\ncat(astgtm_items$context$matched, 'items matched your request but', astgtm_items$context$returned, 'items are returned.')\n\n22912 items matched your request but 10 items are returned.\n\n\nThis is because the return is paginated. The STAC API, by default, returns the first 10 records. To explore more items, you can add ?page=n (in which n is the page number (i.e. ?page=2)) to the URL link and submit another request. Below, request a query to return records on the second page.\n\npage_2_url <- paste0(items_url, '?page=2')\n\nastgtm_page2_items <- httr::GET(page_2_url) %>% \n  httr::content(as = \"text\") %>%  \n  jsonlite::fromJSON()\n\nastgtm_page2_items$features[1,] %>% \n  jsonlite::toJSON(auto_unbox = TRUE, pretty = TRUE)\n\n[\n  {\n    \"type\": \"Feature\",\n    \"id\": \"ASTGTMV003_N03E042\",\n    \"stac_version\": \"1.0.0\",\n    \"stac_extensions\": [],\n    \"collection\": \"ASTGTM.v003\",\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        [\n          [41.9999, 2.9999],\n          [43.0001, 2.9999],\n          [43.0001, 4.0001],\n          [41.9999, 4.0001],\n          [41.9999, 2.9999]\n        ]\n      ]\n    },\n    \"bbox\": [41.9999, 2.9999, 43.0001, 4.0001],\n    \"links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003/items/ASTGTMV003_N03E042\"\n      },\n      {\n        \"rel\": \"parent\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\"\n      },\n      {\n        \"rel\": \"collection\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/ASTGTM.v003\"\n      },\n      {\n        \"rel\": \"root\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/\"\n      },\n      {\n        \"rel\": \"provider\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\"\n      },\n      {\n        \"rel\": \"via\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1726373735-LPCLOUD.json\"\n      },\n      {\n        \"rel\": \"via\",\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1726373735-LPCLOUD.umm_json\"\n      }\n    ],\n    \"properties\": {\n      \"datetime\": \"2000-03-01T00:00:00.000Z\",\n      \"start_datetime\": \"2000-03-01T00:00:00.000Z\",\n      \"end_datetime\": \"2013-11-30T23:59:59.000Z\"\n    },\n    \"assets\": {\n      \"003/ASTGTMV003_N03E042_dem\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E042_dem.tif\",\n        \"title\": \"Download ASTGTMV003_N03E042_dem.tif\"\n      },\n      \"003/ASTGTMV003_N03E042_num\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E042_num.tif\",\n        \"title\": \"Download ASTGTMV003_N03E042_num.tif\"\n      },\n      \"browse\": {\n        \"href\": \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-public/ASTGTM.003/ASTGTMV003_N03E042.1.jpg\",\n        \"type\": \"image/jpeg\",\n        \"title\": \"Download ASTGTMV003_N03E042.1.jpg\"\n      },\n      \"metadata\": {\n        \"href\": \"https://cmr.earthdata.nasa.gov/search/concepts/G1726373735-LPCLOUD.xml\",\n        \"type\": \"application/xml\"\n      },\n      \"003/ASTGTMV003_N00W061_dem\": {},\n      \"003/ASTGTMV003_N00W061_num\": {},\n      \"003/ASTGTMV003_N02W066_dem\": {},\n      \"003/ASTGTMV003_N02W066_num\": {},\n      \"003/ASTGTMV003_N02W069_dem\": {},\n      \"003/ASTGTMV003_N02W069_num\": {},\n      \"003/ASTGTMV003_N01E022_dem\": {},\n      \"003/ASTGTMV003_N01E022_num\": {},\n      \"003/ASTGTMV003_N01E026_dem\": {},\n      \"003/ASTGTMV003_N01E026_num\": {},\n      \"003/ASTGTMV003_N02W064_dem\": {},\n      \"003/ASTGTMV003_N02W064_num\": {},\n      \"003/ASTGTMV003_N01W064_dem\": {},\n      \"003/ASTGTMV003_N01W064_num\": {},\n      \"003/ASTGTMV003_N01E027_dem\": {},\n      \"003/ASTGTMV003_N01E027_num\": {},\n      \"003/ASTGTMV003_N00E006_dem\": {},\n      \"003/ASTGTMV003_N00E006_num\": {}\n    }\n  }\n]"
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#e.-assets",
    "href": "in-development/CMR-STAC-Search.html#e.-assets",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "2e. Assets",
    "text": "2e. Assets\nThe STAC Item ID (CMR Granule ID) is the unique identifier assigned to each granule within a data collection. Within each STAC Item are assets, which include the downloadable and streamable URL to data files along with other asset objects. Below, the first Granule ID is used to get the downloadable data file.\n\nitems_df <- jsonlite::fromJSON(F1) \nitem <- items_df$assets            # Get the assets for the first Item\nassets <- purrr::map_df(items_df$assets, data.frame, .id = 'asset')\nassets\n\n                        asset\n1  003/ASTGTMV003_N03E008_dem\n2  003/ASTGTMV003_N03E008_num\n3                      browse\n4                    metadata\n5  003/ASTGTMV003_N02E022_dem\n6  003/ASTGTMV003_N02E022_num\n7  003/ASTGTMV003_N00W065_dem\n8  003/ASTGTMV003_N00W065_num\n9  003/ASTGTMV003_N01E009_dem\n10 003/ASTGTMV003_N01E009_num\n11 003/ASTGTMV003_N02E009_dem\n12 003/ASTGTMV003_N02E009_num\n13 003/ASTGTMV003_N03E021_dem\n14 003/ASTGTMV003_N03E021_num\n15 003/ASTGTMV003_N01E021_dem\n16 003/ASTGTMV003_N01E021_num\n17 003/ASTGTMV003_N01E042_dem\n18 003/ASTGTMV003_N01E042_num\n19 003/ASTGTMV003_N01W069_dem\n20 003/ASTGTMV003_N01W069_num\n21 003/ASTGTMV003_N01W080_dem\n22 003/ASTGTMV003_N01W080_num\n                                                                                                  href\n1  https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E008_dem.tif\n2  https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/ASTGTM.003/ASTGTMV003_N03E008_num.tif\n3       https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-public/ASTGTM.003/ASTGTMV003_N03E008.1.jpg\n4                               https://cmr.earthdata.nasa.gov/search/concepts/G1716133754-LPCLOUD.xml\n5                                                                                                 <NA>\n6                                                                                                 <NA>\n7                                                                                                 <NA>\n8                                                                                                 <NA>\n9                                                                                                 <NA>\n10                                                                                                <NA>\n11                                                                                                <NA>\n12                                                                                                <NA>\n13                                                                                                <NA>\n14                                                                                                <NA>\n15                                                                                                <NA>\n16                                                                                                <NA>\n17                                                                                                <NA>\n18                                                                                                <NA>\n19                                                                                                <NA>\n20                                                                                                <NA>\n21                                                                                                <NA>\n22                                                                                                <NA>\n                                 title            type\n1  Download ASTGTMV003_N03E008_dem.tif            <NA>\n2  Download ASTGTMV003_N03E008_num.tif            <NA>\n3    Download ASTGTMV003_N03E008.1.jpg      image/jpeg\n4                                 <NA> application/xml\n5                                 <NA>            <NA>\n6                                 <NA>            <NA>\n7                                 <NA>            <NA>\n8                                 <NA>            <NA>\n9                                 <NA>            <NA>\n10                                <NA>            <NA>\n11                                <NA>            <NA>\n12                                <NA>            <NA>\n13                                <NA>            <NA>\n14                                <NA>            <NA>\n15                                <NA>            <NA>\n16                                <NA>            <NA>\n17                                <NA>            <NA>\n18                                <NA>            <NA>\n19                                <NA>            <NA>\n20                                <NA>            <NA>\n21                                <NA>            <NA>\n22                                <NA>            <NA>\n\n\nThe links found in the href field can be used to download each specific asset."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#a.-define-search-parameters",
    "href": "in-development/CMR-STAC-Search.html#a.-define-search-parameters",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "3a. Define Search Parameters",
    "text": "3a. Define Search Parameters\nNext, define the search parameters. - Query by collection: Collection IDs should be defined as a list. - Spatial Querying via Bounding Box: A bounding box including the coordinates of LL (lower left) and UR (upper right) respectively. - Temporal Querying: Time period of interest should be specified as YYYY-MM-DDTHH:MM:SSZ/YYYY-MM-DDTHH:MM:SSZ.\n\ncollections <- list('ASTGTM.v003')\ndatetime <- '2000-01-01T00:00:00Z/2001-01-31T23:59:59Z'   #YYYY-MM-DDTHH:MM:SSZ/YYYY-MM-DDTHH:MM:SSZ\nbbox <- '-122.0622682571411,39.897234301806,-122.04918980598451,39.91309383703065' # LL and UR Coordinates\n\nCreate search body object from our search parameters.\n\nbody <- list(limit=100,\n             datetime=datetime,\n             bbox= bbox,\n             collections= collections)\n\nNotice the limit parameter in the body object. This parameter allows us to adjust the number of records returned during a request (default = 10)."
  },
  {
    "objectID": "in-development/CMR-STAC-Search.html#b.-search-for-items",
    "href": "in-development/CMR-STAC-Search.html#b.-search-for-items",
    "title": "Getting Started with NASA’s CMR-STAC API in R",
    "section": "3b. Search for Items",
    "text": "3b. Search for Items\nNext, submit a query to STAC Search endpoint using a POST request.\n\nsearch_req <- httr::POST(lpcloud_search_URL[1], body = body, encode = \"json\") %>% \n  httr::content(as = \"text\") %>%  \n  jsonlite::fromJSON()\n\nnames(search_req)\n\n[1] \"type\"           \"stac_version\"   \"numberMatched\"  \"numberReturned\"\n[5] \"features\"       \"links\"          \"context\"       \n\n\nLet’s see how many STAC Items, or granules, intersect with our search parameters.\n\ncat(\"The number of STAC Items matched your query is \", search_req$numberMatched, 'and ',  search_req$numberReturned, 'Items are returned.')\n\nThe number of STAC Items matched your query is  1 and  1 Items are returned.\n\n\nNext, create a data frame with the returned information, including granule ID, datetime properties, and the downloadable URL links to the assets.\n\ngranule_list <- list()\n\nn <- 1\nfor(row in row.names(search_req$features)){\n  f <- search_req$features[row,]\n  for (b in f$assets){\n    df <- data.frame(Collection = f$collection,\n                     Granule_ID = f$id,\n                     Datetime = f$properties$datetime,\n                     Asset_Link = b$href, stringsAsFactors=FALSE)\n    granule_list[[n]] <- df\n    n <- n + 1\n  }\n}\n\nsearch_df <- do.call(rbind, granule_list)\nDT::datatable(search_df)\n\n\n\n\n\n\nThe CMR-STAC Search endpoint allows user to quickly search for STAC Items that meet their specific spatial, temporal, and data product requirements. Now that you learned how to navigate and explore the CMR-STAC catalog, check out the HLS_tutorial to learn how to interact with HLS data specifically.\n\n\nContact Information\nMaterial written by Mahsa Jami1 and Aaron Friesz1\nContact: LPDAAC@usgs.gov\nVoice: +1-866-573-3222\nOrganization: Land Processes Distributed Active Archive Center (LP DAAC)\nWebsite: https://lpdaac.usgs.gov/ \nDate last modified: 09-13-2021\n1 KBR, Inc., contractor to the U.S. Geological Survey, Earth Resources Observation and Science (EROS) Center, Sioux Falls, South Dakota, USA. Work performed under USGS contract G0121D0001 for LP DAAC2.\n2 LP DAAC Work performed under NASA contract NNG14HH33I."
  },
  {
    "objectID": "in-development/index.html",
    "href": "in-development/index.html",
    "title": "In Development",
    "section": "",
    "text": "These lessons are in development; as they are developed further and tested they will move into other parts of the Cookbook!"
  },
  {
    "objectID": "in-development/matlab.html",
    "href": "in-development/matlab.html",
    "title": "matlab",
    "section": "",
    "text": "This chapter is for research teams currently working in Matlab with NASA EarthData and wanting to take advantage of doing analysis in the Cloud. Our initial focus is on Amazon Web Services (AWS). For general, background on the Cloud and NASA Earthdata’s migration to the Cloud, checkout earlier chapters of the cookbook [TO DO: Add a link and specific reference].\n\n\n\nMatlab License - You must have access to a Matlab license that allows for access to the cloud. To check your license, in the matlab command line enter:\nver -support\nAWS Account - For the current experiments, we will access the AWS console, so you need an AWS account. It is free to set up, but will require a credit card linked to the account. https://aws.amazon.com/\nAWS Region: We are working in AWS US-West-2 because NASA Earthdata is hosted in US-West-2. If there is an option to pick an AWS region, pick US-West-2.\nGithub Account - If you want to use Github as part of your workflow and don’t already have an account, create a Github account: https://github.com/\nNASA Earthdata login - Create an account here: https://urs.earthdata.nasa.gov/users/new\nMicrosoft Remote Desktop - When we spin up the AWS virtual machine with Matlab, we will need to have a remote desktop option. These how-to’s were done on a mac and we tested the free Microsoft Remote Desktop. Download for macs\n\n\n\n\nThis isn’t included in the numbered prereq list above because it is a bit more involved than creating an account or knowing what region we work in. You need to create an SSH Key Pair in the region you want to work in. This is a one-time step that you won’t need to do each time you launch the stack.\n\nLog in to AWS\nIn the search box enter, ‘Create AWS Key Pair.’ Under features choose ‘Key Pairs’ (AWS help)\n\nCheck that the top bar says, ‘Oregon’ (AKA - US-West-2) and if not, click that down arrow to choose US-West-2. Then click the orange ‘Create key pair’ button.\n\nTroubleshooting tip: If you create the key outside of the region you want to work in, it will not show up when you launch the stack below.\nOn the form - give your key a name, choose the RSA and PEM options (these should be the defaults.)\n\nOk - now we are ready to start!\n\n\n\nNote: The first time I launched the AWS Stack it seemed to take for-ever. I thought “how could I possibly need to do this every time I want to use Matlab in the cloud?” It does speed up, eventually it get’s a bit faster. I also have learned to plan a bit better - if I know I want to do some work, I get the launched, have coffee, and when I come back it’s ready to roll.\n\nFrom this Matlab Github page click the release for 2022a under deployment steps.\nThis brings up a list of Matlab on Amazon Web Services (Linux VM). Choose & click the ‘launch stack’ link for US-West-2.\n\nThis opens the ‘Quick create stack’ form based on the Matlab template. That means that when you launch this stack it will come with Matlab on the desktop. Fill out the form to create the AWS stack:\n\nGive the stack a name like ‘matlab-test’\nKeep the pre-filled options the same for now.\nRemote Access:\n\n“Allow Connections From:” You will need to know your IP address. You can google, “what’s my IP address?”\nEnter your IP address followed by a /32 like this -> [my.IP.address/32]\nIn the SSH Key Pair - the key pair you created above should show up in the drop down. If it doesn’t show up, see the troubleshooting tip.\nPick a remote password. This is not your AWS password or your Github password, this is the password that you will use to login with the microsoft remote desktop (username: ubuntu)\n\nNetwork configuration\n\nThere is one VPC option - choose that\nFor subnet - I pick the first one and it works. So pick the first option.\n\nAutoshutdown hasn’t worked for me so far, so for now I leave this set as never and delete the stack when I am finished.\nCheck the box that “I acknowledge that AWS CloudFormation might create IAM resources.”\nClick ‘Create stack’\nWait…. [~ 10 minutes]\n\nYou can check the status by clicking the refresh button on the right corner\n\n\n\n\n\n\nOnce the stack is created it will say ‘Create_complete’ on the left side.\n\nClick the outputs tab and copy the value text. It will start with ‘ec2-…’\nOpen Microsoft Remote Desktop\n\nClick the + to add a PC\nPaste the value text as the PC Name\nClick on the grey box of your new computer in the remote desktop window\nA login will pop up\n\n\nUsername is ubuntu\nPassword is the password you set in 3.3.3 above in the section on ‘Creating AWS Stack’\n\nA certificate message will pop up - say ok\nThe desktop will launch\n\nWait … [~2 mins]\n\n\n\n\n\nClick the Matlab icon on the remote desktop\n\nWait … [~4 mins]\nLogin with your Matlab credentials\nYou are in!\n\n\n\n\nThe general approach to access NASA Earthdata follows the Python tutorials. Direct S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\npodaac: https://archive.podaac.earthdata.nasa.gov/s3credentials\ngesdisc: https://data.gesdisc.earthdata.nasa.gov/s3credentials\nlpdaac: https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials\nornldaac: https://data.ornldaac.earthdata.nasa.gov/s3credentials\nghrcdaac: https://data.ghrc.earthdata.nasa.gov/s3credentials\n\nYou will need your EarthData login to access these links.\n\nSearch NASA Earthdata and find the S3 link you want to access [LINK TO TUTORIAL]\nSet AWS Environment Variables - Go to the link above for the Access key, secret access key and token.\nCopy and past those variables into the code below\nsetenv('AWS_ACCESS_KEY_ID', 'REPLACE WITH PODAAC ACCESS KEY');\nsetenv('AWS_SECRET_ACCESS_KEY', 'REPLACE WITH PODAAC SECRET KEY');\nsetenv('AWS_SESSION_TOKEN',  'REPLACE WITH PODAAC SESSION TOKEN');\nsetenv('AWS_DEFAULT_REGION', 'us-west-2');\nNOTE: These expire ever 30 mins or so and this step needs to be done. We are searching for a better method.\nIn Matlab on AWS only the HDF commands work\nFILE_NAME = 's3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20100619062008-JPL-L2P_GHRSST-SSTskin-MODIS_A-N-v02.0-fv01.0.nc';\nfile_id = H5F.open(FILE_NAME, 'H5F_ACC_RDONLY', 'H5P_DEFAULT');\nThis code works to read the file - Copy each section into the Matlab command\nNOTE: We need a way to find all variables in a given netcdf file. I used the python code to find variables and then brought it here.\nDATAFIELD_NAME='sea_surface_temperature_4um';\ndata_id = H5D.open(file_id, DATAFIELD_NAME);\ndata=H5D.read(data_id,'H5T_NATIVE_DOUBLE', 'H5S_ALL', 'H5S_ALL', 'H5P_DEFAULT');\n% Read units.\nATTRIBUTE = 'units';\nattr_id = H5A.open_name(data_id, ATTRIBUTE);\nunits = H5A.read(attr_id, 'H5ML_DEFAULT');\nH5A.close(attr_id);\n% Read long_name.\nATTRIBUTE = 'long_name';\nattr_id = H5A.open_name (data_id, ATTRIBUTE);\nlong_name=H5A.read (attr_id, 'H5ML_DEFAULT');\nH5A.close(attr_id);\n% Read the fill value.\nATTRIBUTE = '_FillValue';\nattr_id = H5A.open_name(data_id, ATTRIBUTE);\nfillvalue=H5A.read(attr_id, 'H5T_NATIVE_DOUBLE');\nH5A.close(attr_id);\n% Read latitude data.\nLAT_NAME='lat';\nlat_id=H5D.open(file_id, LAT_NAME);\nlat=H5D.read(lat_id, 'H5T_NATIVE_DOUBLE', 'H5S_ALL', 'H5S_ALL', 'H5P_DEFAULT');\n% Read longitude data.\nLON_NAME='lon';\nlon_id=H5D.open(file_id, LON_NAME);\nlon=H5D.read(lon_id, 'H5T_NATIVE_DOUBLE', 'H5S_ALL', 'H5S_ALL', 'H5P_DEFAULT');\n% Close and release resources.\nH5D.close(data_id);\nH5D.close(lat_id);\nH5D.close(lon_id);\nH5F.close(file_id);\n% Replace the fill value with NaN.\ndata(data==fillvalue) = NaN;\nCreate an image\ncontour(data);\n\n\n\n\n\nAfter each session you need to turn off the AWS Stack. If you forget this step and leave it running it is like keeping a computer on for the month. For the large instance it costs $0.5/day so it’s a few dollars a month.\n\nGo back to AWS\nSearch for stack\nClick on the name of your stack\nClick ‘Delete’\n\nConfirm the delete\n\n\nTo do:\n\nAdd Github & Matlab project instructions\nAlternative experiments to this stack - Octave in the 2i2c Jupyter hub or Matlab in the 2i2c Jupyter hub."
  },
  {
    "objectID": "in-development/earthdata-python-r-handoff.html",
    "href": "in-development/earthdata-python-r-handoff.html",
    "title": "earthdata: Python-R Handoff",
    "section": "",
    "text": "Create once, use often: using earthdata python package for NASA Earthdata authorization and identifying the s3 links (i.e. the locations where the data are stored on Amazon Web Services), then passing those python objects to R through Quarto for analysis by R folks. These notes are a work-in-progress by Julie and Luis and we’ll tidy them up as we develop them further.\nNote: this dream is currently not working but we are sharing our progress."
  },
  {
    "objectID": "in-development/earthdata-python-r-handoff.html#python-earthdata-package-for-auth-s3-links",
    "href": "in-development/earthdata-python-r-handoff.html#python-earthdata-package-for-auth-s3-links",
    "title": "earthdata: Python-R Handoff",
    "section": "Python: earthdata package for auth & s3 links",
    "text": "Python: earthdata package for auth & s3 links\nearthdata gets me the credentials, it gets me the links based on the queries.\nIn this example, the data we want is in the Cloud. For this examples we’re using this data we identified from the Earthdata Cloud Cookbook’s Multi-File_Direct_S3_Access_NetCDF_Example, and its short_name is 'ECCO_L4_SSH_05DEG_MONTHLY_V4R4'.\n\nIdentify the s3 links\nBelow is our query, pretending that that is the data and the bounding box we want.\n\n## import DataCollections class from earthdata library\nfrom earthdata import DataGranules\n\n## To find the concept_id from the shortname that we copied: \n# short_name = 'ECCO_L4_SSH_05DEG_MONTHLY_V4R4' \n# collection = DataCollections().short_name(short_name).get()\n# [c.concept_id() for c in collection] ## this returned 'C1990404799-POCLOUD'\n\n# Then we build a Query with spatiotemporal parameters. \nGranuleQuery = DataGranules().concept_id('C1990404799-POCLOUD').bounding_box(-134.7,58.9,-133.9,59.2)\n\n## We get the metadata records from CMR\ngranules = GranuleQuery.get()\n\n## Now it's time to open our data granules list. \ns3_links = [granule.data_links(access='direct') for granule in granules] \ns3_links[0]\n\nNote that files = Store(auth).open(granules) would work for Python users but open won’t work in the R world because it will create some kind of python file handlers from fsspec.\n\n\nGet the Cloud credentials\nPrerequesite: you’ll need a functioning .netrc here. earthdata expects interactivity and that did not work here with Quarto in the RStudio IDE (and it also did not work for Julie in Jupyter notebook (June 7 2022)). So, we followed the 2021-Cloud-Hackathon’s NASA_Earthdata_Authentication, copying and pasting and running that code in a Jupyter notebook. (remember to rm .netrc beforehand!)\nThen, with a nice .netrc file, the next step is to get Cloud credentials:\n\n## import the Auth class from the earthdata library\nfrom earthdata import Auth\n\nauth = Auth().login(strategy=\"netrc\")\ncredentials = auth.get_s3_credentials(cloud_provider = \"POCLOUD\") \n\nSo now we have the s3 links and the credentials to download the links, so now we can use the tutorial in R!!\nNotes\n\nLuis will update earthdata to automatically know the cloud provider so that you don’t have to specify for example POCLOUD vs PODAAC # credentials you actually don’t want to print your credentials, we were just checking that they worked\nThe resulting JSON dictionary is what we’ll export to R, and it will be valid for 1 hour. When I run into issues, I’ll say “why is this not working”, and it’s because it’s expired in 1 hour.\nWhen we want to identify the bucket level, we’ll need to remove the name of the file. For example:\n\n<s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_1992-01_ECCO_V4r4_latlon_0p50deg.nc> includes the filename\n<s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/> is only the bucket\n\nExpect to run into issues with listing the files in the bucket (because maybe something is restricted or maybe you can access files but not list everything that’s inside the bucket)"
  },
  {
    "objectID": "in-development/earthdata-python-r-handoff.html#r-data-access-from-s3-links",
    "href": "in-development/earthdata-python-r-handoff.html#r-data-access-from-s3-links",
    "title": "earthdata: Python-R Handoff",
    "section": "R: data access from s3 links!",
    "text": "R: data access from s3 links!\nAnd now I can switch to R, if R is my preferred language.\nThe blog post Using Amazon S3 with R by Danielle Navarro is hugely informative and describes how to use the aws.s3 R package.\nFirst load libraries:\n\nlibrary(dplyr)\nlibrary(readr)\nlibrary(purrr)\nlibrary(stringr)\nlibrary(tibble)\nlibrary(aws.s3) # install.packages(\"aws.s3\")\nlibrary(reticulate)\n\nTranslate credentials from python variables (created with earthdata above) to R variables using reticulate’s py$ syntax and purr’s pluck() to isolate a variable from a list:\n\n## translate credentials from python to R, map to dataframe\ncredentials_r_list <- py$credentials #YAY!\ncredentials_r <- purrr::map_df(credentials_r_list, print)\n\n## translate s3 links from python to R, create my_bucket\ns3_links_r_list <- py$s3_links\nmy_link_list <- s3_links_r_list[1] # let's just start with one\nmy_link_chr <- purrr:::map_chr(my_link_list, paste, collapse=\"\")\n#my_link <- as_tibble(my_link_chr)\n#my_link_split <- stringr::str_split(my_link, \"/\")\n#my_bucket <- str_c(\"s3://\", my_link_split[3], my_link_split[4])\nmy_bucket <- \"s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/\"\n\nFrom the aws.s3 documentation, set up system environment variables for AWS:\n\nSys.setenv(\"AWS_ACCESS_KEY_ID\" = credentials_r$accessKeyId,\n           \"AWS_SECRET_ACCESS_KEY\" = credentials_r$secretAccessKey,\n           \"AWS_DEFAULT_REGION\" = \"us-west-2\",\n           \"AWS_SESSION_TOKEN\" = credentials_r$sessionToken)\n\n\n# testing by hand: Luis\nSys.setenv(\"AWS_ACCESS_KEY_ID\" = \"ASIATNGJQBXBHRPIKFFB\",\n           \"AWS_SECRET_ACCESS_KEY\" = \"zbYP2fueNxLK/joDAcz678mkjjzP6fz4HUN131ID\",\n           \"AWS_DEFAULT_REGION\" = \"us-west-2\")\n\nFirst let’s test Danielle’s code to see if it runs. Note to Luis: the following only works when the Sys.setenv is not set:\n\nlibrary(aws.s3)\n\nbucket_exists(\n  bucket = \"s3://herbariumnsw-pds/\", \n  region = \"ap-southeast-2\"\n)\n\nClient error: (403) Forbidden\n\n\n[1] FALSE\nattr(,\"x-amz-bucket-region\")\n[1] \"ap-southeast-2\"\nattr(,\"x-amz-request-id\")\n[1] \"0FQ1R57F2VHGFPDF\"\nattr(,\"x-amz-id-2\")\n[1] \"N6RPTKPN3/H9tDuKNHM2ZAcChhkkn2WpfcTzhpxC3fUmiZdNEIiu1xJsQAvFSecYIuWZ28pchQW3sAPAdVU57Q==\"\nattr(,\"content-type\")\n[1] \"application/xml\"\nattr(,\"date\")\n[1] \"Thu, 07 Jul 2022 23:11:30 GMT\"\nattr(,\"server\")\n[1] \"AmazonS3\"\n\n\nNow, see if the PODAAC bucket exists:\n\naws.s3::bucket_exists(\n  bucket = \"s3://podaac-ops-cumulus-protected/\", \n  region = \"us-west-2\"\n)\n\nClient error: (403) Forbidden\n\n\n[1] FALSE\nattr(,\"x-amz-bucket-region\")\n[1] \"us-west-2\"\nattr(,\"x-amz-request-id\")\n[1] \"M4T3W1JZ93M08AZB\"\nattr(,\"x-amz-id-2\")\n[1] \"hvGLWqGCRB4lLf9pD8f67OsTDulSOgqd+yLWzUTRFz2tlLPVpxHr9mSREL0bQPVyo70j0hvJp+8=\"\nattr(,\"content-type\")\n[1] \"application/xml\"\nattr(,\"date\")\n[1] \"Thu, 07 Jul 2022 23:11:30 GMT\"\nattr(,\"server\")\n[1] \"AmazonS3\"\n\n\n\nherbarium_files <- get_bucket_df(\n  bucket = \"s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/\", \n  region = \"us-west-2\",\n  max = 20000\n) %>% \n  as_tibble()\n\nIf forbidden: - 1 hour expiration time - this bucket is not listable (or protected) (hopefully this error will be clear enough)\nIf you get the following error, it’s likely because your credentials have expired:\n\n\n\n\n\n\nImportant\n\n\n\nClient error: (403) Forbidden\n[1] FALSE\nattr(,\"x-amz-bucket-region\")\n[1] \"us-west-2\"\nattr(,\"x-amz-request-id\")\n[1] \"W2PQV030PDTGDD32\"\nattr(,\"x-amz-id-2\")\n[1] \"S8C0qzL1lAYLufzUupjqplyyS/3fWCKxIELk0OJLVHGzTOqlyhof+IPFYbaRUhmJwXQelfprYCU=\"\nattr(,\"content-type\")\n[1] \"application/xml\"\nattr(,\"date\")\n[1] \"Wed, 08 Jun 2022 03:11:16 GMT\"\nattr(,\"server\")\n[1] \"AmazonS3\""
  },
  {
    "objectID": "in-development/earthdata-python-r-handoff.html#dev-notes",
    "href": "in-development/earthdata-python-r-handoff.html#dev-notes",
    "title": "earthdata: Python-R Handoff",
    "section": "Dev notes",
    "text": "Dev notes\n\nChat with Andy May 26\nMaybe have a python script that takes arguments, compiled in a way that then in MatLab you can sys.admin that python script. Then he doesn’t need to know python\nOther approach would be MatLab to re-write earthdata in MatLab\nOur dream, revised: the code should be language-agnostic"
  },
  {
    "objectID": "in-development/earthdata-python-r-handoff.html#background",
    "href": "in-development/earthdata-python-r-handoff.html#background",
    "title": "earthdata: Python-R Handoff",
    "section": "Background",
    "text": "Background\nThis was Luis’ original example code, but it downloads data. The examples above access it in the cloud. From https://nasa-openscapes.github.io/earthdata-cloud-cookbook/examples/earthdata-access-demo.html\nfrom earthdata import Auth, DataGranules, Store\n\n# first we authenticate with NASA EDL\nauth = Auth().login(strategy=\"netrc\")\n\n# Then we build a Query with spatiotemporal parameters\nGranuleQuery = DataGranules().concept_id(\"C1575731655-LPDAAC_ECS\").bounding_box(-134.7,58.9,-133.9,59.2)\n\n# We get the metadata records from CMR\ngranules = GranuleQuery.get()\n\n# Now it{s time to download (or open) our data granules list with get()\nfiles = Store(auth).get(granules, local_path='./data')"
  },
  {
    "objectID": "how-tos/Earthdata_Cloud__Open-Science-Tutorial.html",
    "href": "how-tos/Earthdata_Cloud__Open-Science-Tutorial.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "Each of the following co-authors contributed to the following materials and code examples, as well as collaboration infrastructure for the NASA Earthdata Openscapes Project: * Julia S. Stewart Lowndes; Openscapes, NCEAS * Erin Robinson; Openscapes, Metadata Game Changers * Catalina M Oaida; NASA PO.DAAC, NASA Jet Propulsion Laboratory * Luis Alberto Lopez; NASA National Snow and Ice Data Center DAAC * Aaron Friesz; NASA Land Processes DAAC * Andrew P Barrett; NASA National Snow and Ice Data Center DAAC * Makhan Virdi; NASA ASDC DAAC * Jack McNelis; NASA PO.DAAC, NASA Jet Propulsion Laboratory\nAdditional credit to the entire NASA Earthdata Openscapes Project community, Patrick Quinn at Element84, and to2i2c for our Cloud computing infrastructure\n\n\n\n\nIntroduction to NASA Earthdata’s move to the cloud\n\nBackground and motivation\nEnabling Open Science via “Analysis-in-Place”\nResources for cloud adopters: NASA Earthdata Openscapes\n\nNASA Earthdata discovery and access in the cloud\n\nPart 1: Explore Earthdata cloud data availablity\nPart 2: Working with Cloud-Optimized GeoTIFFs using NASA’s Common Metadata Repository Spatio-Temporal Assett Catalog (CMR-STAC)\nPart 3: Working with Zarr-formatted data using NASA’s Harmony cloud transformation service\n\n\n\n\n\nThis notebook source code: update https://github.com/NASA-Openscapes/2021-Cloud-Workshop-AGU/tree/main/how-tos\nAlso available via online Quarto book: update https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/\n\n\n\n\n\n\n\n\nEOSDIS Data Archive\n\n\n\n\n\n \n\nNASA Distributed Active Archive Centers (DAACs) are continuing to migrate data to the Earthdata Cloud\n\nSupporting increased data volume as new, high-resolution remote sensing missions launch in the coming years\nData hosted via Amazon Web Services, or AWS\nDAACs continuing to support tools, services, and tutorial resources for our user communities\n\n\n\n\n\n\nReducing barriers to large-scale scientific research in the era of “big data”\nIncreasing community contributions with hands-on engagement\nPromoting reproducible and shareable workflows without relying on local storage systems\n\n\n\n\nOpen Data\n\n\n\n\n\n\n\n\nEarthdata Cloud Paradigm\n\n\n\n\n\nShow slide with 3 panels of user resources\nEmphasize that the following tutorials are short examples that were taken from the tutorial resources we have been building for our users\n\n\n\nThe following tutorial demonstrates several basic end-to-end workflows to interact with data “in-place” from the NASA Earthdata Cloud, accessing Amazon Web Services (AWS) Single Storage Solution (S3) data locations without the need to download data. While the data can be downloaded locally, the cloud offers the ability to scale compute resources to perform analyses over large areas and time spans, which is critical as data volumes continue to grow.\nAlthough the examples we’re working with in this notebook only focuses on a small time and area for demonstration purposes, this workflow can be modified and scaled up to suit a larger time range and region of interest.\n\n\n\nHarmonized Landsat Sentinel-2 (HLS) Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0 (L30) (10.5067/HLS/HLSL30.002)\n\nSurface reflectance (SR) and top of atmosphere (TOA) brightness data\nGlobal observations of the land every 2–3 days at 30-meter (m)\nCloud Optimized GeoTIFF (COG) format\n\nECCO Sea Surface Height - Daily Mean 0.5 Degree (Version 4 Release 4)(10.5067/ECG5D-SSH44).\n\nDaily-averaged dynamic sea surface height\nTime series of monthly NetCDFs on a 0.5-degree latitude/longitude grid.\n\n\n\n\n\n\n\n\nFrom Earthdata Search https://search.earthdata.nasa.gov, use your Earthdata login credentials to log in. You can create an Earthdata Login account at https://urs.earthdata.nasa.gov.\nIn this example we are interested in the ECCO dataset, hosted by the PO.DAAC. This dataset is available from the NASA Earthdata Cloud archive hosted in AWS cloud.\nClick on the “Available from AWS Cloud” filter option on the left. Here, 39 matching collections were found with the ECCO monthly SSH search, and for the time period for year 2015. The latter can be done using the calendar icon on the left under the search box. Scroll down the list of returned matches until we see the dataset of interest, in this case ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4).\n\n\n\nClicking on the ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4) dataset, we now see a list of files (granules) that are part of the dataset (collection). We can click on the green + symbol to add a few files to our project. Here we added the first 3 listed for 2015. Then click on the green button towards the bottom that says “Download”. This will take us to another page with options to customize our download or access link(s).\n\n\n\nFigure caption: Select granules and click download\n\n\n\n\n\n\nSelect the “Direct Download” option to view Access options via Direct Download and from the AWS Cloud. Additional options to customize the data are also available for this dataset.\n\n\n\nFigure caption: Customize your download or access\n\n\n\n\n\nClicking the green Download Data button again, will take us to the final page for instructions to download and links for data access in the cloud. The AWS S3 Access tab provides the S3:// links, which is what we would use to access the data directly in-region (us-west-2) within the AWS cloud.\nE.g.: s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc where s3 indicates data is stored in AWS S3 storage, podaac-ops-cumulus-protected is the bucket, and ECCO_L4_SSH_05DEG_MONTHLY_V4R4 is the object prefix (the latter two are also listed in the dataset collection information under Cloud Access (step 3 above)).\n\n\nIn the next two examples we will work programmatically in the cloud to access datasets of interest, to get us set up for further scientific analysis of choice. There are several ways to do this. One way to connect the search part of the workflow we just did in Earthdata Search to our next steps working in the cloud is to simply copy/paste the s3:// links provides in Step 4 above into a JupyterHub notebook or script in our cloud workspace, and continue the data analysis from there.\nOne could also copy/paste the s3:// links and save them in a text file, then open and read the text file in the notebook or script in the JupyterHub in the cloud.\n\n\n\nFigure caption: Direct S3 access\n\n\n\n\n\n\nIn this example we will access the NASA’s Harmonized Landsat Sentinel-2 (HLS) version 2 assets, which are archived in cloud optimized geoTIFF (COG) format archived by the Land Processes (LP) DAAC. The COGs can be used like any other GeoTIFF file, but have some added features that make them more efficient within the cloud data access paradigm. These features include: overviews and internal tiling.\n\n\nSpatioTemporal Asset Catalog (STAC) is a specification that provides a common language for interpreting geospatial information in order to standardize indexing and discovering data.\nThe STAC specification is made up of a collection of related, yet independent specifications that when used together provide search and discovery capabilities for remote assets.\n\n\nSTAC Catalog (aka DAAC Archive)\nSTAC Collection (aka Data Product)\nSTAC Item (aka Granule)\nSTAC API\n\n\n\n\nThe CMR-STAC API is NASA’s implementation of the STAC API specification for all NASA data holdings within EOSDIS. The current implementation does not allow for querries accross the entire NASA catalog. Users must execute searches within provider catalogs (e.g., LPCLOUD) to find the STAC Items they are searching for. All the providers can be found at the CMR-STAC endpoint here: https://cmr.earthdata.nasa.gov/stac/.\nIn this example, we will query the LPCLOUD provider to identify STAC Items from the Harmonized Landsat Sentinel-2 (HLS) collection that fall within our region of interest (ROI) and within our specified time range.\n\n\n\n\n\nimport os\nimport requests \nimport boto3\nfrom osgeo import gdal\nimport rasterio as rio\nfrom rasterio.session import AWSSession\nimport rioxarray\nimport hvplot.xarray\nimport holoviews as hv\n\nfrom pystac_client import Client  \nfrom collections import defaultdict    \nimport json\nimport geopandas\nimport geoviews as gv\nfrom cartopy import crs\ngv.extension('bokeh', 'matplotlib')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\nSTAC_URL = 'https://cmr.earthdata.nasa.gov/stac'\n\n\nprovider_cat = Client.open(STAC_URL)\n\n\n\nFor this next step we need the provider title (e.g., LPCLOUD). We will add the provider to the end of the CMR-STAC API URL (i.e., https://cmr.earthdata.nasa.gov/stac/) to connect to the LPCLOUD STAC Catalog.\n\ncatalog = Client.open(f'{STAC_URL}/LPCLOUD/')\n\nSince we are using a dedicated client (i.e., pystac-client.Client) to connect to our STAC Provider Catalog, we will have access to some useful internal methods and functions (e.g., get_children() or get_all_items()) we can use to get information from these objects.\n\n\n\n\nWe will define our ROI using a geojson file containing a small polygon feature in western Nebraska, USA. We’ll also specify the data collections and a time range for our example.\n\n\nReading in a geojson file with geopandas and extract coodinates for our ROI.\n\nfield = geopandas.read_file('../data/ne_w_agfields.geojson')\nfieldShape = field['geometry'][0]\nroi = json.loads(field.to_json())['features'][0]['geometry']\n\nWe can plot the polygon using the geoviews package that we imported as gv with ‘bokeh’ and ‘matplotlib’ extensions. The following has reasonable width, height, color, and line widths to view our polygon when it is overlayed on a base tile map.\n\nbase = gv.tile_sources.EsriImagery.opts(width=650, height=500)\nfarmField = gv.Polygons(fieldShape).opts(line_color='yellow', line_width=10, color=None)\nbase * farmField\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nWe will now start to specify the search criteria we are interested in, i.e, the date range, the ROI, and the data collections, that we will pass to the STAC API.\n\n\n\n\nNow we can put all our search criteria together using catalog.search from the pystac_client package. STAC Collection is synonomous with what we usually consider a NASA data product. Desired STAC Collections are submitted to the search API as a list containing the collection id. Let’s focus on S30 and L30 collections.\n\ncollections = ['HLSL30.v2.0', 'HLSS30.v2.0']\n\ndate_range = \"2021-05/2021-08\"\n\nsearch = catalog.search(\n    collections=collections,\n    intersects=roi,\n    datetime=date_range,\n    limit=100\n)\n\n\n\n\nprint('Matching STAC Items:', search.matched())\nitem_collection = search.get_all_items()\nitem_collection[0].to_dict()\n\nMatching STAC Items: 113\n\n\n{'type': 'Feature',\n 'stac_version': '1.0.0',\n 'id': 'HLS.L30.T13TGF.2021124T173013.v2.0',\n 'properties': {'datetime': '2021-05-04T17:30:13.428000Z',\n  'start_datetime': '2021-05-04T17:30:13.428Z',\n  'end_datetime': '2021-05-04T17:30:37.319Z',\n  'eo:cloud_cover': 36},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-101.5423534, 40.5109845],\n    [-101.3056118, 41.2066375],\n    [-101.2894253, 41.4919436],\n    [-102.6032964, 41.5268623],\n    [-102.638891, 40.5386175],\n    [-101.5423534, 40.5109845]]]},\n 'links': [{'rel': 'self',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v2.0/items/HLS.L30.T13TGF.2021124T173013.v2.0'},\n  {'rel': 'parent',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v2.0'},\n  {'rel': 'collection',\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/collections/HLSL30.v2.0'},\n  {'rel': <RelType.ROOT: 'root'>,\n   'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/',\n   'type': <MediaType.JSON: 'application/json'>,\n   'title': 'LPCLOUD'},\n  {'rel': 'provider', 'href': 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD'},\n  {'rel': 'via',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G2144020713-LPCLOUD.json'},\n  {'rel': 'via',\n   'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G2144020713-LPCLOUD.umm_json'}],\n 'assets': {'B11': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B11.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B11.tif'},\n  'B07': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B07.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B07.tif'},\n  'SAA': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.SAA.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.SAA.tif'},\n  'B06': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B06.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B06.tif'},\n  'B09': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B09.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B09.tif'},\n  'B10': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B10.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B10.tif'},\n  'VZA': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.VZA.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.VZA.tif'},\n  'SZA': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.SZA.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.SZA.tif'},\n  'B01': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B01.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B01.tif'},\n  'VAA': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.VAA.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.VAA.tif'},\n  'B05': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B05.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B05.tif'},\n  'B02': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B02.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B02.tif'},\n  'Fmask': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.Fmask.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.Fmask.tif'},\n  'B03': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B03.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B03.tif'},\n  'B04': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.B04.tif',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.B04.tif'},\n  'browse': {'href': 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-public/HLSL30.020/HLS.L30.T13TGF.2021124T173013.v2.0/HLS.L30.T13TGF.2021124T173013.v2.0.jpg',\n   'type': 'image/jpeg',\n   'title': 'Download HLS.L30.T13TGF.2021124T173013.v2.0.jpg'},\n  'metadata': {'href': 'https://cmr.earthdata.nasa.gov/search/concepts/G2144020713-LPCLOUD.xml',\n   'type': 'application/xml'}},\n 'bbox': [-102.638891, 40.510984, -101.289425, 41.526862],\n 'stac_extensions': ['https://stac-extensions.github.io/eo/v1.0.0/schema.json'],\n 'collection': 'HLSL30.v2.0'}\n\n\n\n\n\n\nBelow we will loop through and filter the item_collection by a specified cloud cover as well as extract the band we’d need to do an Enhanced Vegetation Index (EVI) calculation for a future analysis. We will also specify the STAC Assets (i.e., bands/layers) of interest for both the S30 and L30 collections (also in our collections variable above) and print out the first ten links, converted to s3 locations:\n\ncloudcover = 25\n\ns30_bands = ['B8A', 'B04', 'B02', 'Fmask']    # S30 bands for EVI calculation and quality filtering -> NIR, RED, BLUE, Quality \nl30_bands = ['B05', 'B04', 'B02', 'Fmask']    # L30 bands for EVI calculation and quality filtering -> NIR, RED, BLUE, Quality \n\nevi_band_links = []\n\nfor i in item_collection:\n    if i.properties['eo:cloud_cover'] <= cloudcover:\n        if i.collection_id == 'HLSS30.v2.0':\n            #print(i.properties['eo:cloud_cover'])\n            evi_bands = s30_bands\n        elif i.collection_id == 'HLSL30.v2.0':\n            #print(i.properties['eo:cloud_cover'])\n            evi_bands = l30_bands\n\n        for a in i.assets:\n            if any(b==a for b in evi_bands):\n                evi_band_links.append(i.assets[a].href)\n                \ns3_links = [l.replace('https://data.lpdaac.earthdatacloud.nasa.gov/', 's3://') for l in evi_band_links]\ns3_links[:10]\n\n['s3://lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021133T172406.v2.0/HLS.L30.T13TGF.2021133T172406.v2.0.B04.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021133T172406.v2.0/HLS.L30.T13TGF.2021133T172406.v2.0.B05.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021133T172406.v2.0/HLS.L30.T13TGF.2021133T172406.v2.0.Fmask.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021133T172406.v2.0/HLS.L30.T13TGF.2021133T172406.v2.0.B02.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T14TKL.2021133T172406.v2.0/HLS.L30.T14TKL.2021133T172406.v2.0.B02.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T14TKL.2021133T172406.v2.0/HLS.L30.T14TKL.2021133T172406.v2.0.B04.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T14TKL.2021133T172406.v2.0/HLS.L30.T14TKL.2021133T172406.v2.0.B05.tif',\n 's3://lp-prod-protected/HLSL30.020/HLS.L30.T14TKL.2021133T172406.v2.0/HLS.L30.T14TKL.2021133T172406.v2.0.Fmask.tif',\n 's3://lp-prod-protected/HLSS30.020/HLS.S30.T14TKL.2021133T173859.v2.0/HLS.S30.T14TKL.2021133T173859.v2.0.B04.tif',\n 's3://lp-prod-protected/HLSS30.020/HLS.S30.T14TKL.2021133T173859.v2.0/HLS.S30.T14TKL.2021133T173859.v2.0.B8A.tif']\n\n\n\n\n\nAccess s3 credentials from LP.DAAC and create a boto3 Session object using your temporary credentials. This Session is used to pass credentials and configuration to AWS so we can interact wit S3 objects from applicable buckets.\n\ns3_cred_endpoint = 'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials'\ntemp_creds_req = requests.get(s3_cred_endpoint).json()\n\nsession = boto3.Session(aws_access_key_id=temp_creds_req['accessKeyId'], \n                        aws_secret_access_key=temp_creds_req['secretAccessKey'],\n                        aws_session_token=temp_creds_req['sessionToken'],\n                        region_name='us-west-2')\n\nGDAL Configurations\nGDAL is a foundational piece of geospatial software that is leveraged by several popular open-source, and closed, geospatial software. The rasterio package is no exception. Rasterio leverages GDAL to, among other things, read and write raster data files, e.g., GeoTIFFs/Cloud Optimized GeoTIFFs. To read remote files, i.e., files/objects stored in the cloud, GDAL uses its Virtual File System API. In a perfect world, one would be able to point a Virtual File System (there are several) at a remote data asset and have the asset retrieved, but that is not always the case. GDAL has a host of configurations/environmental variables that adjust its behavior to, for example, make a request more performant or to pass AWS credentials to the distribution system. Below, we’ll identify the evironmental variables that will help us get our data from cloud\n\nrio_env = rio.Env(AWSSession(session),\n                  GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\n<rasterio.env.Env at 0x7f64510812e0>\n\n\n\ns3_url = 's3://lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n# s3_url = 's3://lp-prod-protected/HLSL30.020/HLS.L30.T13TGF.2021133T172406.v2.0/HLS.L30.T13TGF.2021133T172406.v2.0.B04.tif'\n\n\n\n\n\nda = rioxarray.open_rasterio(s3_url)\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (band: 1, y: 3660, x: 3660)>\n[13395600 values with dtype=int16]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 7e+05 7e+05 7e+05 ... 8.097e+05 8.097e+05 8.097e+05\n  * y            (y) float64 4.1e+06 4.1e+06 4.1e+06 ... 3.99e+06 3.99e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -9999.0\n    scale_factor:  0.0001\n    add_offset:    0.0\n    long_name:     Redxarray.DataArrayband: 1y: 3660x: 3660...[13395600 values with dtype=int16]Coordinates: (4)band(band)int641array([1])x(x)float647e+05 7e+05 ... 8.097e+05 8.097e+05array([699975., 700005., 700035., ..., 809685., 809715., 809745.])y(y)float644.1e+06 4.1e+06 ... 3.99e+06array([4100025., 4099995., 4099965., ..., 3990315., 3990285., 3990255.])spatial_ref()int640crs_wkt :PROJCS[\"UTM Zone 11, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :Unknown datum based upon the WGS 84 ellipsoidhorizontal_datum_name :Not_specified_based_on_WGS_84_spheroidprojected_crs_name :UTM Zone 11, Northern Hemispheregrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"UTM Zone 11, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :699960.0 30.0 0.0 4100040.0 0.0 -30.0array(0)Attributes: (4)_FillValue :-9999.0scale_factor :0.0001add_offset :0.0long_name :Red\n\n\nWhen GeoTIFFS/Cloud Optimized GeoTIFFS are read in, a band coordinate variable is automatically created (see the print out above). In this exercise we will not use that coordinate variable, so we will remove it using the squeeze() function to avoid confusion.\n\nda_red = da.squeeze('band', drop=True)\nda_red\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (y: 3660, x: 3660)>\n[13395600 values with dtype=int16]\nCoordinates:\n  * x            (x) float64 7e+05 7e+05 7e+05 ... 8.097e+05 8.097e+05 8.097e+05\n  * y            (y) float64 4.1e+06 4.1e+06 4.1e+06 ... 3.99e+06 3.99e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -9999.0\n    scale_factor:  0.0001\n    add_offset:    0.0\n    long_name:     Redxarray.DataArrayy: 3660x: 3660...[13395600 values with dtype=int16]Coordinates: (3)x(x)float647e+05 7e+05 ... 8.097e+05 8.097e+05array([699975., 700005., 700035., ..., 809685., 809715., 809745.])y(y)float644.1e+06 4.1e+06 ... 3.99e+06array([4100025., 4099995., 4099965., ..., 3990315., 3990285., 3990255.])spatial_ref()int640crs_wkt :PROJCS[\"UTM Zone 11, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :Unknown datum based upon the WGS 84 ellipsoidhorizontal_datum_name :Not_specified_based_on_WGS_84_spheroidprojected_crs_name :UTM Zone 11, Northern Hemispheregrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"UTM Zone 11, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :699960.0 30.0 0.0 4100040.0 0.0 -30.0array(0)Attributes: (4)_FillValue :-9999.0scale_factor :0.0001add_offset :0.0long_name :Red\n\n\n\n\n\n\nda_red.hvplot.image(x='x', y='y', cmap='gray', aspect='equal')\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nrio_env.__exit__()\n\n\n\n\nWe have already explored direct access to the NASA EOSDIS archive in the cloud via the Amazon Simple Storage Service (S3). In addition to directly accessing the files archived and distributed by each of the NASA DAACs, many datasets also support services that allow us to customize the data via subsetting, reformatting, reprojection, and other transformations.\nThis example demonstrates “analysis in place” using customized ECCO Level 4 monthly sea surface height data, in this case reformatted to Zarr, from a new ecosystem of services operating within the NASA Earthdata Cloud: NASA Harmony:\n\nConsistent access patterns to EOSDIS holdings make cross-data center data access easier\nData reduction services allow us to request only the data we want, in the format and projection we want\nAnalysis Ready Data and cloud access will help reduce time-to-science\nCommunity Development helps reduce the barriers for re-use of code and sharing of domain knowledge\n\n\n\n\n\nfrom harmony import BBox, Client, Collection, Request, LinkType\nfrom harmony.config import Environment\nfrom pprint import pprint\nimport datetime as dt\nimport s3fs\nfrom pqdm.threads import pqdm\nimport xarray as xr\n\n\n\n\nHarmony-Py provides a pip installable Python alternative to directly using Harmony’s RESTful API to make it easier to request data and service options, especially when interacting within a Python Jupyter Notebook environment.\n\n\nFirst, we need to create a Harmony Client, which is what we will interact with to submit and inspect a data request to Harmony, as well as to retrieve results.\n\nharmony_client = Client()\n\n\n\n\n\nSpecify a temporal range over 2015, and Zarr as an output format.\nZarr is an open source library for storing N-dimensional array data. It supports multidimensional arrays with attributes and dimensions similar to NetCDF4, and it can be read by XArray. Zarr is often used for data held in cloud object storage (like Amazon S3), because it is better optimized for these situations than NetCDF4.\n\nshort_name = 'ECCO_L4_SSH_05DEG_MONTHLY_V4R4'\n\nrequest = Request(\n    collection=Collection(id=short_name),\n    temporal={\n        'start': dt.datetime(2015, 1, 2),\n        'stop': dt.datetime(2015, 12, 31),\n    },\n    format='application/x-zarr'\n)\n\njob_id = harmony_client.submit(request)\n\n\n\n\nHarmony data outputs can be accessed within the cloud using the s3 URLs and AWS credentials provided in the Harmony job response:\n\nharmony_client.wait_for_processing(job_id, show_progress=True)\n\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\ns3_urls = list(results)\ns3_urls\n\n [ Processing:  83% ] |##########################################         | [/]\n\n\n\n\nUsing aws_credentials you can retrieve the credentials needed to access the Harmony s3 staging bucket and its contents.\n\ncreds = harmony_client.aws_credentials()\n\n\n\n\n\nAccess AWS credentials for the Harmony bucket, and use the AWS s3fs package to create a file system that can then be read by xarray. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\ncreds = harmony_client.aws_credentials()\n\ns3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nOpen the Zarr stores using the s3fs package, then load them all at once into a concatenated xarray dataset:\n\nstores = [s3fs.S3Map(root=url, s3=s3_fs, check=False) for url in s3_urls]\ndef open_zarr_xarray(store):\n    return xr.open_zarr(store=store, consolidated=True)\n\ndatasets = pqdm(stores, open_zarr_xarray, n_jobs=12)\n\nds = xr.concat(datasets, 'time', coords='minimal', )\nds = xr.decode_cf(ds, mask_and_scale=True, decode_coords=True)\nds\n\n\nssh_da = ds.SSH\n\nssh_da.to_masked_array(copy=False)\n\nssh_da\n\n\n\n\nNow we can start looking at aggregations across the time dimension. In this case, plot the standard deviation of the temperature at each point to get a visual sense of how much temperatures fluctuate over the course of the month.\n\nssh_da = ds.SSH\n\nstdev_ssh = ssh_da.std('time')\nstdev_ssh.name = 'stdev of analysed_sst [Kelvin]'\nstdev_ssh.plot();\n\nssh_da.hvplot.image(x='longitude', y='latitude', cmap='Spectral_r', aspect='equal').opts(clim=(ssh_da.attrs['valid_min'],ssh_da.attrs['valid_max']))\n\n\n\n\n\nReference Hackathon/workshop tutorials that go into more detail!\nEarthdata Cloud Cookbook\nEarthdata Cloud Primer\n\nGetting started with Amazon Web Services outside of the Workshop to access and work with data with a cloud environment."
  },
  {
    "objectID": "how-tos/reproject_and_regrid/reproject.html",
    "href": "how-tos/reproject_and_regrid/reproject.html",
    "title": "Reproject",
    "section": "",
    "text": "Reprojecting upcoming"
  },
  {
    "objectID": "how-tos/reproject_and_regrid/index.html",
    "href": "how-tos/reproject_and_regrid/index.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "How do I reproject and resample a data file?\n\nHow do I reproject a data granule using Harmony?\n\nHow do I reproject a netcdf4 file?\n\nHow do I reproject a GeoTIFF file?\nHow do I resample a data granule using Harmony?\nHow do I resample a netcdf4 file?\nHow do I resample a GeoTIFF file?"
  },
  {
    "objectID": "how-tos/tech-setup.html",
    "href": "how-tos/tech-setup.html",
    "title": "Tech Setup (AWS)",
    "section": "",
    "text": "Coming soon"
  },
  {
    "objectID": "how-tos/working-locally/index.html",
    "href": "how-tos/working-locally/index.html",
    "title": "How do I access Cloud Data from my Local Machine?",
    "section": "",
    "text": "The How-to guides in this section describe how to download data granules from Earthdata Cloud to your local machine.\n\nHow do I download data using the earthaccess library?\nHow do I download data from an OPeNDAP server?\n\nComing soon: Introduction to the cloud data access landscape including data access options (HTTPS, S3) and data format considerations."
  },
  {
    "objectID": "how-tos/working-locally/download.html",
    "href": "how-tos/working-locally/download.html",
    "title": "Download Data",
    "section": "",
    "text": "coming soon"
  },
  {
    "objectID": "how-tos/find-data/earthdata_search.html",
    "href": "how-tos/find-data/earthdata_search.html",
    "title": "Find Data: Earthdata Search",
    "section": "",
    "text": "The original source for this document is https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/tutorials/01_Earthdata_Search.html\nThis tutorial guides you through how to use Earthdata Search for NASA Earth observations search and discovery, and how to connect the search output (e.g. download or access links) to a programmatic workflow (locally or from within the cloud).\n\nStep 1. Go to Earthdata Search and Login\nGo to Earthdata Search https://search.earthdata.nasa.gov and use your Earthdata login credentials to log in. If you do not have an Earthdata account, please see the Workshop Prerequisites for guidance.\n\n\nStep 2. Search for dataset of interest\nUse the search box in the upper left to type key words. In this example we are interested in the ECCO dataset, hosted by the PO.DAAC. This dataset is available from the NASA Earthdata Cloud archive hosted in AWS cloud.\nClick on the “Available from AWS Cloud” filter option on the left. Here, 104 matching collections were found with the basic ECCO search.\n\n\n\nFigure caption: Search for ECCO data available in AWS cloud in Earthdata Search portal\n\n\nLet’s refine our search further. Let’s search for ECCO monthly SSH in the search box (which will produce 39 matching collections), and for the time period for year 2015. The latter can be done using the calendar icon on the left under the search box.\nScroll down the list of returned matches until we see the dataset of interest, in this case ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4).\nWe can click on the (i) icon for the dataset to read more details, including the dataset shortname (helpful for programmatic workflows) just below the dataset name; here ECCO_L4_SSH_05DEG_MONTHLY_V4R4.\n\n\n\nFigure caption: Refine search, set temporal bounds, get more information\n\n\n\n\nStep 3. Explore the dataset details, including Cloud Access information\nOnce we clicked the (i), scrolling down the info page for the dataset we will see Cloud Access information, such as:\n\nwhether the dataset is available in the cloud\nthe cloud Region (all NASA Earthdata Cloud data is/will be in us-west-2 region)\nthe S3 storage bucket and object prefix where this data is located\nlink that generates AWS S3 Credentials for in-cloud data access (we will cover this in the Direct Data Access Tutorials)\nlink to documentation describing the In-region Direct S3 Access to Buckets. Note: these will be unique depending on the DAAC where the data is archived. (We will show examples of direct in-region access in Tutorial 3.)\n\n\n\n\nFigure caption: Cloud access info in EDS\n\n\n\n\n\nFigure caption: Documentation describing the In-region Direct S3 Access to Buckets\n\n\nPro Tip: Clicking on “For Developers” to exapnd will provide programmatic endpoints such as those for the CMR API, and more. CMR API and CMR STAC API tutorials can be found on the 2021 Cloud Hackathon website.\nFor now, let’s say we are intersted in getting download link(s) or access link(s) for specific data files (granules) within this collection.\nAt the top of the dataset info section, click on Search Results, which will take us back to the list of datasets matching our search parameters. Clicking on the dataset (here again it’s the same ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)) we now see a list of files (granules) that are part of the dataset (collection).\n\n\nStep 4. Customize the download or data access\nClick on the green + symbol to add a few files to our project. Here we added the first 3 listed for 2015. Then click on the green button towards the bottom that says “Download”. This will take us to another page with options to customize our download or access link(s).\n\n\n\nFigure caption: Select granules and click download\n\n\n\n4.a. Entire file content\nLet’s stay we are interested in the entire file content, so we select the “Direct Download” option (as opposed to other options to subset or transform the data):\n\n\n\nFigure caption: Customize your download or access\n\n\nClicking the green Download Data button again, will take us to the final page for instructions to download and links for data access in the cloud. You should see three tabs: Download Files, AWS S3 Access, Download Script:\n  \nThe Download Files tab provides the https:// links for downloading the files locally. E.g.: https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc\nThe AWS S3 Access tab provides the S3:// links, which is what we would use to access the data directly in-region (us-west-2) within the AWS cloud (an example will be shown in Tutorial 3). E.g.: s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc where s3 indicates data is stored in AWS S3 storage, podaac-ops-cumulus-protected is the bucket, and ECCO_L4_SSH_05DEG_MONTHLY_V4R4 is the object prefix (the latter two are also listed in the dataset collection information under Cloud Access (step 3 above)).\nTip: Another quicker way to find the bucket and object prefix is from the list of data files the search returns. Next to the + green button is a grey donwload symbol. Click on that to see the Download Files https:// links or on the AWS S3 Access to get the direct S3:// access links, which contain the bucket and object prefix where data is stored.\n\n\n4.b. Subset or transform before download or access\nDAAC tools and services are also being migrated or developed in the cloud, next to that data. These include the Harmony API and OPeNDAP in the cloud, as a few examples.\nWe can leverage these cloud-based services on cloud-archived data to reduce or transform the data (depending on need) before getting the access links regardless of whether we prefer to download the data and work on a local machine or whether we want to access the data in the cloud (from a cloud workspace). These can be useful data reduction services that support a faster time to science.\nHarmony\nHarmony allows you to seamlessly analyze Earth observation data from different NASA data centers. These services (API endpoints) provide data reduction (e.g. subsetting) and transfromation services (e.g. convert netCDF data to Zarr cloud optimized format).\n\n\n\nFigure caption: Leverage Harmony cloud-based data transformation services\n\n\nWhen you click the final green Download button, the links provided are to data that had been transformed based on our selections on the previous screen (here chosing to use the Harmony service to reformat the data to Zarr). These data are staged for us in an S3 bucket in AWS, and we can use the s3:// links to access those specific data. This service also provides STAC access links. This particular example is applicable if your workflow is in the AWS us-west-2 region.\n\n\n\nFigure caption: Harmony-staged data in S3\n\n\n\n\n\nStep 5. Integrate file links into programmatic workflow, locally or in the AWS cloud.\nIn tutorial 3 Direct Data Access, we will work programmatically in the cloud to access datasets of interest, to get us set up for further scientific analysis of choice. There are several ways to do this. One way to connect the search part of the workflow we just did in Earthdata Search to our next steps working in the cloud is to simply copy/paste the s3:// links provides in Step 4 above into a JupyterHub notebook or script in our cloud workspace, and continue the data analysis from there.\nOne could also copy/paste the s3:// links and save them in a text file, then open and read the text file in the notebook or script in the JupyterHub in the cloud.\nTutorial 3 will pick up from here and cover these next steps in more detail."
  },
  {
    "objectID": "how-tos/find-data/index.html",
    "href": "how-tos/find-data/index.html",
    "title": "How do I find data?",
    "section": "",
    "text": "The following How-to’s are included in this section:\n\nHow do I find datasets using NASA Earthdata Search?\nHow do I find datasets from the command line?\n\nHow do I find datasets by keyword?\nHow do I find datasets for a region?\nHow do I find datasets for a time range?\nHow do I find datasets stored in Earthdata Cloud?\nHow do I find data granules for a dataset?\nHow do I find data granules for a region?\nHow do I find data granules for a time range?"
  },
  {
    "objectID": "how-tos/find-data/programmatic.html",
    "href": "how-tos/find-data/programmatic.html",
    "title": "How do I Find Data from the command line or a notebook?",
    "section": "",
    "text": "We can find data programmatically using the following code."
  },
  {
    "objectID": "how-tos/find-data/programmatic.html#code",
    "href": "how-tos/find-data/programmatic.html#code",
    "title": "How do I Find Data from the command line or a notebook?",
    "section": "Code",
    "text": "Code\nHere are our recommended approaches for finding data with code.\n\nPythonRMatlabCommand Line\n\n\nIn Python we can use the earthaccess library (renamed, previously earthdata)\nTo install the package we’ll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a !, so it would be !conda install.\n\n\n\n[command line code]\n\n# Install earthaccess\nconda install -c conda-forge earthaccess\n\n\nThis example searches for data from the Land Processes DAAC with a spatial bounding box and temporal range.\n\n## Import packages\nfrom earthdata import DataGranules, DataCollections\nfrom pprint import pprint \n\n\n# We'll get 4 collections that match with our keyword of interest\ncollections = DataCollections().keyword(\"REFLECTANCE\").cloud_hosted(True).get(4)\n\n# Let's print 2 collections\nfor collection in collections[0:2]:\n    print(pprint(collection.summary()) , collection.abstract(), \"\\n\")\n    \n#Search for files from the second dataset result over a small plot in Nebraska, USA for two weeks in September 2022\ngranules = DataGranules().concept_id(\"C2021957657-LPCLOUD\").temporal(\"2022-09-10\",\"2022-09-24\").bounding_box(-101.67271,41.04754,-101.65344,41.06213)\nprint(len(granules))\ngranules\n\n\n\nTo find data in R, we’ll also use the earthaccess python package - we can do so from R using the reticulate package (cheatsheet). Note below that we import the python library as an R object we name earthaccess, as well as the earthaccess$ syntax for accessing functions from the earthaccess library. The granules object has a list of JSON dictionaries with some extra dictionaries.\n\n\n\n[R code]\n\n## load R libraries\nlibrary(tidyverse) # install.packages(\"tidyverse\") \nlibrary(reticulate) # install.packages(\"reticulate\")\n\n## load python library\nearthaccess <- reticulate::import(\"earthaccess\") \n\n# use earthaccess to access data # https://nsidc.github.io/earthaccess/tutorials/search-granules/\ngranules <- earthaccess$search_data(\n  concept_id = \"C2036880672-POCLOUD\",\n  temporal = reticulate::tuple(\"2017-01\", \"2017-02\") # with an earthaccess update, this can be simply c() or list()\n)\n\n## Granules found: 72\n\n## exploring\ngranules # this is the result of the get request. \n\nclass(granules) # \"list\"\n## granules <- reticulate::py_to_r(granules) # Object to convert is not a Python object\n\n\n\n\nMatlab code coming soon!\n\n\n\n[Matlab code]\n\n# Coming soon!\n\n\n\n\nWith wget and curl:\n\n\n\n[command line code]\n\n# Coming soon!"
  },
  {
    "objectID": "how-tos/index.html",
    "href": "how-tos/index.html",
    "title": "How-To Guides",
    "section": "",
    "text": "How-To Guides are recipes. They provide a step-by-step guide to solve a particular problem. For the most part, they are short. They are written with the assumption that you know what you want to do and have at least some understanding of programming. You can think of “How-tos” as building blocks that can be put together to acheive a larger task or workflow.\nIf you are just learning either programming or working in the cloud, we recommend looking at our Tutorials.\nIf you are looking for inspiration or examples of cloud workflows applied to particular problems look at the collection of Example Workflows."
  },
  {
    "objectID": "how-tos/reformat/reformat.html",
    "href": "how-tos/reformat/reformat.html",
    "title": "Reformat",
    "section": "",
    "text": "Upcoming!"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Direct-Cloud-Access.html",
    "href": "how-tos/working-with-data-in-cloud/Direct-Cloud-Access.html",
    "title": "Direct Cloud Access",
    "section": "",
    "text": "We can access data directly from NASA Earthdata Cloud using the following code.\nNote that NASA cloud-hosted data is in Amazon Web Services (AWS) Region us-west-2. Your compute instance must also be in us-west-2 in order for the following code to run successfully."
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Direct-Cloud-Access.html#code",
    "href": "how-tos/working-with-data-in-cloud/Direct-Cloud-Access.html#code",
    "title": "Direct Cloud Access",
    "section": "Code",
    "text": "Code\nHere are our recommended approaches for accessing data in NASA Earthdata Cloud with code.\n\nPythonRMatlabCommand Line\n\n\nInstall the earthaccess package:\n\n# Install earthaccess\nconda install -c conda-forge earthaccess\n\nImport packages:\n\n## Import earthaccess\nimport earthaccess\nimport xarray as xr\n\n\nEarthdata Login Authentication\nWe will authenticate below using a netrc file. See the appendix for more information on Earthdata Login and netrc setup.\n\nauth = earthaccess.login(strategy=\"netrc\")\n# are we authenticated?\nif not auth.authenticated:\n    # ask for credentials and persist them in a .netrc file\n    auth.login(strategy=\"interactive\", persist=True)\n\n\n\nWorking with the URLs directly\nWe can use earthaccess to grab the file URLs and then access them with the xarray library. See the previous Find Data How-To guide for more information on how to discover datasets of interest.\n\n#Access land ice height from ATLAS/ICESat-2 V005 (10.5067/ATLAS/ATL06.005), searching for data over western Greenland coast over two weeks in July 2022. The data are provided as HDF5 granules (files) that span about 1/14th of an orbit.\n\nresults = earthaccess.search_data(short_name=\"ATL06\",\n                                  version=\"005\",\n                                  cloud_hosted=True,\n                                  temporal = (\"2022-07-17\",\"2022-07-31\"),\n                                  bounding_box = (-51.96423,68.10554,-48.71969,70.70529))\n\ns3_url = results[0].data_links(access=\"direct\")\nprint(s3_url)\n\n#Use xarray to load the data as a multifile dataset for a single group in the HDF5 file, in this case land ice segments:\nds = xr.open_mfdataset(earthaccess.open(results), group='/gt1l/land_ice_segments')\nds\n\n\n\n\nR code coming soon!\n\n# Coming soon!\n\n\n\nMatlab code coming soon!\n\n# Coming soon!\n\n\n\nWith wget and curl:\n\n# Coming soon!"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__Direct_S3_Access_COG_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__Direct_S3_Access_COG_Example.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "In this notebook, we will access data for the Harmonized Landsat Sentinel-2 (HLS) Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0 (L30) (10.5067/HLS/HLSL30.002) data product. These data are archived and distributed as Cloud Optimized GeoTIFF (COG) files, one file for each spectral band.\nWe will access a single COG file, L30 red band (0.64 – 0.67 μm), from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataarray. This approach leverages S3 native protocols for efficient access to the data.\n\n\n\n\n\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata.\n\n\n\n\n\nhow to retrieve temporary S3 credentials for in-region direct S3 bucket access\nhow to perform in-region direct access of HLS Cloud Optimized geoTIFF (COG) files in S3\nhow to plot the data\n\n\n\n\n\nimport os\nimport requests \nimport boto3\nfrom osgeo import gdal\nimport rasterio as rio\nfrom rasterio.session import AWSSession\nimport rioxarray\nimport hvplot.xarray\nimport holoviews as hv\n\n\n\n\n\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\ntemp_creds_req = get_temp_creds('lpdaac')\n#temp_creds_req\n\n\n\n\nFor this exercise, we are going to open up a context manager for the notebook using the rasterio.env module to store the required GDAL and AWS configurations we need to access the data in Earthdata Cloud. While the context manager is open (rio_env.__enter__()) we will be able to run the open or get data commands that would typically be executed within a with statement, thus allowing us to more freely interact with the data. We’ll close the context (rio_env.__exit__()) at the end of the notebook.\nCreate a boto3 Session object using your temporary credentials. This Session is used to pass credentials and configuration to AWS so we can interact wit S3 objects from applicable buckets.\n\nsession = boto3.Session(aws_access_key_id=temp_creds_req['accessKeyId'], \n                        aws_secret_access_key=temp_creds_req['secretAccessKey'],\n                        aws_session_token=temp_creds_req['sessionToken'],\n                        region_name='us-west-2')\n\nGDAL environment variables must be configured to access COGs in Earthdata Cloud. Geospatial data access Python packages like rasterio and rioxarray depend on GDAL, leveraging GDAL’s “Virtual File Systems” to read remote files. GDAL has a lot of environment variables that control it’s behavior. Changing these settings can mean the difference being able to access a file or not. They can also have an impact on the performance.\n\nrio_env = rio.Env(AWSSession(session),\n                  GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\nIn this example we’re interested in the HLS L30 data collection from NASA’s LP DAAC in Earthdata Cloud. Below we specify the s3 URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\ns3_url = 's3://lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n\n\n\n\nRead in the HLS s3 URL for the L30 red band (0.64 – 0.67 μm) into our workspace using rioxarray, an extension of xarray used to read geospatial data.\n\nda = rioxarray.open_rasterio(s3_url)\nda\n\nThe file is read into Python as an xarray dataarray with a band, x, and y dimension. In this example the band dimension is meaningless, so we’ll use the squeeze() function to remove band as a dimension.\n\nda_red = da.squeeze('band', drop=True)\nda_red\n\nPlot the dataarray, representing the L30 red band, using hvplot.\n\nda_red.hvplot.image(x='x', y='y', cmap='gray', aspect='equal')\n\nExit the context manager.\n\nrio_env.__exit__()\n\n\n\n\n\nDirect S3 Data Access with rioxarray\nDirect_S3_Access__gdalvrt\nDirect_S3_Access__rioxarray_clipping\nGetting Started with Cloud-Native Harmonized Landsat Sentinel-2 (HLS) Data in R"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/index.html",
    "href": "how-tos/working-with-data-in-cloud/index.html",
    "title": "How do I access data stored in Earthdata Cloud?",
    "section": "",
    "text": "When you have found the datasets and data granules you want to use, you have two options. You can download that data or, if you are working in the cloud, you can access the data directly. This second way of working is called “Direct Access”.\n\nHow do I directly access data on Amazon S3?\nHow do I access cloud-hosted data that has an End-User License Agreement (EULA)?\n\nComing soon: Introduction to the cloud data access landscape including data access options (HTTPS, S3) and data format considerations. - _Maybe move this to a “Discussion or Background” section."
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Multi-File_Direct_S3_Access_COG_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Multi-File_Direct_S3_Access_COG_Example.html",
    "title": "Accessing Multiple COG Files",
    "section": "",
    "text": "from pystac_client import Client\nimport stackstac\n\n\nSTAC_URL = 'https://cmr.earthdata.nasa.gov/stac'\n\n\ncatalog = Client.open(f\"{STAC_URL}/LPCLOUD\")\n\n\nsearch = catalog.search(\n    collections = ['HLSL30.v2.0', 'HLSS30.v2.0'],\n    intersects = {'type': 'Polygon',\n                  'coordinates': [[[-101.67271614074707, 41.04754380304359],\n                                   [-101.65344715118408, 41.04754380304359],\n                                   [-101.65344715118408, 41.06213891056728],\n                                   [-101.67271614074707, 41.06213891056728],\n                                   [-101.67271614074707, 41.04754380304359]]]},\n    datetime = '2021-05/2021-08'\n)               \n\n\nsearch.matched()\n\n\nic = search.get_all_items()\n\n\nil = list(search.get_items())\n\n\ntic = [x for x in ic if 'T13TGF' in x.id]\n\n\nimport pystac\n\n\nitem_collection = pystac.ItemCollection(items=tic)\n\n\nitem_collection\n\n\nil\n\n\ndata = stackstac.stack(item_collection, assets=['B04', 'B02'], epsg=32613, resolution=30)\n\n\ndata.sel(band='B04').isel(time=[0])\n\n\nimport stackstac\nimport pystac_client\n\nURL = \"https://earth-search.aws.element84.com/v0\"\ncatalog = pystac_client.Client.open(URL)\n\n\ncatalog\n\n\nstac_items = catalog.search(\n    intersects=dict(type=\"Point\", coordinates=[-105.78, 35.79]),\n    collections=[\"sentinel-s2-l2a-cogs\"],\n    datetime=\"2020-04-01/2020-05-01\"\n).get_all_items()\n\n\nstac_items\n\n\nstack = stackstac.stack(stac_items)\n\n\nstack"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "",
    "text": "In this notebook, we will access data for the Harmonized Landsat Sentinel-2 (HLS) Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0 (L30) ([10.5067/HLS/HLSL30.002](https://doi.org/10.5067/HLS/HLSL30.002)) data product. These data are archived and distributed as Cloud Optimized GeoTIFF (COG) files, one file for each spectral band.\nWe will access a single COG file, L30 red band (0.64 – 0.67 μm), from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataarray. This approach leverages S3 native protocols for efficient access to the data."
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#requirements",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#requirements",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "Requirements",
    "text": "Requirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n3. netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: [Authentication for NASA Earthdata](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/04_NASA_Earthdata_Authentication.html#authentication-via-netrc-file)."
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#learning-objectives",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#learning-objectives",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nhow to configure your Python and R work environment to access Cloud Optimized geoTIFF (COG) files\nhow to access HLS COG files\nhow to plot the data"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#cloud-optimized-geotiff-cog",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#cloud-optimized-geotiff-cog",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "Cloud Optimized GeoTIFF (COG)",
    "text": "Cloud Optimized GeoTIFF (COG)\nUsing Harmonized Landsat Sentinel-2 (HLS) version 2.0\n\nImport Packages\n\nPythonR\n\n\n\n\n\n[python code]\n\nimport os\nfrom osgeo import gdal\nimport rasterio as rio\nimport rioxarray\nimport hvplot.xarray\nimport holoviews as hv\n\n\n\n\n\n\n\n[R code]\n\nlibrary(rgdal)\nlibrary(raster)\nlibrary(terra)"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#workspace-environment-setup",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#workspace-environment-setup",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "Workspace Environment Setup",
    "text": "Workspace Environment Setup\n\nPythonR\n\n\nFor this exercise, we are going to open up a context manager for the notebook using the rasterio.env module to store the required GDAL configurations we need to access the data from Earthdata Cloud. While the context manager is open (rio_env.__enter__()) we will be able to run the open or get data commands that would typically be executed within a with statement, thus allowing us to more freely interact with the data. We’ll close the context (rio_env.__exit__()) at the end of the notebook.\nGDAL environment variables must be configured to access COGs from Earthdata Cloud. Geospatial data access Python packages like rasterio and rioxarray depend on GDAL, leveraging GDAL’s “Virtual File Systems” to read remote files. GDAL has a lot of environment variables that control it’s behavior. Changing these settings can mean the difference being able to access a file or not. They can also have an impact on the performance.\n\n\n\n[python code]\n\nrio_env = rio.Env(GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\n\n\n\nSet up rgdal configurations to access the cloud assets that we are interested in. You can learn more about these configuration options here.\n\n\n\n[R code]\n\nsetGDALconfig(c(\"GDAL_HTTP_UNSAFESSL=YES\",\n                \"GDAL_HTTP_COOKIEFILE=.rcookies\",\n                \"GDAL_HTTP_COOKIEJAR=.rcookies\",\n                \"GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR\",\n                \"CPL_VSIL_CURL_ALLOWED_EXTENSIONS=TIF\"))\n\n\n\n\n\nIn this example we’re interested in the HLS L30 data collection from NASA’s LP DAAC in Earthdata Cloud. Below we specify the HTTPS URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\nPythonR\n\n\n\n\n\n[python code]\n\nhttps_url = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n\n\n\n\nPlease note that in R, we need to add /vsicurl/ manually to the COG file URL.\n\n\n\n[R code]\n\nhttps_url <- '/vsicurl/https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#https-data-access",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__HTTPS_Access_COG_Example.html#https-data-access",
    "title": "Accessing Cloud Optimized GeoTIFF (COG) - HTTPS Example",
    "section": "HTTPS Data Access",
    "text": "HTTPS Data Access\nRead in the HLS HTTPS URL for the L30 red band (0.64 – 0.67 μm) into our workspace. Note that, accessing files in the cloud requires you to authenticate using your NASA Earthdata Login account meaning a proper netrc file needs to be set up.\n\nPythonR\n\n\nwe are using rioxarray, an extension of xarray used to read geospatial data.\n\n\n\n[python code]\n\nda = rioxarray.open_rasterio(https_url)\nda\n\n\nThe file is read into Python as an xarray dataarray with a band, x, and y dimension. In this example the band dimension is meaningless, so we’ll use the squeeze() function to remove band as a dimension.\n\n\n\n[python code]\n\nda_red = da.squeeze('band', drop=True)\nda_red\n\n\nPlot the dataarray, representing the L30 red band, using hvplot.\n\n\n\n[python code]\n\nda_red.hvplot.image(x='x', y='y', cmap='gray', aspect='equal')\n\n\nExit the context manager.\n\n\n\n[python code]\n\nrio_env.__exit__()\n\n\n\n\n\n\n\n[R code]\n\nda_red <- rast(https_url)\nda_red\n\n\nThe Convert a SpatRaster object to a Raster object using raster() to be able to use leaflet to plot our data.\n\n\n\n[R code]\n\nred_raster <- da_red %>% raster()\nred_raster\n\n\nThen plot the red band using plot function.\n\n\n\n[R code]\n\nplot(red_raster)"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__Direct_S3_Access_NetCDF4_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Single_File__Direct_S3_Access_NetCDF4_Example.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "In this notebook, we will access monthly sea surface height from ECCO V4r4 (10.5067/ECG5D-SSH44). The data are provided as a time series of monthly netCDFs on a 0.5-degree latitude/longitude grid.\nWe will access a single netCDF file from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\n\n\n\n\n\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata.\n\n\n\n\n\nhow to retrieve temporary S3 credentials for in-region direct S3 bucket access\nhow to perform in-region direct access of ECCO_L4_SSH_05DEG_MONTHLY_V4R4 data in S3\nhow to plot the data\n\n\n\n\n\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport os\nimport requests\nimport s3fs\nfrom osgeo import gdal\nimport xarray as xr\nimport hvplot.xarray\nimport holoviews as hv\n\n\n\n\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\ntemp_creds_req = get_temp_creds('podaac')\n#temp_creds_req\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'])\n\nIn this example we’re interested in the ECCO data collection from NASA’s PO.DAAC in Earthdata Cloud. Below we specify the s3 URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\ns3_url = 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc'\n\n\n\n\nOpen with the netCDF file using the s3fs package, then load the cloud asset into an xarray dataset.\n\ns3_file_obj = fs_s3.open(s3_url, mode='rb')\n\n\nssh_ds = xr.open_dataset(s3_file_obj, engine='h5netcdf')\nssh_ds\n\nGet the SSH variable as an xarray dataarray\n\nssh_da = ssh_ds.SSH\nssh_da\n\nPlot the SSH dataarray for time 2015-01-16T12:00:00 using hvplot.\n\nssh_da.hvplot.image(x='longitude', y='latitude', cmap='Spectral_r', geo=True, tiles='ESRI', global_extent=True)\n\n\n\n\n\nDirect access to ECCO data in S3 (from us-west-2)\nData_Access__Direct_S3_Access__PODAAC_ECCO_SSH using CMR-STAC API to retrieve S3 links"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Multi-File_Direct_S3_Access_NetCDF_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Multi-File_Direct_S3_Access_NetCDF_Example.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "In this notebook, we will access monthly sea surface height from ECCO V4r4 (10.5067/ECG5D-SSH44). The data are provided as a time series of monthly netCDFs on a 0.5-degree latitude/longitude grid.\nWe will access the data from inside the AWS cloud (us-west-2 region, specifically) and load a time series made of multiple netCDF datasets into an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\n\n\n\n\n\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata.\n\n\n\n\n\nhow to retrieve temporary S3 credentials for in-region direct S3 bucket access\nhow to define a dataset of interest and find netCDF files in S3 bucket\nhow to perform in-region direct access of ECCO_L4_SSH_05DEG_MONTHLY_V4R4 data in S3\nhow to plot the data\n\n\n\n\n\n\nimport os\nimport requests\nimport s3fs\nimport xarray as xr\nimport hvplot.xarray\n\n\n\n\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\ntemp_creds_req = get_temp_creds('podaac')\n#temp_creds_req\n\n\n\n\ns3fs sessions are used for authenticated access to s3 bucket and allows for typical file-system style operations. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'],\n                          client_kwargs={'region_name':'us-west-2'})\n\nIn this example we’re interested in the ECCO data collection from NASA’s PO.DAAC in Earthdata Cloud. In this case it’s the following string that unique identifies the collection of monthly, 0.5-degree sea surface height data (ECCO_L4_SSH_05DEG_MONTHLY_V4R4).\n\nshort_name = 'ECCO_L4_SSH_05DEG_MONTHLY_V4R4'\n\n\nbucket = os.path.join('podaac-ops-cumulus-protected/', short_name, '*2015*.nc')\nbucket\n\nGet a list of netCDF files located at the S3 path corresponding to the ECCO V4r4 monthly sea surface height dataset on the 0.5-degree latitude/longitude grid, for year 2015.\n\nssh_files = fs_s3.glob(bucket)\nssh_files\n\n\n\n\nOpen with the netCDF files using the s3fs package, then load them all at once into a concatenated xarray dataset.\n\nfileset = [fs_s3.open(file) for file in ssh_files]\n\nCreate an xarray dataset using the open_mfdataset() function to “read in” all of the netCDF4 files in one call.\n\nssh_ds = xr.open_mfdataset(fileset,\n                           combine='by_coords',\n                           mask_and_scale=True,\n                           decode_cf=True,\n                           chunks='auto')\nssh_ds\n\nGet the SSH variable as an xarray dataarray\n\nssh_da = ssh_ds.SSH\nssh_da\n\nPlot the SSH time series using hvplot\n\nssh_da.hvplot.image(y='latitude', x='longitude', cmap='Viridis',).opts(clim=(ssh_da.attrs['valid_min'][0],ssh_da.attrs['valid_max'][0]))\n\n\n\n\n\nDirect access to ECCO data in S3 (from us-west-2)\nData_Access__Direct_S3_Access__PODAAC_ECCO_SSH using CMR-STAC API to retrieve S3 links"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Data_Access_OPeNDAP_Example.html",
    "href": "how-tos/working-with-data-in-cloud/Earthdata_Cloud__Data_Access_OPeNDAP_Example.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "Requirements Earthdata Login\n\nOPeNDAP (Hyrax Server)\n\nOn-prem Endpoint - Open\nOn-prem Endpoint - Earthdata Login Authentication\nEarthdata Cloud Endpoint - Earthdata Login Authentication\n\n\n\n\n\n\nimport xarray as xr\nimport dask\nimport hvplot.xarray\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopd_sst_url = 'https://podaac-opendap.jpl.nasa.gov/opendap/allData/ghrsst/data/GDS2/L4/GLOB/NCEI/AVHRR_OI/v2/1981/244/19810901120000-NCEI-L4_GHRSST-SSTblend-AVHRR_OI-GLOB-v02.0-fv02.0.nc'\n\n\nopd_sst_ds = xr.open_dataset(opd_sst_url)\nopd_sst_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:           (lat: 720, lon: 1440, time: 1, nv: 2)\nCoordinates:\n  * lat               (lat) float32 -89.88 -89.62 -89.38 ... 89.38 89.62 89.88\n  * lon               (lon) float32 -179.9 -179.6 -179.4 ... 179.4 179.6 179.9\n  * time              (time) datetime64[ns] 1981-09-01\nDimensions without coordinates: nv\nData variables:\n    lat_bnds          (lat, nv) float32 -90.0 -89.75 -89.75 ... 89.75 89.75 90.0\n    lon_bnds          (lon, nv) float32 -180.0 -179.8 -179.8 ... 179.8 180.0\n    time_bnds         (time, nv) datetime64[ns] 1981-09-01 1981-09-02\n    analysed_sst      (time, lat, lon) float32 ...\n    analysis_error    (time, lat, lon) float32 ...\n    mask              (time, lat, lon) float32 ...\n    sea_ice_fraction  (time, lat, lon) float32 ...\nAttributes: (12/48)\n    product_version:                 Version 2.0\n    spatial_resolution:              0.25 degree\n    Conventions:                     CF-1.6,ACDD-1.3\n    title:                           NCEI global 0.25 deg daily sea surface t...\n    references:                      Reynolds, et al.(2009) What is New in Ve...\n    institution:                     NCEI\n    ...                              ...\n    source:                          AVHRR_Pathfinder-NODC-L3C-v5.1,ICOADS_SH...\n    summary:                         NOAA's 1/4-degree Daily Optimum Interpol...\n    time_coverage_start:             19810901T000000Z\n    time_coverage_end:               19810902T000000Z\n    uuid:                            39832cc3-d409-438a-820e-2bb1b38ebca8\n    DODS_EXTRA.Unlimited_Dimension:  timexarray.DatasetDimensions:lat: 720lon: 1440time: 1nv: 2Coordinates: (3)lat(lat)float32-89.88 -89.62 ... 89.62 89.88long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northcomment :Uniform grid with centers from -89.875 to 89.875 by 0.25 degrees.bounds :lat_bndsvalid_max :90.0valid_min :-90.0array([-89.875, -89.625, -89.375, ...,  89.375,  89.625,  89.875],\n      dtype=float32)lon(lon)float32-179.9 -179.6 ... 179.6 179.9long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastcomment :Uniform grid with centers from -179.875 to 179.875 by 0.25 degrees.bounds :lon_bndsvalid_max :180.0valid_min :-180.0array([-179.875, -179.625, -179.375, ...,  179.375,  179.625,  179.875],\n      dtype=float32)time(time)datetime64[ns]1981-09-01long_name :reference time of sst fieldstandard_name :timeaxis :Tbounds :time_bndscomment :Nominal time because observations are from different sources and are made at different times of the day.array(['1981-09-01T00:00:00.000000000'], dtype='datetime64[ns]')Data variables: (7)lat_bnds(lat, nv)float32...comment :This variable defines the latitude values at the north and south bounds of every 0.25-degree pixel.array([[-90.  , -89.75],\n       [-89.75, -89.5 ],\n       [-89.5 , -89.25],\n       ...,\n       [ 89.25,  89.5 ],\n       [ 89.5 ,  89.75],\n       [ 89.75,  90.  ]], dtype=float32)lon_bnds(lon, nv)float32...comment :This variable defines the longitude values at the west and east bounds of every 0.25-degree pixel.array([[-180.  , -179.75],\n       [-179.75, -179.5 ],\n       [-179.5 , -179.25],\n       ...,\n       [ 179.25,  179.5 ],\n       [ 179.5 ,  179.75],\n       [ 179.75,  180.  ]], dtype=float32)time_bnds(time, nv)datetime64[ns]...comment :This variable defines the start and end of the time span for the data.array([['1981-09-01T00:00:00.000000000', '1981-09-02T00:00:00.000000000']],\n      dtype='datetime64[ns]')analysed_sst(time, lat, lon)float32...long_name :analysed sea surface temperaturestandard_name :sea_surface_temperatureunits :kelvinvalid_min :-300valid_max :4500comment :Single-sensor Pathfinder 5.0/5.1 AVHRR SSTs used until 2005; two AVHRRs at a time are used 2007 onward. Sea ice and in-situ data used also are 'near real time' quality for recent period.  SST (bulk) is at ambiguous depth because multiple types of observations are used.source :AVHRR_Pathfinder-NODC-L3C-v5.1,ICOADS_SHIP-NCAR-IN_SITU-v2.4,ICOADS_BUOY-NCAR-IN_SITU-v2.4,GSFC_25KM-NSIDC-ICE[1036800 values with dtype=float32]analysis_error(time, lat, lon)float32...long_name :estimated error standard deviation of analysed_sstunits :kelvinvalid_min :0valid_max :32767comment :Sum of bias, sampling and random errors.[1036800 values with dtype=float32]mask(time, lat, lon)float32...long_name :sea/land field composite maskflag_meanings :water landcomment :Binary mask distinguishing water and land only.flag_masks :[1 2]source :RWReynolds_landmask_V1.0valid_max :2valid_min :1[1036800 values with dtype=float32]sea_ice_fraction(time, lat, lon)float32...long_name :sea ice area fractionvalid_min :0valid_max :100standard_name :sea_ice_area_fractionunits :1comment :7-day median filtered .  Switch from 25 km NASA team ice (http://nsidc.org/data/nsidc-0051.html)  to 50 km NCEP ice (http://polar.ncep.noaa.gov/seaice) after 2004 results in artificial increase in ice coverage.source :GSFC_25KM-NSIDC-ICE[1036800 values with dtype=float32]Attributes: (48)product_version :Version 2.0spatial_resolution :0.25 degreeConventions :CF-1.6,ACDD-1.3title :NCEI global 0.25 deg daily sea surface temperature analysis based mainly on Advanced Very High Resolution Radiometer, finalreferences :Reynolds, et al.(2009) What is New in Version 2. Available at http://www.ncdc.noaa.gov/sites/default/files/attachments/Reynolds2009_oisst_daily_v02r00_version2-features.pdf; Daily 1/4 Degree Optimum Interpolation Sea Surface Temperature (OISST)- Climate Algorithm Theoretical Theoretical Basis Document, NOAA Climate Data Record Program CDRP-ATBD-0303 Rev. 2 (2013). Available at http://www1.ncdc.noaa.gov/pub/data/sds/cdr/CDRs/Sea_Surface_Temperature_Optimum_Interpolation/AlgorithmDescription.pdf.institution :NCEInetcdf_version_id :4.3.2history :2015-11-02T19:52:40Z: Modified format and attributes with NCO to match the GDS 2.0 rev 5 specification.start_time :19810901T000000Zstop_time :19810902T000000Zwesternmost_longitude :-180.0easternmost_longitude :180.0southernmost_latitude :-90.0northernmost_latitude :90.0comment :The daily OISST version 2.0 data contained in this file are the same as those in the equivalent GDS 1.0 file.Metadata_Conventions :ACDD-1.3acknowledgment :This project was supported in part by a grant from the NOAA Climate Data Record (CDR) Program. Cite this dataset when used as a source. The recommended citation and DOI depends on the data center from which the files were acquired. For data accessed from NOAA in near real-time or from the GHRSST LTSRF, cite as: Richard W. Reynolds, Viva F. Banzon, and NOAA CDR Program (2008): NOAA Optimum Interpolation 1/4 Degree Daily Sea Surface Temperature (OISST) Analysis, Version 2. [indicate subset used]. NOAA National Centers for Environmental Information. http://doi.org/doi:10.7289/V5SQ8XB5 [access date]. For data accessed from the NASA PO.DAAC, cite as: Richard W. Reynolds, Viva F. Banzon, and NOAA CDR Program (2008): NOAA Optimum Interpolation 1/4 Degree Daily Sea Surface Temperature (OISST) Analysis, Version 2. [indicate subset used]. PO.DAAC, CA, USA. http://doi.org/10.5067/GHAAO-4BC01 [access date].cdm_data_type :Gridcreator_name :Viva Banzoncreator_email :viva.banzon@noaa.govcreator_url :http://www.ncdc.noaa.govdate_created :20091203T000000Zfile_quality_level :3gds_version_id :2.0r5geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastid :NCEI-L4LRblend-GLOB-AVHRR_OIkeywords :Oceans>Ocean Temperature>Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywords, Version 8.1license :No constraints on data access or use.metadata_link :http://doi.org/10.7289/V5SQ8XB5naming_authority :org.ghrsstplatform :NOAA-7processing_level :L4project :Group for High Resolution Sea Surface Temperaturepublisher_email :oisst_contacts@noaa.govpublisher_name :OISST Operations Teampublisher_url :http://www.ncdc.noaa.gov/sstsensor :AVHRR_GACstandard_name_vocabulary :CF Standard Name Table v29source :AVHRR_Pathfinder-NODC-L3C-v5.1,ICOADS_SHIP-NCAR-IN_SITU-v2.4,ICOADS_BUOY-NCAR-IN_SITU-v2.4,GSFC_25KM-NSIDC-ICEsummary :NOAA's 1/4-degree Daily Optimum Interpolation Sea Surface Temperature (OISST) (sometimes referred to as Reynold's SST, which however also refers to earlier products at different resolution), currently available as version 2,  is created by interpolating and extrapolating SST observations from different sources, resulting in a smoothed complete field. The sources of data are satellite (AVHRR) and in situ platforms (i.e., ships and buoys), and the specific datasets employed may change over. At the marginal ice zone, sea ice concentrations are used to generate proxy SSTs.  A preliminary version of this file is produced in near-real time (1-day latency), and then replaced with a final version after 2 weeks. Note that this is the AVHRR-ONLY DOISST, available from Oct 1981, but there is a companion DOISST product that includes microwave satellite data, available from June 2002.time_coverage_start :19810901T000000Ztime_coverage_end :19810902T000000Zuuid :39832cc3-d409-438a-820e-2bb1b38ebca8DODS_EXTRA.Unlimited_Dimension :time\n\n\n\nopd_sst_ds.analysed_sst.isel(time=0).hvplot.image(cmap='Inferno')\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nimport opendap_auth\n\n\nopendap_auth.create_dodsrc()\n\n'.dodsrc file created: /home/jovyan/.dodsrc'\n\n\nIntegrated Multi-satellitE Retrievals for GPM (IMERG) Level 3 IMERG Final Daily 10 x 10 km (GPM_3IMERGDF)\n\nopd_prec_url = 'https://gpm1.gesdisc.eosdis.nasa.gov/opendap/GPM_L3/GPM_3IMERGDF.06/2021/07/3B-DAY.MS.MRG.3IMERG.20210704-S000000-E235959.V06.nc4' \n\n\nopd_prec_ds = xr.open_dataset(opd_prec_url)\nopd_prec_ds\n\nsyntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR\ncontext: HTTP^ Basic: Access denied.\nsyntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR\ncontext: HTTP^ Basic: Access denied.\nsyntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR\ncontext: HTTP^ Basic: Access denied.\nsyntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR\ncontext: HTTP^ Basic: Access denied.\n\n\nKeyboardInterrupt: \n\n\n\nopd_prec_ds.precipitationCal.isel(time=0).hvplot.image(cmap='rainbow')\n\n\n\n\n\nedc_odp_ssh_url = 'https://opendap.earthdata.nasa.gov/providers/POCLOUD/collections/ECCO%20Sea%20Surface%20Height%20-%20Daily%20Mean%200.5%20Degree%20(Version%204%20Release%204)/granules/SEA_SURFACE_HEIGHT_day_mean_1992-01-01_ECCO_V4r4_latlon_0p50deg.dap.nc'\n\n\nedc_odp_ssh_ds = xr.open_dataset(edc_odp_ssh_url)\nedc_odp_ssh_ds\n\n\nurl = 'https://opendap.earthdata.nasa.gov/providers/POCLOUD/collections/GHRSST%20Level%204%20MUR%20Global%20Foundation%20Sea%20Surface%20Temperature%20Analysis%20(v4.1)/granules/20190201090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.dap.nc4'\n\n\nxr.open_dataset(url)\n\n\nurl = 'https://opendap.earthdata.nasa.gov/collections/C1968980576-POCLOUD/granules/S6A_P4_2__LR_RED__NR_025_001_20210713T162644_20210713T182234_F02.nc4'\n\n\nxr.open_dataset(url)\n\n\nurl = 'https://opendap.earthdata.nasa.gov/providers/POCLOUD/collections/ECCO%20Sea%20Surface%20Height%20-%20Daily%20Mean%200.5%20Degree%20(Version%204%20Release%204)/granules/SEA_SURFACE_HEIGHT_day_mean_1992-01-01_ECCO_V4r4_latlon_0p50deg.dap.nc4'\n\n\nxr.open_dataset(url)"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access_COG.html",
    "href": "how-tos/working-with-data-in-cloud/Access_COG.html",
    "title": "Access Cloud-Optimized GeoTIFF",
    "section": "",
    "text": "We will access data for the Harmonized Landsat Sentinel-2 (HLS) Operational Land Imager Surface Reflectance and TOA Brightness Daily Global 30m v2.0 (L30) ([10.5067/HLS/HLSL30.002](https://doi.org/10.5067/HLS/HLSL30.002)) data product. These data are archived and distributed as Cloud Optimized GeoTIFF (COG) files, one file for each spectral band.\nWe will access a single COG file, L30 red band (0.64 – 0.67 μm), from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataarray. This approach leverages S3 native protocols for efficient access to the data."
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access_COG.html#code",
    "href": "how-tos/working-with-data-in-cloud/Access_COG.html#code",
    "title": "Access Cloud-Optimized GeoTIFF",
    "section": "Code",
    "text": "Code\nHere are our recommended approaches for accessing COG data in NASA Earthdata Cloud with code.\n\nImport Packages\n\nPythonR\n\n\nIn Python we can use the earthaccess library.\nTo install the package we’ll run this code from the command line. Note: you can run shell code directly from a Jupyter Notebook cell by adding a !: !conda install.\n\n# Install earthaccess\nconda install -c conda-forge earthaccess\n\n\n\n\n[python code]\n\nimport earthaccess\nimport requests\nimport os\nimport boto3\nfrom osgeo import gdal\nimport rasterio as rio\nfrom rasterio.session import AWSSession\nimport rioxarray\nimport hvplot.xarray\nimport holoviews as hv\n\n#From Mahsa's tutorial in main:\n#import os\n#from osgeo import gdal\n#import rasterio as rio\n#import rioxarray\n#import hvplot.xarray\n#import holoviews as hv\n\n\n\n\n\n\n\n[R code]\n\nlibrary(rgdal)\nlibrary(raster)\nlibrary(terra)"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access_COG.html#workspace-environment-setup",
    "href": "how-tos/working-with-data-in-cloud/Access_COG.html#workspace-environment-setup",
    "title": "Access Cloud-Optimized GeoTIFF",
    "section": "Workspace Environment Setup",
    "text": "Workspace Environment Setup\n\nPythonR\n\n\nFor this exercise, we are going to open up a context manager for the notebook using the rasterio.env module to store the required GDAL configurations we need to access the data from Earthdata Cloud. While the context manager is open (rio_env.__enter__()) we will be able to run the open or get data commands that would typically be executed within a with statement, thus allowing us to more freely interact with the data. We’ll close the context (rio_env.__exit__()) at the end of the notebook.\nGDAL environment variables must be configured to access COGs from Earthdata Cloud. Geospatial data access Python packages like rasterio and rioxarray depend on GDAL, leveraging GDAL’s “Virtual File Systems” to read remote files. GDAL has a lot of environment variables that control it’s behavior. Changing these settings can mean the difference being able to access a file or not. They can also have an impact on the performance.\n\n\n\n[python code]\n\nrio_env = rio.Env(GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\n\n\n\nSet up rgdal configurations to access the cloud assets that we are interested in. You can learn more about these configuration options here.\n\n\n\n[R code]\n\nsetGDALconfig(c(\"GDAL_HTTP_UNSAFESSL=YES\",\n                \"GDAL_HTTP_COOKIEFILE=.rcookies\",\n                \"GDAL_HTTP_COOKIEJAR=.rcookies\",\n                \"GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR\",\n                \"CPL_VSIL_CURL_ALLOWED_EXTENSIONS=TIF\"))\n\n\n\n\n\nIn this example we’re interested in the HLS L30 data collection from NASA’s LP DAAC in Earthdata Cloud. Below we specify the HTTPS URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\nPythonR\n\n\n\n\n\n[python code]\n\nhttps_url = 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'\n\n\n\n\nPlease note that in R, we need to add /vsicurl/ manually to the COG file URL.\n\n\n\n[R code]\n\nhttps_url <- '/vsicurl/https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T11SQA.2021333T181532.v2.0/HLS.L30.T11SQA.2021333T181532.v2.0.B04.tif'"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access_COG.html#https-data-access",
    "href": "how-tos/working-with-data-in-cloud/Access_COG.html#https-data-access",
    "title": "Access Cloud-Optimized GeoTIFF",
    "section": "HTTPS Data Access",
    "text": "HTTPS Data Access\nRead in the HLS HTTPS URL for the L30 red band (0.64 – 0.67 μm) into our workspace. Note that, accessing files in the cloud requires you to authenticate using your NASA Earthdata Login account meaning a proper netrc file needs to be set up.\n\nPythonRMatlabCommand Line\n\n\nWe will authenticate below using a netrc file. See the (TBD) appendix for more information on netrc setup.\n\n\n\n[python code]\n\nauth = Auth().login(strategy=\"netrc\")\n# are we authenticated?\nif not auth.authenticated:\n    # ask for credentials and persist them in a .netrc file\n    auth.login(strategy=\"interactive\", persist=True)\n\n# The Store class will let us download data from NASA directly\nstore = Store(auth)\n\n\n\nWorking with the URLs directly\nIf we choose, we can use earthaccess to grab the file’s URLs and then access them with another library. Getting the links to our data is quiet simple with the data_links() method on each of the results. See the previous Find Data How-To for more information on how to discover datasets of interest.\n\n\n\n[python code]\n\n#Searching over a small plot in Nebraska, USA over two weeks in September 2022\ngranules = DataGranules().concept_id(\"C2021957657-LPCLOUD\").temporal(\"2022-09-10\",\"2022-09-24\").bounding_box(-101.67271,41.04754,-101.65344,41.06213).get()\nprint(len(granules))\ngranules[0].data_links(access=\"direct\")\n\n\n\n\nGet Temporary AWS Credentials\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs.\nCOMING SOON: We can use the earthaccess store class to pass these credentials directly to Boto3 without the need to set up this function.\n\n\n\n[python code]\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\ntemp_creds_req = get_temp_creds('lpdaac')\n\n\nCreate a boto3 Session object using your temporary credentials. This Session is used to pass credentials and configuration to AWS so we can interact wit S3 objects from applicable buckets.\n\n\n\n[python code]\n\nsession = boto3.Session(aws_access_key_id=temp_creds_req['accessKeyId'], \n                        aws_secret_access_key=temp_creds_req['secretAccessKey'],\n                        aws_session_token=temp_creds_req['sessionToken'],\n                        region_name='us-west-2')\n\n\nGDAL environment variables must be configured to access COGs in Earthdata Cloud:\n\n\n\n[python code]\n\nrio_env = rio.Env(AWSSession(session),\n                  GDAL_DISABLE_READDIR_ON_OPEN='TRUE',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\n\n\n\nDirect In-region Access\nRead in the HLS s3 URL for the L30 red band (0.64 – 0.67 μm) into our workspace using rioxarray, an extension of xarray used to read geospatial data. The file is read into Python as an xarray dataarray with a band, x, and y dimension. In this example the band dimension is meaningless, so we’ll use the squeeze() function to remove band as a dimension.\n\n\n\n[python code]\n\ns3_url = granules[0].data_links(access=\"direct\")[8]\nda = rioxarray.open_rasterio(s3_url)\nda_red = da.squeeze('band', drop=True)\nda_red\n\n\nPlot the dataarray, representing the L30 red band, using hvplot.\n\n\n\n[python code]\n\nda_red.hvplot.image(x='x', y='y', cmap='gray', aspect='equal')\n\n\nExit the context manager.\n\n\n\n[python code]\n\nrio_env.__exit__()\n\n\n\n\n\n\n\n\n[R code]\n\nda_red <- rast(https_url)\nda_red\n\n\nThe Convert a SpatRaster object to a Raster object using raster() to be able to use leaflet to plot our data.\n\n\n\n[R code]\n\nred_raster <- da_red %>% raster()\nred_raster\n\n\nThen plot the red band using plot function.\n\n\n\n[R code]\n\nplot(red_raster)\n\n\n\n\nMatlab code coming soon!\n\n# Coming soon!\n\n\n\nWith wget and curl:\n\n# Coming soon!"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access-EULA-Data.html",
    "href": "how-tos/working-with-data-in-cloud/Access-EULA-Data.html",
    "title": "How to access data with an End User License Agreement",
    "section": "",
    "text": "Coming Soon"
  },
  {
    "objectID": "how-tos/working-with-data-in-cloud/Access-EULA-Data.html#code",
    "href": "how-tos/working-with-data-in-cloud/Access-EULA-Data.html#code",
    "title": "How to access data with an End User License Agreement",
    "section": "Code",
    "text": "Code\nHere are our recommended approaches for accessing data in NASA Earthdata Cloud requiringan End-User License Agreement (EULA).\n\nPythonRMatlabCommand Line\n\n\nPython code coming soon!\n\n# Coming soon!\n\n\n\nR code coming soon!\n\n# Coming soon!\n\n\n\nMatlab code coming soon!\n\n# Coming soon!\n\n\n\nWith wget and curl:\n\n# Coming soon!"
  },
  {
    "objectID": "how-tos/how_to_guide_parking_lot.html",
    "href": "how-tos/how_to_guide_parking_lot.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "How-To Guides Parking Lot\nThis is a document to capture and organize How-To Guides that do not, yet, have a place in the Cookbook. I’ve pulled examples from the Hackday Google Doc\nNot all of these how-tos may be required. Some may be redundant. Some may be too complicated and could be broken into several How-Tos. Feel free to add comments, links, notes, etc under each suggested How-To. Also suggest changes to the wording. Following the Divio documentation guide, I’ve tried to name how-tos with descriptive names that start “How do I… ?”.\nWe need a page to explain terminology; collections, granules, …\nHow do I use Harmony to reproject a data file?\nHow do I search the USGS Landsat Cloud? How do I access data in the USGS Landsat Cloud?\nHow do I find OpenDAP datasets?\nHow do I open an OpenDAP file in the cloud? Include Authentication?\nHow do I open/access an OpenDap file from my local machine?\nHow do I open a Zarr file in the cloud? How do I open a COG (Cloud-Optimized-GeoTIFF) in the cloud?\nHow do I use Kerchunk to reformat files? needs refining\nHow do I use CMR STAC to access data in the cloud?\nHow do I use Matlab in the cloud?\nHow do I add a python package to a 2i2c environment?\nHow do I reproduce a shared cloud environment on my local machines"
  },
  {
    "objectID": "how-tos/plot/index.html",
    "href": "how-tos/plot/index.html",
    "title": "Plot Data",
    "section": "",
    "text": "Coming Soon!"
  },
  {
    "objectID": "how-tos/aggregate/aggregate.html",
    "href": "how-tos/aggregate/aggregate.html",
    "title": "Aggregate",
    "section": "",
    "text": "This is upcoming!"
  },
  {
    "objectID": "how-tos/subset/subset.html",
    "href": "how-tos/subset/subset.html",
    "title": "Subset",
    "section": "",
    "text": "Upcoming!"
  },
  {
    "objectID": "how-tos/subset/index.html",
    "href": "how-tos/subset/index.html",
    "title": "How do I subset data granules?",
    "section": "",
    "text": "How do I subset a data granule using Harmony?\nHow do I subset an OPeNDAP granule in the cloud?\nHow do I subset a data granule using xarray?"
  },
  {
    "objectID": "contributing/onboarding.html",
    "href": "contributing/onboarding.html",
    "title": "Onboarding Mentors",
    "section": "",
    "text": "As we onboard our second year of folks to grow our cross-DAAC NASA Mentors community, we will be documenting the onboarding process here. We expect Mentors to have different experiences, expertise, technical skills, and job responsibilities. Goals of onboarding will be:\n\nget to know each other\nshare previous work by NASA Mentors\nidentify common needs and priorities\nstrengthen technical skills\nstrengthen teaching skills\nbuild habits and confidence contributing to common materials\nmeet Champions and other researchers to better design how we support them\n\nWe will meet completely remotely, and primarily through Cohort Calls and Co-working sessions, and we’ll lead events like Hackathons, Workshops, and Champions Cohorts, which are all described in the approach-guide."
  },
  {
    "objectID": "contributing/onboarding.html#mentor-schedule",
    "href": "contributing/onboarding.html#mentor-schedule",
    "title": "Onboarding Mentors",
    "section": "Mentor schedule",
    "text": "Mentor schedule\nSee our schedule of events at https://nasa-openscapes.github.io/mentors"
  },
  {
    "objectID": "contributing/onboarding.html#tooling",
    "href": "contributing/onboarding.html#tooling",
    "title": "Onboarding Mentors",
    "section": "Tooling",
    "text": "Tooling\nThe tooling we use to collaborate include the following. We don’t expect everyone to have the same level of skills across all software. We will hold skill-building clinics to help strengthen familiarity and confidence, with the goal that everyone is able to contribute through overlapping and interoperable skills.\n\nJupyterHub with 2i2c\n\nJupyterLab and RStudio IDE (Matlab coming soon)\n\nNotebooks, Coding\n\nJupyter, RMarkdown, Quarto; Python, R, Matlab\n\nTerminal/shell\nGitHub: forking, cloning, pulling, committing, pushing\nGitHub Issues, project boards, code review\nSlack\n\n\nOpenscapes Slack\nChannels to join:\n\nnasa-mentors (private)\n2022-nasa-champions (private)\n#cloud-infrastructure"
  },
  {
    "objectID": "contributing/onboarding.html#mentors-google-drive",
    "href": "contributing/onboarding.html#mentors-google-drive",
    "title": "Onboarding Mentors",
    "section": "Mentors Google Drive",
    "text": "Mentors Google Drive\nWe have a shared Google Drive folder: NASA-OpenscapesMentors [ nasa-mentors ]. We’ll add you with edit privileges. There is a README file within it that orients you to the folders within. The convention is that within the [ brackets ] is who has permission within the folder."
  },
  {
    "objectID": "contributing/onboarding.html#mentors-github-organization",
    "href": "contributing/onboarding.html#mentors-github-organization",
    "title": "Onboarding Mentors",
    "section": "Mentors GitHub Organization",
    "text": "Mentors GitHub Organization\nWe’ll add you to our NASA-Openscapes GitHub Organization."
  },
  {
    "objectID": "contributing/onboarding.html#background",
    "href": "contributing/onboarding.html#background",
    "title": "Onboarding Mentors",
    "section": "Background",
    "text": "Background\nNASA Openscapes is a cross-DAAC mentor community creating & teaching resources to help researchers migrate workflows to the cloud. We meet and learn together, working with alignment on common needs for researchers using NASA Earthdata. Mentors receive Carpentries Instructor training and Openscapes mentorship to help you refine teaching strategies for Cloud, while collaborating on cloud tutorials to reuse rather than reinventing separately.\nTogether, we will teach and support in opportunities of different types: Hackathons, Workshops, and the Openscapes Champions program. We expect a range of technical ability and teaching experience. Through these growth opportunities within a broader community engagement approach, you will also gain visibility for your work as well as for your DAACs. The expected time commitment is 3-4 days/month per year. This accounts for a minimum of 4 hours/month of synchronous calls with the rest of the time being self-directed towards improving support approaches for your specific DAAC."
  },
  {
    "objectID": "contributing/slides.html",
    "href": "contributing/slides.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "quarto preview\nThis will return a url - open that url in another browser window and it will auto-refresh as you save your document. Note that previews will auto-update - but if they don’t, refresh the browser and the updates should flow again after that.\n<— From J.J.:\n\nThe websocket connection used to keep the preview live does seem to work, although I’ve seen times where a manual refresh of the browser is required. This is likely due to some very obscure websocket handling issue somewhere in the networking stack (so not really worth or even possible to debug). I would just tell people that previews will auto-update and if they don’t just refresh the browser and the updates should flow again after that.\n\n—>"
  },
  {
    "objectID": "contributing/quarto-website-tutorial.html",
    "href": "contributing/quarto-website-tutorial.html",
    "title": "Quarto Tutorial",
    "section": "",
    "text": "We’ve created a tutorial on how to copy (fork or download) an existing Quarto website like this one and adapt it for your own uses. Please see: https://openscapes.github.io/quarto-website-tutorial/."
  },
  {
    "objectID": "contributing/community.html",
    "href": "contributing/community.html",
    "title": "Community Resources",
    "section": "",
    "text": "Running the NASA Cloud Workshop notebooks with mybinder.org - by Eli Holmes, 2021 Cloud Hackathon Participant who then set up working in Binder"
  },
  {
    "objectID": "contributing/environment.html",
    "href": "contributing/environment.html",
    "title": "JupyterHub environment",
    "section": "",
    "text": "Our JupyterHub is managed by 2i2c; see background from the 2021 Cloud Hackathon [JupyterHub intro]](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/clinic/jupyterhub.html).\nWe create the environment with software packages for everyone to use - this includes python packages and quarto. Our environment is called corn, developed by NSIDC software engineer Luis Lopez. Here are some notes about corn; please refer to the GitHub README for details about installation.\nWhen looking at environment.yml: - Main dependency is python. Python 3.9 has some stability “pinned” the version - Next thing: pangeo-notebook. This is not pinned to a version, whatever their latest is best. This is what makes environment run in 2i2c - The rest are optional, they’ve been added as different groups want them - It runs on linux-64 and mac-OS - side note: ~ means “don’t update past breaking versions”.\nNow getting to a point where they are conflicting and can get into problems with deprecation and failing the environment. Next strategy: trim down “core” corn environment. Then have a process & writeup for teams to copy that environment and add their additional packages, and make sure it’s the one running in 2i2c. Point to existing resources as much as possible (i.e. Turing Way, Pangeo, Pythia); link to them from here and provide our-case-specific details here."
  },
  {
    "objectID": "contributing/environment.html#more-background",
    "href": "contributing/environment.html#more-background",
    "title": "JupyterHub environment",
    "section": "More background",
    "text": "More background\nSome articles about Python environments with Conda that are interesting and related to our 2i2c workflow:\n\nhttps://www.anaconda.com/blog/understanding-and-improving-condas-performance\nhttps://medium.com/@marius.v.niekerk/conda-metachannel-f962241c9437\nhttps://wolfv.medium.com/making-conda-fast-again-4da4debfb3b7\nhttps://pythonspeed.com/articles/conda-dependency-management/\n\nWe are doing what article the fourth article describes. We are using conda-lock with versioned dependencies. Since corn was designed to run in 2i2c I never bothered to test it for windows or OSx but I think we should offer that possibility. I added OSX and will need some volunteers to test it on Windows."
  },
  {
    "objectID": "contributing/index.html",
    "href": "contributing/index.html",
    "title": "Contributing",
    "section": "",
    "text": "The NASA Openscapes Mentor Community is collaborating to create this Cookbook, with an eye towards how others could collaborate with us in the future.\nThe Openscapes Approach Guide describes how we work, including creating space and place, having a growth mindset, psychological safety, and continual learning, practice, and iteration. It also has our code of conduct and an overview of some of the workflows and tooling we use.\nWe believe open practices can accelerate data-driven solutions and increase diversity, equity, inclusion, and belonging in science. These are critical to uncovering enduring science-based solutions faster, as well as for the well-being and resilience of research communities. We work towards kinder science.\nOur style of working is greatly influenced by:\n\nThe Turing Way Community Handbook\nThe Carpentries Curriculum Development Handbook\nThe Documentation System\nRStudio Cheatsheets\neScience Hackweeks\n\nThe Earthdata Cloud Cookbook is made with Quarto with our 2i2c JupyterHub. Learn more in the Setup and Workflow sections."
  },
  {
    "objectID": "contributing/setup.html",
    "href": "contributing/setup.html",
    "title": "Cookbook Setup",
    "section": "",
    "text": "This is the setup required to contribute to our Cookbook. It is presented in a recommended order, although the setup will depend on what workflow you already have, because there are different ways you can start working and contributing. You will need a GitHub account. You will be able to incorporate this setup into a local workflow (with Jupyter Lab, VS Code, RStudio, etc), and as you develop tutorials on the Cloud, you will need to get setup with our 2i2c JupyterHub.\nThis chapter describes initial setup, with workflows described in more detail in the next chapter."
  },
  {
    "objectID": "contributing/setup.html#create-a-github-account",
    "href": "contributing/setup.html#create-a-github-account",
    "title": "Cookbook Setup",
    "section": "Create a GitHub Account",
    "text": "Create a GitHub Account\n\nGitHub: https://github.com\nFollow optional advice on choosing your username"
  },
  {
    "objectID": "contributing/setup.html#github-clinic",
    "href": "contributing/setup.html#github-clinic",
    "title": "Cookbook Setup",
    "section": "GitHub Clinic",
    "text": "GitHub Clinic\nOur GitHub Clinic introduces GitHub with the motivation of collaboration and open science. It is designed for both new and seasoned learners, focused on how develop workflows with diverse teams. It provides a foundation of skills for how we work, learn, and teach together.\n\nGitHub Clinic (slides)\n\nVideo recordings\n\nPart 1: Publishing (video), recorded as 19 minutes of lesson, cut for participants hands-on in breakout rooms, and 5 minutes of followup lesson.\nPart 2: Project Management (video), recorded as 9 minutes of lesson, cut for participants hands-on in breakout rooms, and 5 minutes of followup lesson.\nPart 3: 2i2c JupyterHub (video) introduces a beginning GitHub workflow from our 2i2c JupyterHub. It is recorded as 9 minutes of lesson."
  },
  {
    "objectID": "contributing/setup.html#access-jupyterhub",
    "href": "contributing/setup.html#access-jupyterhub",
    "title": "Cookbook Setup",
    "section": "Access JupyterHub",
    "text": "Access JupyterHub\nOur Openscapes 2i2c JupyterHub is available for Mentors and their colleagues to develop, test, and teach. Using the JupyterHub is described in the tutorials (link upcoming as that is tidied).\nTo request access, fill out this JupyterHub request form. You’ll need a GitHub username (internal)."
  },
  {
    "objectID": "contributing/setup.html#clone-cookbook-from-github",
    "href": "contributing/setup.html#clone-cookbook-from-github",
    "title": "Cookbook Setup",
    "section": "Clone Cookbook from GitHub",
    "text": "Clone Cookbook from GitHub\nNow clone our Cookbook and set the cloned repository as your current directory.\ngit clone https://github.com/NASA-Openscapes/earthdata-cloud-cookbook\ncd earthdata-cloud-cookbook\n#| eval: false\ngit clone https://github.com/NASA-Openscapes/earthdata-cloud-cookbook\ncd earthdata-cloud-cookbook"
  },
  {
    "objectID": "contributing/setup.html#configure-github-with-pat",
    "href": "contributing/setup.html#configure-github-with-pat",
    "title": "Cookbook Setup",
    "section": "Configure GitHub, with PAT",
    "text": "Configure GitHub, with PAT\nTo configure your GitHub account in the 2i2c JupyterHub, follow these 2021 Cloud Hackathon instructions: setup PAT. These instructions are to setup your Hub’s PAT through Jupyter and will also set up credentials for RStudio users. However for RStudio-specific instructions (not specific to our 2i2c Hub) please also see Happy Git with R."
  },
  {
    "objectID": "contributing/setup.html#sync-from-2i2c-local-to-github-remote",
    "href": "contributing/setup.html#sync-from-2i2c-local-to-github-remote",
    "title": "Cookbook Setup",
    "section": "Sync from 2i2c (local) to GitHub (remote)",
    "text": "Sync from 2i2c (local) to GitHub (remote)\nEnsure you can sync and practice the GitHub workflow. Here, “local” means the 2i2c Hub, but could also mean your local desktop software for Jupyter, VS Code, RStudio, etc.\nSyncing to GitHub.com means 4 steps:\n\nPull\nStage\nCommit\nPush\n\n\n\n\n\n\nReview the 2021 Cloud Hackathon instructions for step-by-step screenshots for syncing. RStudio users can follow R for Excel Users instructions."
  },
  {
    "objectID": "contributing/setup.html#build-cookbook",
    "href": "contributing/setup.html#build-cookbook",
    "title": "Cookbook Setup",
    "section": "Build Cookbook!",
    "text": "Build Cookbook!\nWe use Quarto to build (“serve”) our Cookbook and publish it via GitHub. In the Terminal, your current directory should already be the cookbook (cd earthdata-cloud-cookbook). Type the following, which will open the Cookbook as a new tab in your browser:\nquarto serve\nBackground: Quarto is a new open-source scientific and technical publishing system. It makes collaborating to create technical documentation streamlined because we work in plain text documents that can have executable code (Python, R) and are rendered using Jupyter and Knitr engines. Explore Quarto and use it hands-on in our separate Quarto Website Tutorial. Quarto is already installed in our JupyterHub.\nNow you’re all set to contribute to the Cookbook! Read about how in the next chapter."
  },
  {
    "objectID": "contributing/workflow.html",
    "href": "contributing/workflow.html",
    "title": "Workflow",
    "section": "",
    "text": "Your workflow can be from whatever software you are most comfortable with: you can develop chapters working in an integrated development environment (IDE) like RStudio or VS Code, notebook interface like JupyterLab, or a text editor. You’ll develop content like you normally would, executing all code like you normally would as you develop your .ipynb , .md , .Rmd, and .qmd files. By default, when we build the Cookbook it will not execute code in Jupyter notebooks.\nThen, when you’re ready to update your contribution in the Cookbook, Quarto will combine all the files to make the Cookbook (or other books like it!). Below is a full workflow but depending on how you’re contributing, you may have more focus on different parts of it."
  },
  {
    "objectID": "contributing/workflow.html#quickstart-reference",
    "href": "contributing/workflow.html#quickstart-reference",
    "title": "Workflow",
    "section": "Quickstart reference",
    "text": "Quickstart reference\n\nDaily setup: get the latest!\nMake sure you have a recent version of Quarto.\n\n\n\n\n\n\nSummary of GitHub and Quarto commands detailed below\n\n\n\n\n\n## check which branches exist, where you are, and pull recent from main branch\ngit branch\ngit checkout main\ngit pull\n\n## create and switch to new branch\ngit checkout -b branch-name\n\n## develop content: write prose in markdown, code in R and Python\n## remember to render any .ipynb, .rmd, or .qmd files before pushing\nquarto serve\nquarto render # can also render single file\n\n## commit changes\ngit add --all\ngit status\ngit commit -m \"my commit message here\"\n\n## push changes\ngit push -u origin branch-name  # connect your branch to github.com and push\n\n## create a pull request\n## from GitHub.com, create a pull request and once it is merged, delete your branch\n\n## delete branch\ngit checkout main         # switch to the main branch\ngit pull                  # pull merged updates from github.com\ngit branch -d branch-name # delete old local  branch"
  },
  {
    "objectID": "contributing/workflow.html#github-workflow",
    "href": "contributing/workflow.html#github-workflow",
    "title": "Workflow",
    "section": "GitHub Workflow",
    "text": "GitHub Workflow\nFirst let’s talk about the GitHub part of the workflow.\nWe will work in branches so as to not overwrite each other’s work, and let GitHub do what it does best.\nThe main branch will be the current approved version of the book. The main branch is what displays at https://nasa-openscapes.github.io/earthdata-cloud-cookbook.\nA nice clean workflow with branches is to consider them temporary. You pull the most recent from main, you create a branch locally, you make your edits, you commit regularly, you push regularly to github.com, and then you create a pull request for it to be merged into main, and when it’s approved the branch is deleted on github.com and you also delete it locally. That’s the workflow we’ll walk through here. A great resource on GitHub setup and collaboration is Happy Git with R, which includes fantastic background philosophy as well as bash commands for setup, workflows, and collaboration.\nThe following assumes you’ve completed the initial setup from the previous chapter.\n\nBranch setup\nFirst off, check what branch you’re on and pull the most recent edits from the main branch. If you need to switch branches, use git checkout. *Note: a new alternative to git checkout is git switch (see this blog); when you updated git consider using it here instead too.\ngit branch          # returns all local branches\ngit checkout main   # switch branch to main\ngit pull            # pull most recent from the main branch\nIf you are already on the main branch, git will tell you, and that’s fine.\n(If you have any residual branches from before, you’ll likely want to start off by deleting them — assuming they were temporary and have been merged into github.com. You can delete a branch with git branch -d branch-name).\nNext, create a new branch, then switch to that branch to work in. Below is a one-step approach for the two-step process of git branch branch-name then git checkout branch-name (read more).\ngit checkout -b branch-name  # create and switch to new branch\n\n\nDevelop content\nTime to edit and develop content, and run your Quarto Workflow – see specific instructions below. While you’re developing, you’ll want to frequently commit and push your changes.\n\n\nCommit changes\nYou’ll commit your work regularly as you go, likely using the following, which commits all files you’ve affected within the Cookbook project:\ngit add --all\ngit commit -m \"my commit message here\"\nFrom R Packages by Hadley Wickham:\n\nA commit takes a snapshot of your code at a specified point in time. Using a Git commit is like using anchors and other protection when climbing. If you’re crossing a dangerous rock face you want to make sure you’ve used protection to catch you if you fall. Commits play a similar role: if you make a mistake, you can’t fall past the previous commit.\n\nHere are more of Hadley’s suggested best practices.\n\n\nPush changes\nWhen you’re ready to push changes you’ve made in your branch, you’ll first need to connect it to github.com by pushing it “upstream” to the “origin repository” (-u below is short for --set-upstream):\ngit push -u origin branch-name  # connect your branch to github.com and push\nThe above is a one-time command to connect your local branch back to github.com. After you’ve pushed successfully the first time, then as you continue to commit, you’ll be able to push as normal:\ngit push\n\n\nDelete your local changes\nThere are several ways to delete your local changes if you were playing around and want to reset. Here are a few:\nBurn it all down - delete the whole repo that you have locally, and then reclone.\ncd 2021-Cloud-Hackathon\nrm -rf 2021-Cloud-Hackathon \nUndo changes you’ve maybe saved or committed, but not pushed. This is less time and internet intensive (no new clone/download).\nIf you’ve got changes saved, but not yet staged, committed, or pushed, you’ll delete unstaged changes in the working directory with clean:\ncd 2021-Cloud-Hackathon\ngit clean -df\ngit checkout -- .\nHere is a whole blog on how to do this, with conceptual diagrams, command line code, and screenshots from RStudio. https://ohi-science.org/news/github-going-back-in-time\n\n\nUpdate local branch with remote main branch\nIf while you’re working you would like to update your local your-branch with the most recent updates on the main branch on GitHub.com, there are several ways to do this.\n\ncheckouts and merge main\nGit Update Local Branch with remote Master\ngit checkout main\ngit pull\ngit checkout your-branch\ngit merge main\n\n\nfetch and merge origin/main\ngit checkout your-branch\ngit fetch\ngit merge origin/main\n\n\n\nPull Request\nNow you’ve synced your work to github.com. It is currently online, in a separate branch from the main branch. Go to https://github.com/nasa-openscapes/earthdata-cloud-cookbook, find your branch, and do a pull request.\nTODO: Let’s discuss our review process:\n\nTag someone to review, (including you if it’s a quick fix?)\nTimeline\nMerging\n\nWhen the pull request is merged, delete the branch on github.com. GitHub will prompt you with a button at the end of the merge.\n\n\nDelete Branch\nOnce your pull request is merged and you’ve deleted the branch from github.com, then come back to your local setup and delete the branch locally:\ngit checkout main         # switch to the main branch\ngit pull                  # pull merged updates from github.com\ngit branch -d branch-name # delete old local  branch"
  },
  {
    "objectID": "contributing/workflow.html#quarto-workflow",
    "href": "contributing/workflow.html#quarto-workflow",
    "title": "Workflow",
    "section": "Quarto Workflow",
    "text": "Quarto Workflow\nNow the fun part! Our overall workflow will be to serve the book at the beginning, develop/edit chapters as simple text files (.md/.qmd/.Rmd) or executable notebooks (.ipynb) that will all render into the book.\nQuarto lets us easily convert between file types, so depending on how you prefer to work and how you’d like to interact with different audiences, we can go between formats as we wish. For example, we can converting an existing .ipynb to .qmd to collaborate during development, and then convert back to .ipynb files for our workshops. See quarto convert help for details.\nAs you work, you’ll follow our GitHub workflow above, committing regularly. Remember to execute code in your Jupyter notebook ( .ipynb file)as you’re working so that your changes will be be included in the Cookbook before pushing to github.com.\nThe following is to run Quarto from the command line in our JupyterHub; see quarto.org to see equivalents in RStudio. See also this video (TODO link) demonstrating this workflow.\n\nQuarto preview\nThe thing to do first is to “preview” the Cookbook so that we can see what it looks like as we develop the chapters.\nRun the following from your branch in your earthdata-cloud-cookbook directory from the command line:\nquarto preview\nAnd after it is served, paste the url into your browser to see the development version of the Cookbook.\n\n\n\n\n\n\nThis command line instance is now being used to preview Quarto\n\n\n\nYou can open another instance to continue working from the command line, including running other shell commands and rendering (see next). Launching your command line shell of choice will open a new instance.\n\n\n\n\nDevelop Cookbook Content\nYou can develop Cookbook chapters in the text editor, IDE, or notebook editor of your choice (i.e. see JupyterLab with Quarto).\n\nRStudio IDE & Visual Editor\nYou can also use the RStudio IDE. It can be used as a simple text editor, but it can also interactively execute code in .qmd and .Rmd files too.\nThe RStudio IDE Visual Editor makes this experience feel like a cross between an interactive notebook and a Google Doc:\n\n\n\nThe RStudio IDE Visual Editor with an interactive .qmd file\n\n\nAbove shows the Visual Editor in the top left pane with an interactive .qmd file. Learn more about the RStudio Visual Editor.\nAnother benefit of the RStudio IDE is that it has a docked command line (Terminal, bottom left pane), file navigation (bottom right pane) and GitHub interface (top right pane). The IDE helps keep things organized as you work, and provides a visual way to review your git commits and do common commands (see this RStudio-GitHub walk through from R for Excel Users). Note too that the image shows the second instance of the Terminal command line; the first is being used to serve Quarto.\n\n\n\nQuarto render\nAs you develop book chapters and edit files, any .md files will automatically refresh in the browser (so long as quarto serve is running)!\nTo refresh files with executable code, you’ll need to render them individually. You can do the following to render .ipynb/.qmd/.Rmd files so that they show up refreshed in the served Cookbook.\nquarto render my-document.ipynb      ## render a notebook\nquarto render my-work.qmd            ## render a Quarto file\nquarto render my-contribution.Rmd    ## render a RMarkdown file\nFrom the RStudio IDE, you can also press the Render button to render .qmd and .Rmd files.\nAnd you can also render the whole book:\nquarto render\nLearn more about rendering with Quarto. From J.J. Allaire:\n\nThe reason Quarto doesn’t render .Rmd and .qmd on save is that render could (potentially) be very long running and that cost shouldn’t be imposed on you whenever you save. Here we are talking about the age old debate of whether computational markdown should be rendered on save when running a development server. Quarto currently doesn’t do this to give the user a choice between an expensive render and a cheap save.\n\n\n\nIncludes (re-use markdown)\nWe are setup with an includes filter (details at Quarto.org) that lets us re-use markdown content within a project! (You can think of this like “knit child” in R Markdown and lets you source text like you source scripts from each other). This means that we can write text more modularly and re-use it in multiple places so that it’s always up to date.\nAn example of this in action is in our 2021-Cloud-Hackathon Quarto book, where each day of the schedule is saved in a separate file:\n\n\nThis is then called within a book chapter, with a relative filepath:\nThe Clinic will occur in 2 halves, with a 5 minute break in-between:\n\n{.include}\n../logistics/_schedule-clinic.md\n…to finally look like so:\n\nIncludes - things to note\n\nprefix files to include with an underscore.\n\nFrom quarto.org: You should always use an underscore prefix with included files so that they are automatically ignored (i.e. not treated as standalone files) by a quarto render of your project."
  },
  {
    "objectID": "contributing/workflow.html#i2c-workflow",
    "href": "contributing/workflow.html#i2c-workflow",
    "title": "Workflow",
    "section": "2i2c Workflow",
    "text": "2i2c Workflow\nWe use 2i2c to run notebooks.\n\nLog into 2i2c\n\nGo to the openscapes 2i2c. You should see the openscapes 2i2c instance.\nClick on the orange “Log in to continue” button. You should see the Openscapes-Prod page.\nClick the “Sign in with Github” button and log in. If you aren’t already logged into Github, you should see the login prompt. Otherwise, you will be logged in automatically.\n\n\n\nStart a 2i2c session\nAt this point, what you see depends on whether or not you have an active session. If your session is active, JupyterLab will load and you can start your work. If not, you’ll need to start a new session:\n\nSelect a server based on the size of your job. You should see a progress window showing you what 2i2c is doing to get your session started. It may take several minutes, but you’ll eventually see a JupyterLab instance.\n\n\n\nCreate a Jupyter kernel to run notebooks\nThe default jupyter kernel may not have all the libraries you need to run a notebook. Fortunately, you can make a new kernel on the fly to use with the notebook.\n\nOpen a terminal in JupyterLab.\n\nClick on the large blue “+” button on the upper left. You should get a new Laucher tab.\nIn the Launcher tab, click on “Terminal” under “Other.” You should get a tab with a command line prompt.\n\nCreate a conda environment using your favorite method.\nActivate the new environment with conda activate YOUR_ENVIRONMENT_HERE. You should see the name of the new environment in your command line prompt.\nCreate a new kernel by calling ipython kernel install --name YOUR_ENVIRONMENT_HERE --user. You should get a response saying saying the kernel has been installed.\n\nTo use this new kernel,\n\nOpen the notebook you want to run. You should see the notebook in a tab.\nClick on the current kernel on the upper right. The default kernel is called Python 3. You should see a kernel selection widget.\nSelect the new kernel you created and click the “Select” button. The kernel on the upper right should now give the name of your custom kernel.\n\n\n\nDockerfile\nTo update the Dockerfile, see corn’s README."
  },
  {
    "objectID": "contributing/workflow.html#virtual-environments",
    "href": "contributing/workflow.html#virtual-environments",
    "title": "Workflow",
    "section": "Virtual Environments",
    "text": "Virtual Environments\nIf you are working on a chapter that loads any Python or R packages, to make your work reproducible you’ll need to create and then update the environments.txt file. Do this use the pip freeze command:\npip freeze > requirements.txt\nThis will overwrite/update the requirements.txt file. Depending on where you are working, you might also want to create a new subfolder to store the requirements.txt. See the next section on Cookbook Structure.\nYou you will then commit and push along with your other edits back to github.com.\nTODO: info about conda…"
  },
  {
    "objectID": "contributing/workflow.html#cookbook-structure",
    "href": "contributing/workflow.html#cookbook-structure",
    "title": "Workflow",
    "section": "Cookbook Structure",
    "text": "Cookbook Structure\nEach chapter in our Cookbook is a separate file (.md/ .ipynb/.qmd/.Rmd). These are stored in our files directory, organized by sub-directory.\nThe Cookbook structure (i.e. the order of sections and chapters) is determined in the _quarto.yml file in the root directory. We can shuffle chapter order by editing the _quarto.yml file, and and add new chapters by adding to the _quarto.yml and creating a new file in the appropriate sub-directory that is indicated in _quarto.yml.\n\n\n\nComparing `_quarto.yml` file to served project in the browser\n\n\nPlease experiment, add new chapters and sections; we can shuffle chapter order and subsections as we continue to develop the Cookbook, nothing is set in stone."
  },
  {
    "objectID": "contributing/workflow.html#cookbook-practices",
    "href": "contributing/workflow.html#cookbook-practices",
    "title": "Workflow",
    "section": "Cookbook Practices",
    "text": "Cookbook Practices\nThese are shared practices that we have for co-developing the Cookbook. This will be developed further as we go!\n\nMarkdown formatting with Quarto\nQuarto expects a certain “flavor of Markdown”, which means there are a few things we should be aware of with any Markdown in notebooks:\nAvoid --- as Markdown breaks because it is confused with yaml headers and will stop displaying your notebook. Instead, use *** to make any line breaks.\nPut a carriage return before lists\nThis will avoid the following, when ipynb can display the list correctly with no carriage return but quarto does not.\n\n\n\nmarkdown-nospace-ipynb\n\n\n\n\nExecuting notebooks\nAs you develop files with executable code ( .qmd, .Rmd, and .ipynb), you can decide if you don’t want the notebook to execute. By adding YAML as a raw text cell at the top of an .ipynb file, you can control whether it is executed or not. Adding execute: false to the YAML at the top of the file basically means that Quarto never runs the code, but the user of course still can interactively in Jupyter.\nUsing .qmd there are also ways to control execution cell-by-cell via # | syntax within a code chunk; see https://quarto.org/docs/computations/execution-options.html\n\n\nIncluding remote notebooks\nWe can include remote notebooks in the Cookbook by explicitly importing them with the following steps. This will create a local copy of them that have additional preamble inserted that includes the original urls and attribution for the notebook.\n\nNavigate to the _import directory.\nOpen assets.json in a text editor. Copy an existing example and use the same structure to indicate the remote notebook you’d like to include. You can write Markdown in the preamble.\n\ntitle: this will be the new title of the notebook\npreamble: this text will be inserted into the notebook below the new title. It should include any description and attribution of the notebook. The preamble is followed by two URL fields (next):\nsource: the url landing page. This should be more general than the specific notebook (i.e. this could be the root GitHub repository).\nurl: the url of the notebook. (i.e. a url that ends with .ipynb)\ntarget: the local filename to give the notebook. The notebook will be saved in the external folder in the root directory.\nprocess: true or false: whether or not to include the entire entry when running the quarto_import.py script\n\n\nAfter these updates to _import/assets.json, to the following in the terminal:\ncd _import\nconda env update -f environment.yml\nconda activate quarto-import\npython quarto_import.py -f assets.json\nThis will return a confirmation of the file that has been processed.\nThen update _quarto.yml by adding your file (external/<target) to the appropriate location in the Cookbook.\n\n\nCreate a .qmd from external .ipynb\nThis is a bit of a hacky way that we can formalize further if it’s useful:\n\nGo to an existing notebook, e.g. https://github.com/podaac/AGU-2020/blob/main/Part-II/01_sst_shpfile/AGU_tutorial1_shp_search.ipynb\nClick on Raw, e.g. https://raw.githubusercontent.com/podaac/AGU-2020/main/Part-II/01_sst_shpfile/AGU_tutorial1_shp_search.ipynb\nCopy text\nIn your local setup (e.g. RStudio IDE): New File > Text File > Paste > Save (with the same name if appropriate) and .ipynb extension, e.g.: discovery/search-by-shapefile.ipynb\nIn the command line:\n\n#| eval: false\nquarto convert help # reminder of commands!\nquarto convert discovery/search-by-shapefile.ipynb # convert to .qmd\nrm discovery/search-by-shapefile.ipynb # delete .ipynb"
  },
  {
    "objectID": "contributing/workflow.html#notebook-review",
    "href": "contributing/workflow.html#notebook-review",
    "title": "Workflow",
    "section": "Notebook Review",
    "text": "Notebook Review\n\nPreamble\nGitHub displays differences in code, so a nice way to review other people’s work (or your own) is to edit files directly and view the commit differences at GitHub. We’ll do this by first creating a branch and pull request so that that there is a chance for the original author to be notified of the suggestions and review them before merging back to the main branch (at which point the quarto book/site will be rebuilt since we have a GitHub action setup to do so).\nGitHub can have trouble with .ipynb notebooks; their differences include file-formatting changes and are often too big to display. See examples: CMR notebook with file-formatting diffs and the CMR-STAC API notebook review with diffs too big to display. This means that while you can still edit it directly, it’s hard to alert the author to what changes you made. Some emerging conventions to help with this:\n\nwrite TODO for “to do’s”, but this as one word all-caps makes it easier to search\n\n\n\nReview with .qmds\nSince quarto notebook files (.qmds) are text files, GitHub can display their differences nicely, for example: CMR-STAC API qmd.\nHere is a workflow to leverage .qmds in our review process:\n\nClone/pull the repo, create a branch following our GitHub Workflow above\n\n## git clone and branch\ngit clone https://github.com/NASA-Openscapes/2021-Cloud-Hackathon/\ngit checkout -b my-new-branch\n\nIn the terminal, use quarto convert to convert a notebook from .ipynb to .qmd. You’ll have to either cd into the folder or you can convert by specifying the filepath. Typing quarto convert help will describe more options. The following will create tutorials/Data_Discovery__CMR-STAC_API.qmd.\n\n## quarto convert\nquarto convert tutorials/Data_Discovery__CMR-STAC_API.ipynb\n\nCommit this file now so that the whole file is tracked and any changes you make will be viewed as diffs.\nNow, make edits/review the .qmd in your editor of choice, which will likely also have spell-check and markdown support. At the moment, this is best with making edits to the .qmd locally while ALSO running the .ipynb notebook in 2i2c. This will iterate as we get quarto set up in 2i2c (and as we work more with .qmds).\nWhen you’re done with your review, you’ll want to copy all your edits from the .qmd back to the .ipynb. This way, the notebook author can both easily see the diffs made to the .qmd, and run the .ipynb as they normally would in 2i2c. The following code creates tutorials/Data_Discovery__CMR-STAC_API.ipynb, and over-write the original .ipynb with your changes.\n\nquarto convert tutorials/Data_Discovery__CMR-STAC_API.qmd \n\nQuarto will consider the .qmd book chapter and try to render it. To avoid this, by hand you can prefix the filename with an underscore: before you push: _Data_Discovery__CMR-STAC_API.qmd (do this by hand for now, we’ll iterate further)\nFinally, commit and push your review!"
  },
  {
    "objectID": "contributing/workflow.html#code-review",
    "href": "contributing/workflow.html#code-review",
    "title": "Workflow",
    "section": "Code Review",
    "text": "Code Review\nUpcoming."
  },
  {
    "objectID": "contributing/workflow.html#troubleshooting",
    "href": "contributing/workflow.html#troubleshooting",
    "title": "Workflow",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nError: AddrInUse\nERROR: AddrInUse: Address already in use (os error 48)\nThis error is because you had more than one instance of quarto serve going in your session. So close other command line instances that are running and try again. (If you use the R package and do quarto_serve() it will automatically make sure you only ever have 1 instance.)\n\n\nLeave/exit a virtual environment\nIn your Command Line Shell, if you want to leave your virtual environment, the command is:\ndeactivate\nThe way you tell that you are in a virtual environment: it’s named in parentheses at the beginning of your prompt:\n(.venv) (base) JLos-Macbook-Pro:earthdata-cloud-cookbook lowndes$ deactivate\n(base) JLos-Macbook-Pro:earthdata-cloud-cookbook lowndes$"
  },
  {
    "objectID": "contributing/resources.html",
    "href": "contributing/resources.html",
    "title": "Resources",
    "section": "",
    "text": "“A guide for astronauts (now, programmers using Git) about what to do when things go wrong.”\nhttps://github.com/k88hudson/git-flight-rules\nThis is quite a comprehensive and maintained list of git commands, using the command line."
  },
  {
    "objectID": "cheatsheets.html",
    "href": "cheatsheets.html",
    "title": "Cheatsheets, Guides, & Slides",
    "section": "",
    "text": "What does working with NASA Earthdata Cloud data look like?\nHere are some cheatsheets and guides helping visualize what working with NASA Earthdata Cloud data looks like, and how to get started.\nAll slides and cheatsheets are available for re-use and remix! Let us know what you think! We welcome your input so we can continue to improve and update these guides. Slides are credited for each deck; Cheatsheets development have been led by Catalina Oaida Taglialatela and Cassie Nickles (PO.DAAC) in Spring 2022."
  },
  {
    "objectID": "cheatsheets.html#cheatsheets-guides",
    "href": "cheatsheets.html#cheatsheets-guides",
    "title": "Cheatsheets, Guides, & Slides",
    "section": "Cheatsheets & Guides",
    "text": "Cheatsheets & Guides\n(Internal link).\n\nWhat is the NASA Earthdata Cloud?\nNASA Earthdata Cloud is the NASA archive of Earth observations and is hosted in Amazon Web Services (AWS) cloud with DAAC tools and services built for use “next to the data.” The NASA DAACs (data centers) are currently transitioning to this cloud-based environment. The cloud offers a scalable and effective way to address storage, network, and data movement concerns while offering a tremendous amount of flexibility to the user. Particularly if working with large data volumes, data access and processing would be more efficient if workflows are taking place in the cloud, avoiding having to download large data volumes. Data download will continue to be freely available to users, from the Earthdata Cloud archive.\n\n\nPublished Google Slide\n\n\nCloud Access Pathways\nThree pathway examples, to interact and access data (and services) from and within the NASA Earthdata Cloud, are illustrated in the diagram. Green arrows and icons indicate working locally, after downloading data to your local machine, servers, or compute/storage space. Orange arrows and icons highlight a workflow within the cloud, setting up your own AWS EC2 cloud instance, or virtual machine, in the cloud next to the data. Blue arrows and icons also indicate a within the cloud workflow, through shareable cloud environments such as Binder or JupyterHub set up in an AWS cloud region. Note that each of these may have a range of cost models. EOSDIS data are being stored in the us-west-2 region of AWS cloud; we recommend setting up your cloud computing environment in the same region as the data for free and easy in-cloud access.\n\n\nPublished Google Slide\nA note on costing: What is free and what do I have to budget for, now that data is archived in the cloud?\n\nDownloading data from the Earthdata Cloud archive in AWS, to your local computer environment or local storage (e.g. servers) is and will continue to be free for the user.\nAccessing the data directly in the cloud (from us-west-2 S3 region) is free. Users will need a NASA Earthdata Login account and AWS credentials to access, but there is no cost associated with these authentication steps, which are in place for security reasons.\nAccessing data in the cloud via EOSDIS or DAAC cloud-based tools and services such as the CMR API, Harmony API, OPenDAP API (from us-west-2 S3 region) is free to the user. Having the tools and services “next to the data” in the cloud enables DAACs to support data reduction and transformation, more efficiently, on behalf of the user, so users only access the data they need.\nCloud computing environments (i.e. virtual machines in the cloud) for working with data in the cloud (beyond direct or via services provided access) such as data analysis or running models with the data, is user responsibility, and should be considered in budgeting. I.e. User would need to set up a cloud compute environment (such as an EC2 instance or JupyterLab) and are responsible for any storage and computing costs.\n\nThis means that even though direct data access in the cloud is free to the user, they would first need to have a cloud computing environment/machine to execute the data access step from, and then continue their analysis.\nDepending on whether that cloud environment is provided by the user themselves, user’s institution, community hubs like Pangeo or NASA Openscapes JupyterLab sandbox, this element of the workflow may require user accountability, budgeting and user financial maintenance.\n\n\n\n\nGetting Started Roadmap\n\nCloud Workflow\nThe following is a conceptual roadmap for users getting started with NASA Earth Observations cloud-archived data using an in-cloud workflow (i.e. bringing user code into the cloud, avoiding data download and performing data workflows “next to the data”).\n\n\nPublished Google Slide\n\n\nLocal Workflow\nThe following is a conceptual roadmap for users getting started with NASA Earth Observations cloud-archived data using a local machine (e.g. laptop) workflow, as data storage and computational work.\n\n\nPublished Google Slide\n\n\n\nTools & Services Roadmap\nBelow is a practical guide for learning about and selecting helpful tools or services for a given use case, focusing on how to find and access NASA Earthdata Cloud-archived data from local compute environment (e.g. laptop) or from a cloud computing workspace, with accompanying example tutorials. Once you follow your desired pathway, click on the respective blue notebook icon to get to the example tutorial. Note: these pathways are not exhaustive, there are many ways to accomplish these common steps, but these are some of our recommendations.\n\n\nPublished Google Slide\n\n\nCloud Terminology 101\nCloud Terminology 101 for those new to commonly used cloud computing terms and phrases.\n\n\nPublished Google Slide\n\n\nWorkflow Cheatsheet\nThe following is a practical reference guide with links to tutorials and informational websites for users who are starting to take the conceptual pieces and explore and implement in their own workflows.\n\n\nPublished Google Slide\n\n\nWorkflow Cheatsheet Terminology\nTerminology cheatsheet to explain terms commonly used in cloud computing and those located on the NASA Earthdata Cloud Cheatsheet. See also NASA Earthdata Glossary.\n\n\nPublished Google Slide"
  },
  {
    "objectID": "cheatsheets.html#slides",
    "href": "cheatsheets.html#slides",
    "title": "Cheatsheets, Guides, & Slides",
    "section": "Slides",
    "text": "Slides\nSelected presentations about working with NASA Earthdata on the Cloud; for all presentations see nasa-openscapes.github.io > slides.\n\nNASA Earthdata Cloud: Myths, Truths, Questions\nby Amy Steiker, Kate Heightley (NSIDC) September 7, 2022\n\n\nNSIDC DAAC User Working Group\nby Andrew Barrett, Amy Steiker, Walt Meier, Jennie Roebuck, Mikala Beig, Luis Lopez, (NSIDC) May 20, 2022.\n\n\nNASA Earthdata Cloud & The Cloud Paradigm\nby Aaron Friesz (LP DAAC), April 2022."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "",
    "text": "Programmatic access of NSIDC data can happen in 2 ways:"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#the-big-picture",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#the-big-picture",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "The big picture:",
    "text": "The big picture:\nThere is nothing wrong with downloading data to our local machine but that can get complicated or even impossible if a dataset is too large. For this reason NSIDC along with other NASA data centers started to collocate or migrate their dataset holdings to the cloud.\n\nSteps\n\nAuthenticate with the NASA Earthdata Login API (EDL).\nSearch granules/collections using a CMR client that supports authentication\nParse CMR responses and get AWS S3 URLs\nAccess the data granules using temporary AWS credentials given by the NSIDC cloud credentials endpoint\n\n\n\nData used:\n\nICESat-2 ATL03: This data set contains height above the WGS 84 ellipsoid (ITRF2014 reference frame), latitude, longitude, and time for all photons.\n\n\n\nRequirements\n\nNASA Eartdata Login (EDL) credentials\npython libraries:\n\nh5py\nmatplotlib\nxarray\ns3fs\npython-cmr\n\ncmr helpers: included in this notebook"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#querying-cmr-for-nsidc-data-in-the-cloud",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#querying-cmr-for-nsidc-data-in-the-cloud",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Querying CMR for NSIDC data in the cloud",
    "text": "Querying CMR for NSIDC data in the cloud\nMost collections at NSIDC have not being migrated to the cloud and can be found using CMR with no authentication at all. Here is a simple example for altimeter data (ATL03) coming from the ICESat-2 mission. First we’ll search the regular collection and then we’ll do the same using the cloud collection.\nNote: This notebook uses CMR to search and locate the data granules, this is not the only workflow for data access and discovery.\n\nHarmonyPy: Uses Harmony the NASA API to search, subset and transform the data in the cloud.\ncmr-stac: A “static” metadata catalog than can be read by Intake oand other client libraries to optimize the access of files in the cloud."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#cloud-collections",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#cloud-collections",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Cloud Collections",
    "text": "Cloud Collections\nSome NSIDC cloud collections are not yet, which means that temporarily you’ll have to request access emailing nsidc@nsidc.org so your Eartdata login is in the authorized list for early users.\n\nimport getpass\nimport textwrap\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nfrom cmr_auth import CMRAuth\n\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# Use your own EDL username\nUSER = 'betolink'\n\nprint('Enter your NASA Earthdata login password:')\npassword = getpass.getpass()\n# This helper class will handle credentials with CMR\nCMR_auth = CMRAuth(USER, password)\n# Token to search preliminary collections on CMR\ncmr_token = CMR_auth.get_token()\n\n\n# The query object uses a simple python dictionary\nquery = {'short_name':'ATL03',\n         'token': cmr_token,\n         'provider': NSIDC_PROVIDERS['AWS_HOSTED']}\n\ncollections = cmr_collection.search(query)\n\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#searching-for-data-granules-in-the-cloud-with-cmr",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#searching-for-data-granules-in-the-cloud-with-cmr",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Searching for data granules in the cloud with CMR",
    "text": "Searching for data granules in the cloud with CMR\nCMR uses different collection id’s for datasets in the cloud.\n\n# now that we have the concept-id for our ATL03 in the cloud we do the same thing we did with ATL03 hosted at\nfrom cmr_serializer import QueryResult\n# NSIDC but using the cloud concept-id\n# Jeneau ice sheet\nquery = {'concept-id': 'C2027878642-NSIDC_CPRD',\n         'token': cmr_token,\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\n\n# Print the first 3 granules\nfor g in granules[0:3]:\n    display(g)\n    # You can use: print(g) for the regular text representation.\n\n\nNOTE: Not all the data granules for NSIDC datasets have been migrated to S3. This might result in different counts between the NSIDC hosted data collections and the ones in AWS S3\n\n\n# We can list the s3 links but \nfor g in granules:\n    for link in g.data_links():\n        print(link)\n\nWe note that our RelatedLinks array now contain links to AWS S3, these are the direct URIs for our data granules in the AWS us-west-2 region."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#data-access-using-aws-s3",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#data-access-using-aws-s3",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Data Access using AWS S3",
    "text": "Data Access using AWS S3\n\nIMPORTANT: This section will only work if this notebook is running on the AWS us-west-2 zone\n\nThere is more than one way of accessing data on AWS S3, either downloading it to your local machine using the official client library or using a python library.\nPerformance tip: using the HTTPS URLs will decrease the access performance since these links have to internally be processed by AWS’s content delivery system (CloudFront). To get a better performance we should access the S3:// URLs with BOTO3 or a high level S3 enabled library (i.e. S3FS)\nRelated links: * HDF in the Cloud challenges and solutions for scientific data * Cloud Storage (Amazon S3) HDF5 Connector\n\nimport s3fs\nimport h5py\n\nimport xarray as xr\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n\n# READ only temporary credentials\n# This credentials only last 1 hour.\ns3_cred = CMR_auth.get_s3_credentials()\n\ns3_fs = s3fs.S3FileSystem(key=s3_cred['accessKeyId'],\n                          secret=s3_cred['secretAccessKey'],\n                          token=s3_cred['sessionToken'])\n\n# Now you could grab S3 links to your cloud instance (EC2, Hub etc) using:\n# s3_fs.get('s3://SOME_LOCATION/ATL03_20181015124359_02580106_004_01.h5', 'test.h5')\n\nNow that we have the propper credentials in our file mapper, we can access the data within AWS us-west-2.\nIf we are not running this notebook in us-west-2 will get an access denied error"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#using-xarray-to-open-files-on-s3",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#using-xarray-to-open-files-on-s3",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Using xarray to open files on S3",
    "text": "Using xarray to open files on S3\nATL data is complex so xarray doesn’t know how to extract the important bits out of it.\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    with h5py.File(s3f, 'r') as f:\n        print([key for key in f.keys()])\n        gt1l = xr.Dataset({'height': (['x'], f['gt1l']['heights']['h_ph'][:]),\n                       'latitude': (['x'], f['gt1l']['heights']['lat_ph'][:]), \n                       'longitude': (['x'], f['gt1l']['heights']['lon_ph'][:]),\n                       'dist_ph': (['x'], f['gt1l']['heights']['dist_ph_along'][:])})\ngt1l"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#plotting-the-data",
    "href": "examples/NSIDC/ICESat2-CMR-AWS-S3.html#plotting-the-data",
    "title": "Accessing NSIDC Cloud Collections Using CMR",
    "section": "Plotting the data",
    "text": "Plotting the data\n\ngt1l.height.plot()\n\n\n%matplotlib widget\n\nfig, ax = plt.subplots(figsize=(14, 4))\n\ngt1l.height.plot(ax=ax, ls='', marker='o', ms=1)\ngt1l.height.rolling(x=1000, min_periods=500, center=True).mean().plot(ax=ax, c='k', lw=2)\nax.set_xlabel('Along track distance (m)', fontsize=12);\nax.set_ylabel('Photon Height (m)', fontsize=12)\nax.set_title('ICESat-2 ATL03', fontsize=14)\nax.tick_params(axis='both', which='major', labelsize=12)\n\nsubax = fig.add_axes([0.69,0.50,0.3,0.3], projection=ccrs.NorthPolarStereo())\nsubax.set_aspect('equal')\nsubax.set_extent([-180., 180., 30, 90.], ccrs.PlateCarree())\nsubax.add_feature(cfeature.LAND)\nsubax.plot(gt1l.longitude, gt1l.latitude, transform=ccrs.PlateCarree(), lw=1);\n\nfig.savefig('test.png')\n\nplt.show()"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "",
    "text": "Programmatic access and processing of NSIDC data can happen in 2 ways, using the old Search -> Download -> Analize pattern or using a more modern Search -> Process_in_the_cloud -> Analyze approach.\nThere is nothing wrong with downloading data to our local machine but that can get complicated or even impossible if a dataset is too large. For this reason NSIDC along with other NASA data centers started to collocate or migrate their dataset holdings to the cloud.\nIn order to use NSIDC cloud collections we need to 1. Authenticate ourselves with the NASA Earthdata Login API (EDL). 2. Search granules/collections using a CMR client that supports authentication 3. Parse CMR responses looking for AWS S3 URLs 4. Access the data granules using temporary AWS credentials given by the NSIDC cloud credentials endpoint"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-used",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-used",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Data used:",
    "text": "Data used:\n\nICESat-2 ATL03: This data set contains height above the WGS 84 ellipsoid (ITRF2014 reference frame), latitude, longitude, and time for all photons."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#requirements",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#requirements",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Requirements",
    "text": "Requirements\n\nNASA Eartdata Login (EDL) credentials\npython libraries:\n\naws-cli\nxarray\nfs-s3fs\nzarr\ncmr\n\npython-cmr (optional fallback) NSIDC fork"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#querying-cmr-for-nsidc-data",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#querying-cmr-for-nsidc-data",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Querying CMR for NSIDC data",
    "text": "Querying CMR for NSIDC data\nMost collections at NSIDC have not being migrated to the cloud and can be found using CMR with no authentication at all. Here is a simple example for altimeter data (ATL03) coming from the ICESat-2 mission. First we’ll search the regular collection and then we’ll do the same using the cloud collection.\nNote: This notebook uses a low level CMR endpoint, this won’t be not the only workflow for data discovery.\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nimport textwrap\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# First let's search for some collections hosted at NSIDC using a keyword\ncollections = cmr_collection.search({'keyword':'ice',\n                                     'provider': NSIDC_PROVIDERS['NSIDC_HOSTED']})\n\n# Let's print some information about the first 3 collection that match our provider\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C1997321091-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C1705401930-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V003\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C2003771331-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L3A Land Ice Height V004\nAbstract: This data set (ATL06) provides geolocated, land-ice surface heights\n(above the WGS 84 ellipsoid, ITRF2014 reference frame), plus ancillary\nparameters that can be used to interpret and assess the quality of the height\nestimates. The data were acquired by the Advanced Topographic Laser Altimeter\nSystem (ATLAS) instrument on board the Ice, Cloud and land Elevation Satellite-2\n(ICESat-2) observatory.\n\n\n\n\n# Now let's do the same with short names, a more specific way of finding data.\n\n#First let's search for some collections hosted at NSIDC\ncollections = cmr_collection.search({'short_name':'ATL03',\n                                     'provider': NSIDC_PROVIDERS['NSIDC_HOSTED']})\n\n# Note how we get back the same collection twice, that's because we have 2 versions available.\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C1997321091-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\nconcept-id: C1705401930-NSIDC_ECS\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V003\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\n\n\n\n# now that we have the concept-ids we can look for data granules in that collection and pass spatiotemporal parameters.\nfrom cmr_serializer import QueryResult\n\n# a bbox over Juneau Icefield \n# bbox = min Longitude , min Latitude , max Longitude , max Latitude \nquery = {'concept-id': 'C1997321091-NSIDC_ECS',\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\n# This is a wrapper with convenient methods to work with CMR query results.\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\nfor g in granules[0:3]:\n    display(g)\n\nTotal granules found: 201 \n\n\n\n\n        \n          Id: ATL03_20181014001049_02350102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.0482205607256, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-14T00:10:49.722Z', 'EndingDateTime': '2018-10-14T00:19:19.918Z'}}\n          Size(MB): 1764.5729866028 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.14/ATL03_20181014001049_02350102_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181015124359_02580106_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': 49.70324528818096, 'StartLatitude': 59.5, 'StartDirection': 'D', 'EndLatitude': 27.0, 'EndDirection': 'D'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-15T12:43:57.696Z', 'EndingDateTime': '2018-10-15T12:52:28.274Z'}}\n          Size(MB): 276.2403841019 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.15/ATL03_20181015124359_02580106_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181018000228_02960102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.82682215638665, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-18T00:02:28.717Z', 'EndingDateTime': '2018-10-18T00:10:58.903Z'}}\n          Size(MB): 877.0574979782 \n          Data: https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL03.004/2018.10.18/ATL03_20181018000228_02960102_004_01.h5\n          \n        \n        \n\n\n\n# We  can access the data links with the data_links()\nfor g in granules[0:10]:\n    print(g.data_links())"
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#cloud-collections",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#cloud-collections",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Cloud Collections",
    "text": "Cloud Collections\nSome NSIDC cloud collections are not yet public we need to authenticate ourselves with CMR first.\n\nimport getpass\nimport textwrap\n\nfrom cmr.search import collection as cmr_collection\nfrom cmr.search import granule \nfrom cmr.auth import token\n\nfrom cmr_auth import CMRAuth\n\n# NON_AWS collections are hosted at the NSIDC DAAC data center\n# AWS_CLOUD collections are hosted at AWS S3 us-west-2\nNSIDC_PROVIDERS = {\n    'NSIDC_HOSTED': 'NSIDC_ECS', \n    'AWS_HOSTED':'NSIDC_CPRD'\n}\n\n# Use your own EDL username\nUSER= 'betolink'\n\nprint('Enter your NASA Earthdata login password:')\npassword = getpass.getpass()\nCMR_auth = CMRAuth(USER, password)\n# Token to search private collections on CMR\ncmr_token = CMR_auth.get_token()\n\nEnter your NASA Earthdata login password:\n\n\n ········\n\n\n\n# Now let's start our aunthenticated queries on CMR\nquery = {'short_name':'ATL03',\n         'token': cmr_token,\n         'provider': NSIDC_PROVIDERS['AWS_HOSTED']}\n\ncollections = cmr_collection.search(query)\n\nfor collection in collections[0:3]:\n    wrapped_abstract = '\\n'.join(textwrap.wrap(f\"Abstract: {collection['umm']['Abstract']}\", 80)) + '\\n'\n    print(f\"concept-id: {collection['meta']['concept-id']}\\n\" +\n          f\"Title: {collection['umm']['EntryTitle']}\\n\" +\n          wrapped_abstract)\n\nconcept-id: C2027878642-NSIDC_CPRD\nTitle: ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004\nAbstract: This data set (ATL03) contains height above the WGS 84 ellipsoid\n(ITRF2014 reference frame), latitude, longitude, and time for all photons\ndownlinked by the Advanced Topographic Laser Altimeter System (ATLAS) instrument\non board the Ice, Cloud and land Elevation Satellite-2 (ICESat-2) observatory.\nThe ATL03 product was designed to be a single source for all photon data and\nancillary information needed by higher-level ATLAS/ICESat-2 products. As such,\nit also includes spacecraft and instrument parameters and ancillary data not\nexplicitly required for ATL03.\n\n\n\n\n# now that we have the concept-id for our ATL03 in the cloud we do the same thing we did with ATL03 hosted at\nfrom cmr_serializer import QueryResult\n# NSIDC but using the cloud concept-id\n# Jeneau ice sheet\nquery = {'concept-id': 'C2027878642-NSIDC_CPRD',\n         'token': cmr_token,\n         'bounding_box': '-135.1977,58.3325,-133.3410,58.9839'}\n\n# Querying for ATL03 v3 using its concept-id and a bounding box\nresults = granule.search(query, limit=1000)\ngranules = QueryResult(results).items()\n\nprint(f\"Total granules found: {len(results)} \\n\")\n\n# Print the first 3 granules\nfor g in granules[0:3]:\n    display(g)\n    # You can use: print(g) for the regular text representation.\n\nTotal granules found: 135 \n\n\n\n\n        \n          Id: ATL03_20181014001049_02350102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.0482205607256, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-14T00:10:49.722Z', 'EndingDateTime': '2018-10-14T00:19:19.918Z'}}\n          Size(MB): 1764.5729866027832 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181015124359_02580106_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': 49.70324528818096, 'StartLatitude': 59.5, 'StartDirection': 'D', 'EndLatitude': 27.0, 'EndDirection': 'D'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-15T12:43:57.696Z', 'EndingDateTime': '2018-10-15T12:52:28.274Z'}}\n          Size(MB): 276.2403841018677 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5\n          \n        \n        \n\n\n\n        \n          Id: ATL03_20181018000228_02960102_004_01.h5\n          Collection: {'EntryTitle': 'ATLAS/ICESat-2 L2A Global Geolocated Photon Data V004'}\n          Spatial coverage: {'HorizontalSpatialDomain': {'Orbit': {'AscendingCrossing': -127.82682215638665, 'StartLatitude': 27.0, 'StartDirection': 'A', 'EndLatitude': 59.5, 'EndDirection': 'A'}}}\n          Temporal coverage: {'RangeDateTime': {'BeginningDateTime': '2018-10-18T00:02:28.717Z', 'EndingDateTime': '2018-10-18T00:10:58.903Z'}}\n          Size(MB): 877.0574979782104 \n          Data: https://data.nsidc.earthdatacloud.nasa.gov/nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5\n          \n        \n        \n\n\n\nNOTE: Not all the data granules for NSIDC datasets have been migrated to S3. This might result in different counts between the NSIDC hosted data collections and the ones in AWS S3\n\n# We can list the s3 links but \nfor g in granules[0:10]:\n    print(g.data_links(only_s3=True))\n\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/14/ATL03_20181014001049_02350102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/18/ATL03_20181018000228_02960102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/05/ATL03_20181105113651_05780106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/07/ATL03_20181107225525_06160102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/09/ATL03_20181109112837_06390106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/11/ATL03_20181111224708_06770102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/11/15/ATL03_20181115223845_07380102_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/12/04/ATL03_20181204101243_10200106_004_01.h5']\n['s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/12/06/ATL03_20181206213114_10580102_004_01.h5']\n\n\nWe note that our RelatedLinks array now contain links to AWS S3, these are the direct URIs for our data granules in the AWS us-west-2 region."
  },
  {
    "objectID": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-access-using-aws-s3",
    "href": "examples/NSIDC/ICESat2-CMR-OnPrem-vs-Cloud.html#data-access-using-aws-s3",
    "title": "Searching and Downloading NSIDC Cloud Collections",
    "section": "Data Access using AWS S3",
    "text": "Data Access using AWS S3\n\nIMPORTANT: This section will only work if this notebook is running on the AWS us-west-2 zone\n\nThere is more than one way of accessing data on AWS S3, either downloading it to your local machine using the official client library or using a python library.\nPerformance tip: using the HTTPS URLs will decrease the access performance since these links have to internally be processed by AWS’s content delivery system (CloudFront). To get a better performance we should access the S3:// URLs with BOTO3 or a high level S3 enabled library (i.e. S3FS)\nRelated links: * HDF in the Cloud challenges and solutions for scientific data * Cloud Storage (Amazon S3) HDF5 Connector\n\n# READ only temporary credentials\nimport s3fs\nimport h5py\n\n# This credentials only last 1 hour.\ns3_cred = CMR_auth.get_s3_credentials()\n\n\ns3_fs = s3fs.S3FileSystem(key=s3_cred['accessKeyId'],\n                          secret=s3_cred['secretAccessKey'],\n                          token=s3_cred['sessionToken'])\n\n# Now you could grab S3 links to your cloud instance (EC2, Hub etc) using:\n# s3_fs.get('s3://SOME_LOCATION/ATL03_20181015124359_02580106_004_01.h5', 'test.h5')\n\n\nWe now have the propper credentials and file mapper to access the data within AWS us-west-2.\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    with h5py.File(s3f, 'r') as f:\n        print([key for key in f.keys()])\n\n\n\nUsing xarray to open files on S3\nATL data is complex so xarray doesn’t know how to extract the important bits out of it.\n\nimport xarray\n\nwith s3_fs.open('s3://nsidc-cumulus-prod-protected/ATLAS/ATL03/004/2018/10/15/ATL03_20181015124359_02580106_004_01.h5', 'rb') as s3f:\n    ds= xarray.open_dataset(s3f)\n    for varname in ds:\n        print(varname)\nds\n\n\n\n“Downloading” files on S3 using the official aws-cli library\nThe quotes on downloading are because ideally you’ll be working on an EC2 (virtual machine for short) instance on the us-west-2 region."
  },
  {
    "objectID": "examples/Transform-workflow.html",
    "href": "examples/Transform-workflow.html",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "",
    "text": "This notebook will walk through two different access and transformation options across a single dataset available in the Earthdata Cloud: Direct s3 access and Harmony transformation services. These steps are based off of several notebook tutorials presented during the 2021 Earthdata Cloud Hackathon and 2021 AGU Workshop.\nThe following use case focuses on Sea Surface Temperature (SST) from the GHRSST MODIS L2 dataset (MODIS_T-JPL-L2P-v2019.0) available from PO.DAAC in the Earthdata Cloud.\n\n\nUsing NASA Worldview, we can first explore SST during a tropical storm event; in this case, we can overlay L2 and L4 SST variables against true color imagery to observe Hurricane Ida in August 2021. Although this is a small sample set, this use case could be expanded to explore how SST responds during the Atlantic hurricane over the next several months. The same data that we are requesting below using direct s3 access and via Harmony-py can also be requested using NASA Earthdata Search\n\n\n\nHurrican Ida snapshot - Worldview\n\n\nWe will access a single netCDF file from inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\nAfter inspecting the data, we will then access the same file, but in this case we will also subset the data to our area of interest using Harmony."
  },
  {
    "objectID": "examples/Transform-workflow.html#import-required-packages",
    "href": "examples/Transform-workflow.html#import-required-packages",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Import Required Packages",
    "text": "Import Required Packages\n\n# Earthdata Login\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom platform import system\nfrom getpass import getpass\nimport os\n\n# Direct access\nimport requests\nimport s3fs\nimport xarray as xr\nimport hvplot.xarray\n\n# Harmony\nfrom harmony import BBox, Client, Collection, Request, LinkType\nfrom harmony.config import Environment\nfrom pprint import pprint\nimport datetime as dt"
  },
  {
    "objectID": "examples/Transform-workflow.html#authentication-for-nasa-earthdata",
    "href": "examples/Transform-workflow.html#authentication-for-nasa-earthdata",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "1. Authentication for NASA Earthdata",
    "text": "1. Authentication for NASA Earthdata\nBased off of https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/tutorials/02_NASA_Earthdata_Authentication.html\nFirst, we will create a hidden .netrc file (_netrc for Window OS) with Earthdata login credentials in your home directory. This file is needed to access NASA Earthdata assets from a scripting environment like Python.\n\nEarthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\nAuthentication via netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. An example of the required content is below.\nmachine urs.earthdata.nasa.gov\nlogin <USERNAME>\npassword <PASSWORD>\n<USERNAME> and <PASSWORD> would be replaced by your actual Earthdata Login username and password respectively.\nThe code below will:\n\ncheck what operating system (OS) is being used to determine which netrc file to check for/create (.netrc or _netrc)\ncheck if you have an netrc file, and if so, varify if those credentials are for the Earthdata endpoint\ncreate a netrc file if a netrc file is not present.\n\n\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL endpoint for authentication\nprompts = ['Enter NASA Earthdata Login Username: ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine the OS (Windows machines usually use an '_netrc' file)\nnetrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(f\"~/{netrc_name}\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}{2} | echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n    # Set restrictive permissions\n    Popen('chmod 0600 {0}{1}'.format(homeDir + os.sep, netrc_name), shell=True)\n\n    # Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} >> {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} >> {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'>> {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n\n\nSee if the file was created\nIf the file was created, we’ll see a .netrc file (_netrc for Window OS) in the list printed below. To view the contents from a Jupyter environment, click File on the top toolbar, select Open from Path…, type .netrc, and click Open. The .netrc file will open within the text editor.\n\n!!! Beware, your password will be visible if the .netrc file is opened in the text editor.\n\n\n!ls -al ~/"
  },
  {
    "objectID": "examples/Transform-workflow.html#accessing-a-netcdf4hdf5-file---s3-direct-access",
    "href": "examples/Transform-workflow.html#accessing-a-netcdf4hdf5-file---s3-direct-access",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "2. Accessing a NetCDF4/HDF5 File - S3 Direct Access",
    "text": "2. Accessing a NetCDF4/HDF5 File - S3 Direct Access\n_Based off of https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/how-tos/Earthdata_Cloud__Single_File_Direct_S3_Access_NetCDF4_Example.html and https://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU/tutorials/04_On-Prem_Cloud.html\n\nSummary\nWe will access a single netCDF file from the GHRSST MODIS L2 dataset (MODIS_T-JPL-L2P-v2019.0) inside the AWS cloud (us-west-2 region, specifically) and load it into Python as an xarray dataset. This approach leverages S3 native protocols for efficient access to the data.\n\n\nRequirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\n\n\n3. netrc File\n\n\n\nLearning Objectives\n\nhow to retrieve temporary S3 credentials for in-region direct S3 bucket access\nhow to define a dataset of interest and find netCDF files in S3 bucket\nhow to perform in-region direct access of MODIS_T-JPL-L2P-v2019.0 data in S3\nhow to plot the data\n\n\n\nGet Temporary AWS Credentials\nDirect S3 access is achieved by passing NASA supplied temporary credentials to AWS so we can interact with S3 objects from applicable Earthdata Cloud buckets. For now, each NASA DAAC has different AWS credentials endpoints. Below are some of the credential endpoints to various DAACs:\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac': 'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'ghrcdaac': 'https://data.ghrc.earthdata.nasa.gov/s3credentials'\n}\n\nCreate a function to make a request to an endpoint for temporary credentials. Remember, each DAAC has their own endpoint and credentials are not usable for cloud data from other DAACs.\n\ndef get_temp_creds(provider):\n    return requests.get(s3_cred_endpoint[provider]).json()\n\n\ntemp_creds_req = get_temp_creds('podaac')\n#temp_creds_req\n\n\n\nSet up an s3fs session for Direct Access\ns3fs sessions are used for authenticated access to s3 buckets and allow for typical file-system style operations. Below we create session by passing in the temporary credentials we recieved from our temporary credentials endpoint.\n\nfs_s3 = s3fs.S3FileSystem(anon=False, \n                          key=temp_creds_req['accessKeyId'], \n                          secret=temp_creds_req['secretAccessKey'], \n                          token=temp_creds_req['sessionToken'],\n                          client_kwargs={'region_name':'us-west-2'})\n\nIn this example we’re interested in the GHRSST MODIS L2 collection from NASA’s PO.DAAC in Earthdata Cloud. Below we specify the s3 URL to the data asset in Earthdata Cloud. This URL can be found via Earthdata Search or programmatically through the CMR and CMR-STAC APIs.\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\n\n\nDirect In-region Access\nOpen with the netCDF file using the s3fs package, then load the cloud asset into a concatenated xarray dataset.\n\ns3_file_obj = fs_s3.open(s3_url, mode='rb')\n\n\nssh_ds = xr.open_dataset(s3_file_obj)\nssh_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                      (nj: 2030, ni: 1354, time: 1)\nCoordinates:\n    lat                          (nj, ni) float32 ...\n    lon                          (nj, ni) float32 ...\n  * time                         (time) datetime64[ns] 2021-08-20T03:35:00\nDimensions without coordinates: nj, ni\nData variables:\n    sea_surface_temperature      (time, nj, ni) float32 ...\n    sst_dtime                    (time, nj, ni) timedelta64[ns] ...\n    quality_level                (time, nj, ni) float32 ...\n    sses_bias                    (time, nj, ni) float32 ...\n    sses_standard_deviation      (time, nj, ni) float32 ...\n    l2p_flags                    (time, nj, ni) int16 ...\n    sea_surface_temperature_4um  (time, nj, ni) float32 ...\n    quality_level_4um            (time, nj, ni) float32 ...\n    sses_bias_4um                (time, nj, ni) float32 ...\n    sses_standard_deviation_4um  (time, nj, ni) float32 ...\n    wind_speed                   (time, nj, ni) float32 ...\n    dt_analysis                  (time, nj, ni) float32 ...\nAttributes: (12/49)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      MODIS Terra L2P SST\n    summary:                    Sea surface temperature retrievals produced a...\n    references:                 GHRSST Data Processing Specification v2r5\n    institution:                NASA/JPL/OBPG/RSMAS\n    history:                    MODIS L2P created at JPL PO.DAAC\n    ...                         ...\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L2P\n    cdm_data_type:              swath\n    startDirection:             Ascending\n    endDirection:               Ascending\n    day_night_flag:             Nightxarray.DatasetDimensions:nj: 2030ni: 1354time: 1Coordinates: (3)lat(nj, ni)float32...long_name :latitudestandard_name :latitudeunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]lon(nj, ni)float32...long_name :longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]time(time)datetime64[ns]2021-08-20T03:35:00long_name :reference time of sst filestandard_name :timecomment :time of first sensor observationcoverage_content_type :coordinatearray(['2021-08-20T03:35:00.000000000'], dtype='datetime64[ns]')Data variables: (12)sea_surface_temperature(time, nj, ni)float32...long_name :sea surface temperaturestandard_name :sea_surface_skin_temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from thermal IR (11 um) channelssource :NASA and University of Miamicoverage_content_type :physicalMeasurement[2748620 values with dtype=float32]sst_dtime(time, nj, ni)timedelta64[ns]...long_name :time difference from reference timevalid_min :-32767valid_max :32767comment :time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981coverage_content_type :referenceInformation[2748620 values with dtype=timedelta64[ns]]quality_level(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[2748620 values with dtype=float32]sses_bias(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]sses_standard_deviation(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]l2p_flags(time, nj, ni)int16...long_name :L2P flagsvalid_min :0valid_max :16comment :These flags can be used to further filter data variablesflag_meanings :microwave land ice lake riverflag_masks :[ 1  2  4  8 16]coverage_content_type :qualityInformation[2748620 values with dtype=int16]sea_surface_temperature_4um(time, nj, ni)float32...long_name :sea surface temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from mid-IR (4 um) channels; non L2P core fieldcoverage_content_type :physicalMeasurement[2748620 values with dtype=float32]quality_level_4um(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :mid-IR SST proximity confidence value; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[2748620 values with dtype=float32]sses_bias_4um(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST bias error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]sses_standard_deviation_4um(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST standard deviation error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]wind_speed(time, nj, ni)float32...long_name :10m wind speedstandard_name :wind_speedunits :m s-1valid_min :-127valid_max :127comment :Wind at 10 meters above the sea surfacesource :TBD.  Placeholder.  Currently emptygrid_mapping :TBDtime_offset :2.0height :10 mcoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]dt_analysis(time, nj, ni)float32...long_name :deviation from SST reference climatologyunits :kelvinvalid_min :-127valid_max :127comment :TBDsource :TBD. Placeholder.  Currently emptycoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]Attributes: (49)Conventions :CF-1.7, ACDD-1.3title :MODIS Terra L2P SSTsummary :Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAACreferences :GHRSST Data Processing Specification v2r5institution :NASA/JPL/OBPG/RSMAShistory :MODIS L2P created at JPL PO.DAACcomment :L2P Core without DT analysis or other ancillary fields; Night, Start Node:Ascending, End Node:Ascending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Quicklooklicense :GHRSST and PO.DAAC protocol allow data use as free and open.id :MODIS_T-JPL-L2P-v2019.0naming_authority :org.ghrsstproduct_version :2019.0uuid :f6e1f61d-c4a4-4c17-8354-0c15e12d688bgds_version_id :2.0netcdf_version_id :4.1date_created :20210820T153042Zfile_quality_level :3spatial_resolution :1kmstart_time :20210820T033500Ztime_coverage_start :20210820T033500Zstop_time :20210820T033959Ztime_coverage_end :20210820T033959Znorthernmost_latitude :34.0296southernmost_latitude :12.9895easternmost_longitude :-68.4372westernmost_longitude :-95.5518source :MODIS sea surface temperature observations for the OBPGplatform :Terrasensor :MODISmetadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_T-JPL-L2P-v2019.0keywords :Oceans > Ocean Temperature > Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventiongeospatial_lat_units :degrees_northgeospatial_lat_resolution :0.01geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.01acknowledgment :The MODIS L2P sea surface temperature data are sponsored by NASAcreator_name :Ed Armstrong, JPL PO.DAACcreator_email :edward.m.armstrong@jpl.nasa.govcreator_url :http://podaac.jpl.nasa.govproject :Group for High Resolution Sea Surface Temperaturepublisher_name :The GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L2Pcdm_data_type :swathstartDirection :AscendingendDirection :Ascendingday_night_flag :Night\n\n\nLet’s make a quick plot to take a look at the sea_surface_temperature variable.\n\nssh_ds.sea_surface_temperature.plot() ;"
  },
  {
    "objectID": "examples/Transform-workflow.html#accessing-multiple-netcdf4hdf5-files---data-subsetting-and-transformation-services-in-the-cloud",
    "href": "examples/Transform-workflow.html#accessing-multiple-netcdf4hdf5-files---data-subsetting-and-transformation-services-in-the-cloud",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "3. Accessing Multiple NetCDF4/HDF5 Files - Data Subsetting and Transformation Services in the Cloud",
    "text": "3. Accessing Multiple NetCDF4/HDF5 Files - Data Subsetting and Transformation Services in the Cloud\n\nUsing the Harmony-Py library to access customized data from NASA Earthdata\n\nWhat other access options or services exist for this dataset?\nMaybe we’re interested in creating a time series over a larger area or with a larger dataset. Let’s see whether there are other services out there that could either make this operation more performant in the cloud (with a cloud-optimized output) or subsetting services to reduce the data volume.\nBased off of https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/07_Harmony_Subsetting.html\n\n\n\nSummary\nWe have already explored direct access to the NASA EOSDIS archive in the cloud via the Amazon Simple Storage Service (S3) by using the Common Metadata Repository (CMR) to search for granule locations. In addition to directly accessing the files archived and distributed by each of the NASA DAACs, many datasets also support services that allow us to customize the data via subsetting, reformatting, reprojection, and other transformations.\nThis tutorial demonstrates how to find, request, and use customized data from a new ecosystem of services operating within the NASA Earthdata Cloud: NASA Harmony.\n\n\nBenefits\nBut first, why use this option when we’ve already learned how to access data directly from the NASA Earthdata Cloud?\n\nConsistent access patterns to EOSDIS holdings make cross-data center data access easier\nData reduction services allow us to request only the data we want, in the format and projection we want\nAnalysis Ready Data and cloud access will help reduce time-to-science\nCommunity Development helps reduce the barriers for re-use of code and sharing of domain knowledge\n\nSee more on the Earthdata Harmony landing page, including documentation on the Harmony API itself.\n\n\nObjectives\n\nConceptualize the data transformation service types and offerings provided by NASA Earthdata, including Harmony.\nPractice skills learned from the introductory CMR tutorial to discover what access and service options exist for a given data set, as well as variable metadata.\nUtilize the Harmony-py library to request subsetted MODIS L2 Sea Surface Temperature data over the Gulf of Mexico.\nRead Harmony subsetted outputs directly into xarray."
  },
  {
    "objectID": "examples/Transform-workflow.html#discover-service-options-for-a-given-data-set",
    "href": "examples/Transform-workflow.html#discover-service-options-for-a-given-data-set",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Discover service options for a given data set",
    "text": "Discover service options for a given data set\n\nFirst, what do we mean by a “service”?\nIn the context of NASA Earthdata, we are usually referring to a service as any data transformation or customization process that packages or delivers data in a way that makes it easier to work with compared to how the data are natively archived at NASA EOSDIS. Basic customization options may include: * Subsetting (cropping) the data by: * Variable * Spatial boundary, * Temporal range * Reformatting * For example: From NetCDF-4 to Cloud Optimized GeoTIFF * Reprojection and/or Resampling * For example: From Sinusoidal to Polar Stereographic * Mosaicking * Aggregating\nA few main types or pathways for services that are commonly supported across the NASA DAACs include: * NASA Global Imagery Browse Service * Web services providing imagery, much of which is updated daily, to broaden accessibility of NASA EOSDIS data to the media and public. * OPeNDAP * The Open-source Project for a Network Data Access Protocol is a NASA community standard DAP that provides a simple way to access and work with data over the internet. OPeNDAP’s client/server software allows us to subset and reformat data using an internet browser, command line interface, and other applications. * Harmony * In the most basic sense, Harmony is an Application Programming Interface, or API, allowing us to request customization options described above, which are then processed and returned as file outputs. Harmony helps to reduce pre-processing steps so we can spend less time preparing the data, and more time doing science.\nNote: These service offerings are unique to each NASA EOSDIS dataset.\nWhy is this?\nDue to varying levels of service, cloud migration status, and unique characteristics of the datasets themselves, not all service options are provided for all datasets. Therefore it is important to first explore a given dataset’s metadata to discover what service options are provided.\n\n\nNote that the full Harmony tutorial from the 2021 Earthdata Cloud Hackathon demonstrates service and variable discovery, but this was removed here for simplification."
  },
  {
    "objectID": "examples/Transform-workflow.html#using-harmony-py-to-subset-data",
    "href": "examples/Transform-workflow.html#using-harmony-py-to-subset-data",
    "title": "Earthdata Cloud Exploration: Direct Access and Harmony workflow",
    "section": "Using Harmony-Py to subset data",
    "text": "Using Harmony-Py to subset data\nHarmony-Py provides a pip installable Python alternative to directly using Harmony’s RESTful API to make it easier to request data and service options, especially when interacting within a Python Jupyter Notebook environment.\nThe next steps are adopted from the introduction tutorial notebook provided in the Harmony-Py library:\n\nCreate Harmony Client object\nFirst, we need to create a Harmony Client, which is what we will interact with to submit and inspect a data request to Harmony, as well as to retrieve results.\nWhen creating the Client, we need to provide Earthdata Login credentials, which are required to access data from NASA EOSDIS. This basic line below assumes that we have a .netrc available.\n\nharmony_client = Client()\n\n\n\nCreate Harmony Request\nThe following are common request parameters:\n\ncollection: Required parameter. This is the NASA EOSDIS collection, or data product. There are two options for inputting a collection of interest:\n\nProvide a concept ID (e.g. C1940473819-POCLOUD)\nData product short name (e.g. MODIS_A-JPL-L2P-v2019.0).\n\nspatial: Bounding box spatial constraints on the data. The Harmony Bbox class accepts spatial coordinates as decimal degrees in w, s, e, n order, where longitude = -180, 180 and latitude = -90, 90.\ntemporal: Date/time constraints on the data. The example below demonstrates temporal start and end ranges using the python datetime library.\n\nAs we identified above, only subsetting options are available for this dataset. If other service options such as reformatting are available for a given dataset, these can also be specified using Harmony-py: See the documentation for details on how to construct these parameters.\n\nrequest = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667,21.20806,-83.05197,30.16605),\n    temporal={\n        'start': dt.datetime(2021, 8, 20),\n        'stop': dt.datetime(2021, 8, 21),\n    },\n)\n\n\n\nSubmit request\nNow that the request is created, we can now submit it to Harmony using the Harmony Client object. A job id is returned, which is a unique identifier that represents the submitted request.\n\njob_id = harmony_client.submit(request)\njob_id\n\n'42f70e4f-5e6a-4473-8a5a-4ce56155ce92'\n\n\n\n\nCheck request status\nDepending on the size of the request, it may be helpful to wait until the request has completed processing before the remainder of the code is executed. The wait_for_processing() method will block subsequent lines of code while optionally showing a progress bar.\n\nharmony_client.wait_for_processing(job_id, show_progress=True)\n\n [ Processing: 100% ] |###################################################| [|]\n\n\n\n\nView Harmony job response and output URLs\nOnce the data request has finished processing, we can view details on the job that was submitted to Harmony, including the API call to Harmony, and informational messages on the request if available.\nresult_json() calls wait_for_processing() and returns the complete job in JSON format once processing is complete.\n\ndata = harmony_client.result_json(job_id)\npprint(data)\n\n{'createdAt': '2022-03-10T01:08:45.232Z',\n 'jobID': '42f70e4f-5e6a-4473-8a5a-4ce56155ce92',\n 'links': [{'href': 'https://harmony.earthdata.nasa.gov/stac/42f70e4f-5e6a-4473-8a5a-4ce56155ce92/',\n            'rel': 'stac-catalog-json',\n            'title': 'STAC catalog',\n            'type': 'application/json'},\n           {'bbox': [-97.8, 21.2, -90.8, 22.5],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T17:29:59.000Z',\n                         'start': '2021-08-20T17:25:01.000Z'},\n            'title': '20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-97.8, 21.2, -86.8, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T17:24:59.000Z',\n                         'start': '2021-08-20T17:20:01.000Z'},\n            'title': '20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-88.2, 21.2, -83.1, 28.3],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T15:49:59.000Z',\n                         'start': '2021-08-20T15:45:01.000Z'},\n            'title': '20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-87.1, 28, -83.1, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T15:44:59.000Z',\n                         'start': '2021-08-20T15:40:01.000Z'},\n            'title': '20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-97.8, 21.2, -94, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T05:19:59.000Z',\n                         'start': '2021-08-20T05:15:01.000Z'},\n            'title': '20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'bbox': [-95.4, 21.2, -83.1, 30.2],\n            'href': 'https://harmony.earthdata.nasa.gov/service-results/harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'rel': 'data',\n            'temporal': {'end': '2021-08-20T03:39:59.000Z',\n                         'start': '2021-08-20T03:35:00.000Z'},\n            'title': '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n            'type': 'application/x-netcdf4'},\n           {'href': 'https://harmony.earthdata.nasa.gov/jobs/42f70e4f-5e6a-4473-8a5a-4ce56155ce92?linktype=https&page=1&limit=2000',\n            'rel': 'self',\n            'title': 'The current page',\n            'type': 'application/json'}],\n 'message': 'The job has completed successfully',\n 'numInputGranules': 6,\n 'progress': 100,\n 'request': 'https://harmony.earthdata.nasa.gov/MODIS_T-JPL-L2P-v2019.0/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?forceAsync=true&subset=lat(21.20806%3A30.16605)&subset=lon(-97.77667%3A-83.05197)&subset=time(%222021-08-20T00%3A00%3A00%22%3A%222021-08-21T00%3A00%3A00%22)',\n 'status': 'successful',\n 'updatedAt': '2022-03-10T01:09:26.492Z',\n 'username': 'amy.steiker'}\n\n\n\n\nDirect cloud access\nNote that the remainder of this tutorial will only succeed when running this notebook within the AWS us-west-2 region.\nHarmony data outputs can be accessed within the cloud using the s3 URLs and AWS credentials provided in the Harmony job response.\n\nRetrieve list of output URLs.\nThe result_urls() method calls wait_for_processing() and returns a list of the processed data URLs once processing is complete. You may optionally show the progress bar as shown below.\n\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\npprint(urls)\n\n['s3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820172001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154501-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820154001-JPL-L2P_GHRSST-SSTskin-MODIS_T-D-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820051501-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4',\n 's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4']\n\n\nWe’ll select a URL in the list to bring into xarray below, which matches the granule we opened directly from PO.DAAC’s archive bucket above. In Earthdata Search, we can see that this granule covers our area well.\n\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\nurl\n\n's3://harmony-prod-staging/public/podaac/l2-subsetter/4419d8b3-2127-4c8a-a7ef-2071d589de19/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n\n\n\nAWS credential retrieval\nUsing aws_credentials you can retrieve the credentials needed to access the Harmony s3 staging bucket and its contents.\n\ncreds = harmony_client.aws_credentials()\n\n\n\n\nOpen staged files with s3fs and xarray\nWe use the AWS s3fs package to create a file system that can then be read by xarray:\n\ns3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nNow that we have our s3 file system set, including our declared credentials, we’ll use that to open the url, and read in the file through xarray. This extra step is needed because xarray cannot open the S3 location directly. Instead, the S3 file object is passed to xarray, in order to then open the dataset.\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                      (nj: 1228, ni: 660, time: 1)\nCoordinates:\n    lat                          (nj, ni, time) float32 ...\n    lon                          (nj, ni, time) float32 ...\n  * time                         (time) datetime64[ns] 2021-08-20T03:35:00\nDimensions without coordinates: nj, ni\nData variables:\n    sea_surface_temperature      (time, nj, ni) float32 ...\n    sst_dtime                    (time, nj, ni) timedelta64[ns] ...\n    quality_level                (time, nj, ni) float32 ...\n    sses_bias                    (time, nj, ni) float32 ...\n    sses_standard_deviation      (time, nj, ni) float32 ...\n    l2p_flags                    (time, nj, ni) int16 ...\n    sea_surface_temperature_4um  (time, nj, ni) float32 ...\n    quality_level_4um            (time, nj, ni) float32 ...\n    sses_bias_4um                (time, nj, ni) float32 ...\n    sses_standard_deviation_4um  (time, nj, ni) float32 ...\n    wind_speed                   (time, nj, ni) float32 ...\n    dt_analysis                  (time, nj, ni) float32 ...\nAttributes: (12/50)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      MODIS Terra L2P SST\n    summary:                    Sea surface temperature retrievals produced a...\n    references:                 GHRSST Data Processing Specification v2r5\n    institution:                NASA/JPL/OBPG/RSMAS\n    history:                    MODIS L2P created at JPL PO.DAAC\\n2022-03-10 ...\n    ...                         ...\n    processing_level:           L2P\n    cdm_data_type:              swath\n    startDirection:             Ascending\n    endDirection:               Ascending\n    day_night_flag:             Night\n    history_json:               [{\"date_time\": \"2022-03-10T01:09:25.100329+00...xarray.DatasetDimensions:nj: 1228ni: 660time: 1Coordinates: (3)lat(nj, ni, time)float32...long_name :latitudestandard_name :latitudeunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[810480 values with dtype=float32]lon(nj, ni, time)float32...long_name :longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[810480 values with dtype=float32]time(time)datetime64[ns]2021-08-20T03:35:00long_name :reference time of sst filestandard_name :timecomment :time of first sensor observationcoverage_content_type :coordinatearray(['2021-08-20T03:35:00.000000000'], dtype='datetime64[ns]')Data variables: (12)sea_surface_temperature(time, nj, ni)float32...long_name :sea surface temperaturestandard_name :sea_surface_skin_temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from thermal IR (11 um) channelssource :NASA and University of Miamicoverage_content_type :physicalMeasurement[810480 values with dtype=float32]sst_dtime(time, nj, ni)timedelta64[ns]...long_name :time difference from reference timevalid_min :-32767valid_max :32767comment :time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981coverage_content_type :referenceInformation[810480 values with dtype=timedelta64[ns]]quality_level(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[810480 values with dtype=float32]sses_bias(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]sses_standard_deviation(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]l2p_flags(time, nj, ni)int16...long_name :L2P flagsvalid_min :0valid_max :16comment :These flags can be used to further filter data variablesflag_meanings :microwave land ice lake riverflag_masks :[ 1  2  4  8 16]coverage_content_type :qualityInformation[810480 values with dtype=int16]sea_surface_temperature_4um(time, nj, ni)float32...long_name :sea surface temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from mid-IR (4 um) channels; non L2P core fieldcoverage_content_type :physicalMeasurement[810480 values with dtype=float32]quality_level_4um(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :mid-IR SST proximity confidence value; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :[0 1 2 3 4 5]flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[810480 values with dtype=float32]sses_bias_4um(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST bias error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]sses_standard_deviation_4um(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :mid-IR SST standard deviation error; non L2P core field; signed byte array:  WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]wind_speed(time, nj, ni)float32...long_name :10m wind speedstandard_name :wind_speedunits :m s-1valid_min :-127valid_max :127comment :Wind at 10 meters above the sea surfacesource :TBD.  Placeholder.  Currently emptygrid_mapping :TBDtime_offset :2.0height :10 mcoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]dt_analysis(time, nj, ni)float32...long_name :deviation from SST reference climatologyunits :kelvinvalid_min :-127valid_max :127comment :TBDsource :TBD. Placeholder.  Currently emptycoverage_content_type :auxiliaryInformation[810480 values with dtype=float32]Attributes: (50)Conventions :CF-1.7, ACDD-1.3title :MODIS Terra L2P SSTsummary :Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAACreferences :GHRSST Data Processing Specification v2r5institution :NASA/JPL/OBPG/RSMAShistory :MODIS L2P created at JPL PO.DAAC\n2022-03-10 01:09:25.100285 l2ss-py v1.3.1 (bbox=[[-97.77667, -83.05197], [21.20806, 30.16605]] cut=True)comment :L2P Core without DT analysis or other ancillary fields; Night, Start Node:Ascending, End Node:Ascending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Quicklooklicense :GHRSST and PO.DAAC protocol allow data use as free and open.id :MODIS_T-JPL-L2P-v2019.0naming_authority :org.ghrsstproduct_version :2019.0uuid :f6e1f61d-c4a4-4c17-8354-0c15e12d688bgds_version_id :2.0netcdf_version_id :4.1date_created :20210820T153042Zfile_quality_level :3spatial_resolution :1kmstart_time :20210820T033500Ztime_coverage_start :20210820T033500Zstop_time :20210820T033959Ztime_coverage_end :20210820T033959Znorthernmost_latitude :34.0296southernmost_latitude :12.9895easternmost_longitude :-68.4372westernmost_longitude :-95.5518source :MODIS sea surface temperature observations for the OBPGplatform :Terrasensor :MODISmetadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_T-JPL-L2P-v2019.0keywords :Oceans > Ocean Temperature > Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventiongeospatial_lat_units :degrees_northgeospatial_lat_resolution :0.01geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.01acknowledgment :The MODIS L2P sea surface temperature data are sponsored by NASAcreator_name :Ed Armstrong, JPL PO.DAACcreator_email :edward.m.armstrong@jpl.nasa.govcreator_url :http://podaac.jpl.nasa.govproject :Group for High Resolution Sea Surface Temperaturepublisher_name :The GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L2Pcdm_data_type :swathstartDirection :AscendingendDirection :Ascendingday_night_flag :Nighthistory_json :[{\"date_time\": \"2022-03-10T01:09:25.100329+00:00\", \"derived_from\": \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc\", \"program\": \"l2ss-py\", \"version\": \"1.3.1\", \"parameters\": \"bbox=[[-97.77667, -83.05197], [21.20806, 30.16605]] cut=True\", \"program_ref\": \"https://cmr.earthdata.nasa.gov:443/search/concepts/S1962070864-POCLOUD\", \"$schema\": \"https://harmony.earthdata.nasa.gov/schemas/history/0.1.0/history-v0.1.0.json\"}]\n\n\n\n\nPlot the data\nUse the xarray built in plotting function to create a simple plot along the x and y dimensions of the dataset:\n\nds.sea_surface_temperature.plot() ;\n\n\n\n\n\n\nSummary\nThis notebook demonstrated an abbreviated and simplified workflow to explore access and subsetting options available through the Earthdata Cloud. There are several other options that can be used to work “in place” in the Earthdata Cloud, from data discovery to analysis-ready data, including:\n\nZarr-EOSDIS-Store\n\nThe zarr-eosdis-store library allows NASA EOSDIS Collections to be accessed efficiently by the Zarr Python library, provided they have a sidecar DMR++ metadata file generated.\nTutorial highlighting this library’s usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/09_Zarr_Access.html\n\nOPeNDAP\n\nHyrax provides direct access to subsetting of NASA data using Python or your favorite analysis tool\nTutorial highlighting OPeNDAP usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/06_S6_OPeNDAP_Access_Gridding.html\n\nEarthdata Library\n\nA Python library to search and access NASA Earthdata datasets, aiming to provide a simple way to access or download data without having to worry if a given dataset is on-prem or in the cloud."
  },
  {
    "objectID": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html",
    "href": "examples/ORNL/Data_Access__Direct_S3_Access__ORNL_DAYMET.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport os\nimport subprocess\nimport requests\nfrom pystac_client import Client\nimport boto3\nimport s3fs\nimport pandas as pd\nimport numpy as np\nimport xarray as xr\nimport rasterio as rio\nfrom rasterio.session import AWSSession\nfrom rasterio.plot import show\nimport rioxarray\nimport geopandas\nimport pyproj\nfrom pyproj import Proj\nfrom shapely.ops import transform\nimport geoviews as gv\nfrom cartopy import crs\nimport hvplot.xarray\nimport holoviews as hv\ngv.extension('bokeh', 'matplotlib')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['ornldaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()\n\nConnect to NASA’s ORNL Cloud Provider\n\nornldaac_cat = Client.open('https://cmr.earthdata.nasa.gov/stac/ORNL_CLOUD/')\n\nSearch by collections and by datetime. Daymet Daily tmax are in netCDF format with 1 netCDF containing 1 years worth of daily data (i.e., 365 time steps)\n\nsearch = ornldaac_cat.search(\n    collections=['Daymet_Daily_V4_1840.v4.2'],\n    datetime='2015/2020'\n)\n\nEach STAC Item return contains 21 netCDF files. The files represent weather variables for North America, Puerto Rico, and Hawaii\n\nsearch.matched()\n\n126\n\n\n\nitems = search.get_all_items()\n#list(items)\n\nFilter the items returned for North America and by tmax\n\nhttps_urls = [list(i.assets.values())[0].href for i in items if '_na_' in i.id and '_tmax_' in i.id]\nhttps_urls\n\n['https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc',\n 'https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2016.nc',\n 'https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2017.nc',\n 'https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2018.nc',\n 'https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2019.nc',\n 'https://data.ornldaac.earthdata.nasa.gov/protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2020.nc']\n\n\nSubstitute a portion of the HTTPS url to create the S3 location\n\ns3_urls = [x.replace('https://data.ornldaac.earthdata.nasa.gov/protected/', 's3://ornl-cumulus-prod-protected/') for x in https_urls]\ns3_urls\n\n['s3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2016.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2017.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2018.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2019.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2020.nc']\n\n\n\n\n\n\nfs_s3 = s3fs.S3FileSystem(anon=False, key=temp_creds_req['accessKeyId'], secret=temp_creds_req['secretAccessKey'], token=temp_creds_req['sessionToken'])\n\n\ns3_url = s3_urls[0]\ns3_url\n\n's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc'\n\n\n\ns3_file_obj = fs_s3.open(s3_url, mode='rb')\n\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (x: 7814, y: 8075, time: 365, nv: 2)\nCoordinates:\n  * x                        (x) float32 -4.56e+06 -4.559e+06 ... 3.253e+06\n  * y                        (y) float32 4.984e+06 4.983e+06 ... -3.09e+06\n    lat                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n    lon                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n  * time                     (time) datetime64[ns] 2015-01-01T12:00:00 ... 20...\nDimensions without coordinates: nv\nData variables:\n    yearday                  (time) int16 dask.array<chunksize=(365,), meta=np.ndarray>\n    time_bnds                (time, nv) datetime64[ns] dask.array<chunksize=(365, 2), meta=np.ndarray>\n    lambert_conformal_conic  int16 ...\n    tmax                     (time, y, x) float32 dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>\nAttributes:\n    start_year:        2015\n    source:            Daymet Software Version 4.0\n    Version_software:  Daymet Software Version 4.0\n    Version_data:      Daymet Data Version 4.0\n    Conventions:       CF-1.6\n    citation:          Please see http://daymet.ornl.gov/ for current Daymet ...\n    references:        Please see http://daymet.ornl.gov/ for current informa...xarray.DatasetDimensions:x: 7814y: 8075time: 365nv: 2Coordinates: (5)x(x)float32-4.56e+06 -4.559e+06 ... 3.253e+06units :mlong_name :x coordinate of projectionstandard_name :projection_x_coordinatearray([-4560250., -4559250., -4558250., ...,  3250750.,  3251750.,  3252750.],\n      dtype=float32)y(y)float324.984e+06 4.983e+06 ... -3.09e+06units :mlong_name :y coordinate of projectionstandard_name :projection_y_coordinatearray([ 4984000.,  4983000.,  4982000., ..., -3088000., -3089000., -3090000.],\n      dtype=float32)lat(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_northlong_name :latitude coordinatestandard_name :latitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         3 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \nlon(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_eastlong_name :longitude coordinatestandard_name :longitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         3 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \ntime(time)datetime64[ns]2015-01-01T12:00:00 ... 2015-12-...standard_name :timebounds :time_bndslong_name :24-hour day based on local timearray(['2015-01-01T12:00:00.000000000', '2015-01-02T12:00:00.000000000',\n       '2015-01-03T12:00:00.000000000', ..., '2015-12-29T12:00:00.000000000',\n       '2015-12-30T12:00:00.000000000', '2015-12-31T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (4)yearday(time)int16dask.array<chunksize=(365,), meta=np.ndarray>long_name :day of year (DOY) starting with day 1 on Januaray 1st\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         730 B \n                         730 B \n                    \n                    \n                    \n                         Shape \n                         (365,) \n                         (365,) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     int16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  365\n  1\n\n        \n    \ntime_bnds(time, nv)datetime64[ns]dask.array<chunksize=(365, 2), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.70 kiB \n                         5.70 kiB \n                    \n                    \n                    \n                         Shape \n                         (365, 2) \n                         (365, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  365\n\n        \n    \nlambert_conformal_conic()int16...grid_mapping_name :lambert_conformal_coniclongitude_of_central_meridian :-100.0latitude_of_projection_origin :42.5false_easting :0.0false_northing :0.0standard_parallel :[25. 60.]semi_major_axis :6378137.0inverse_flattening :298.257223563array(-32767, dtype=int16)tmax(time, y, x)float32dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>long_name :daily maximum temperatureunits :degrees Cgrid_mapping :lambert_conformal_coniccell_methods :area: mean time: maximum\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         85.80 GiB \n                         127.76 MiB \n                    \n                    \n                    \n                         Shape \n                         (365, 8075, 7814) \n                         (55, 475, 1282) \n                    \n                    \n                         Count \n                         834 Tasks \n                         833 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n  365\n\n        \n    \nAttributes: (7)start_year :2015source :Daymet Software Version 4.0Version_software :Daymet Software Version 4.0Version_data :Daymet Data Version 4.0Conventions :CF-1.6citation :Please see http://daymet.ornl.gov/ for current Daymet data citation informationreferences :Please see http://daymet.ornl.gov/ for current information on Daymet references\n\n\n\n\n\n\n# Iterate through remote_files to create a fileset\nfileset = [fs_s3.open(file) for file in s3_urls]\n\n\n# This works...if you rerun this line and get a context manager error, try 1. rerunning the line above then this line \nxr_ts = xr.open_mfdataset(fileset, chunks='auto', engine='h5netcdf')\n\n\nxr_ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (x: 7814, y: 8075, time: 2190, nv: 2)\nCoordinates:\n  * x                        (x) float32 -4.56e+06 -4.559e+06 ... 3.253e+06\n  * y                        (y) float32 4.984e+06 4.983e+06 ... -3.09e+06\n    lat                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n    lon                      (y, x) float32 dask.array<chunksize=(8075, 3907), meta=np.ndarray>\n  * time                     (time) datetime64[ns] 2015-01-01T12:00:00 ... 20...\nDimensions without coordinates: nv\nData variables:\n    yearday                  (time) int16 dask.array<chunksize=(365,), meta=np.ndarray>\n    time_bnds                (time, nv) datetime64[ns] dask.array<chunksize=(365, 2), meta=np.ndarray>\n    lambert_conformal_conic  (time) int16 -32767 -32767 -32767 ... -32767 -32767\n    tmax                     (time, y, x) float32 dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>\nAttributes:\n    start_year:        2015\n    source:            Daymet Software Version 4.0\n    Version_software:  Daymet Software Version 4.0\n    Version_data:      Daymet Data Version 4.0\n    Conventions:       CF-1.6\n    citation:          Please see http://daymet.ornl.gov/ for current Daymet ...\n    references:        Please see http://daymet.ornl.gov/ for current informa...xarray.DatasetDimensions:x: 7814y: 8075time: 2190nv: 2Coordinates: (5)x(x)float32-4.56e+06 -4.559e+06 ... 3.253e+06units :mlong_name :x coordinate of projectionstandard_name :projection_x_coordinatearray([-4560250., -4559250., -4558250., ...,  3250750.,  3251750.,  3252750.],\n      dtype=float32)y(y)float324.984e+06 4.983e+06 ... -3.09e+06units :mlong_name :y coordinate of projectionstandard_name :projection_y_coordinatearray([ 4984000.,  4983000.,  4982000., ..., -3088000., -3089000., -3090000.],\n      dtype=float32)lat(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_northlong_name :latitude coordinatestandard_name :latitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         51 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \nlon(y, x)float32dask.array<chunksize=(8075, 3907), meta=np.ndarray>units :degrees_eastlong_name :longitude coordinatestandard_name :longitude\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         240.70 MiB \n                         120.35 MiB \n                    \n                    \n                    \n                         Shape \n                         (8075, 7814) \n                         (8075, 3907) \n                    \n                    \n                         Count \n                         51 Tasks \n                         2 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n\n        \n    \ntime(time)datetime64[ns]2015-01-01T12:00:00 ... 2020-12-...standard_name :timebounds :time_bndslong_name :24-hour day based on local timearray(['2015-01-01T12:00:00.000000000', '2015-01-02T12:00:00.000000000',\n       '2015-01-03T12:00:00.000000000', ..., '2020-12-28T12:00:00.000000000',\n       '2020-12-29T12:00:00.000000000', '2020-12-30T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (4)yearday(time)int16dask.array<chunksize=(365,), meta=np.ndarray>long_name :day of year (DOY) starting with day 1 on Januaray 1st\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         4.28 kiB \n                         730 B \n                    \n                    \n                    \n                         Shape \n                         (2190,) \n                         (365,) \n                    \n                    \n                         Count \n                         18 Tasks \n                         6 Chunks \n                    \n                    \n                     Type \n                     int16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  2190\n  1\n\n        \n    \ntime_bnds(time, nv)datetime64[ns]dask.array<chunksize=(365, 2), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         34.22 kiB \n                         5.70 kiB \n                    \n                    \n                    \n                         Shape \n                         (2190, 2) \n                         (365, 2) \n                    \n                    \n                         Count \n                         18 Tasks \n                         6 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  2190\n\n        \n    \nlambert_conformal_conic(time)int16-32767 -32767 ... -32767 -32767grid_mapping_name :lambert_conformal_coniclongitude_of_central_meridian :-100.0latitude_of_projection_origin :42.5false_easting :0.0false_northing :0.0standard_parallel :[25. 60.]semi_major_axis :6378137.0inverse_flattening :298.257223563array([-32767, -32767, -32767, ..., -32767, -32767, -32767], dtype=int16)tmax(time, y, x)float32dask.array<chunksize=(55, 475, 1282), meta=np.ndarray>long_name :daily maximum temperatureunits :degrees Cgrid_mapping :lambert_conformal_coniccell_methods :area: mean time: maximum\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         514.78 GiB \n                         127.76 MiB \n                    \n                    \n                    \n                         Shape \n                         (2190, 8075, 7814) \n                         (55, 475, 1282) \n                    \n                    \n                         Count \n                         10002 Tasks \n                         4998 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  7814\n  8075\n  2190\n\n        \n    \nAttributes: (7)start_year :2015source :Daymet Software Version 4.0Version_software :Daymet Software Version 4.0Version_data :Daymet Data Version 4.0Conventions :CF-1.6citation :Please see http://daymet.ornl.gov/ for current Daymet data citation informationreferences :Please see http://daymet.ornl.gov/ for current information on Daymet references\n\n\n\n#xr_ts.SSH.hvplot.image()"
  },
  {
    "objectID": "examples/ORNL/ORNL_DAYMET__Kerchunk.html",
    "href": "examples/ORNL/ORNL_DAYMET__Kerchunk.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "!mamba install kerchunk -y --quiet\n\n\n!mamba install h5py=3.2 -y --quiet\n\n\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport s3fs\nimport datetime as dt\nimport logging\nimport fsspec\nimport ujson\nimport requests\nfrom tqdm import tqdm\nfrom glob import glob\n\n\nimport kerchunk.hdf\n\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['ornldaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()\n\n\n#fs = fsspec.filesystem('s3', anon=True)\nfs = s3fs.S3FileSystem(anon=False, key=temp_creds_req['accessKeyId'], secret=temp_creds_req['secretAccessKey'], token=temp_creds_req['sessionToken'])\n\n\nurls = ['s3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2016.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2017.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2018.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2019.nc',\n 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2020.nc']\n\n\ndef gen_json(u):\n    so = dict(\n        mode=\"rb\", anon=False, default_fill_cache=False,\n        default_cache_type=\"none\"\n    )\n    with fs.open(u, **so) as infile:\n        print(u)\n        h5chunks = kerchunk.hdf.SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outfile:\n           outfile.write(ujson.dumps(h5chunks.translate()).encode())\n\n\nfor u in urls:\n    gen_json(u)\n\n\nu = 's3://ornl-cumulus-prod-protected/daymet/Daymet_Daily_V4/data/daymet_v4_daily_na_tmax_2015.nc'\n\n\nso = dict(\n    mode=\"rb\", anon=False, default_fill_cache=False, default_cache_type=\"none\"\n    )\n\n\ninf = fs.open(u, **so)\n\n\nh5chunks = kerchunk.hdf.SingleHdf5ToZarr(inf, u, inline_threshold=300)\n\n\nh5chunks.translate()\n\nPermissionError: The provided token has expired."
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html",
    "title": "GES DISC - MERRA2",
    "section": "",
    "text": "Many of NASA’s current and legacy data collections are archive in netCDF4 format. By itself, netCDF4 are not cloud optimized and reading these files can take as long from a personal/local work environment as it takes to read the data from a working environment deployed in the cloud. Using Kerchunk, we can treat these files as cloud optimized assets by creating metadata json file describing existing netCDF4 files, their chunks, and where to access them. The json reference files can be read in using Zarr and Xarray for efficient reads and fast processing."
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#requirements",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#requirements",
    "title": "GES DISC - MERRA2",
    "section": "Requirements",
    "text": "Requirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n3. netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata."
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#import-required-packages",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#import-required-packages",
    "title": "GES DISC - MERRA2",
    "section": "Import required packages",
    "text": "Import required packages\n\nimport requests\nimport xarray as xr\nimport ujson\nimport s3fs\nimport fsspec\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport pathlib\nimport hvplot.xarray\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\nimport warnings\nwarnings.simplefilter(\"ignore\")"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "title": "GES DISC - MERRA2",
    "section": "Create Dask client to process the output json file in parallel",
    "text": "Create Dask client to process the output json file in parallel\nGenerating the Kerchunk reference file can take some time depending on the internal structure of the data. Dask allows us to execute the reference file generation process in parallel, thus speeding up the overall process.\n\nimport dask\nfrom dask.distributed import Client\nclient = Client(n_workers=4)\nclient\n\n\n\n     \n    \n        Client\n        Client-3e6c0be3-d18c-11ec-809e-527eee20f3f0\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: distributed.LocalCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://127.0.0.1:8787/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        64356e89\n        \n            \n                \n                    Dashboard: http://127.0.0.1:8787/status\n                \n                \n                    Workers: 4\n                \n            \n            \n                \n                    Total threads: 4\n                \n                \n                    Total memory: 7.48 GiB\n                \n            \n            \n            \n    Status: running\n    Using processes: True\n\n\n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-9811e6a9-be9d-4a54-9cc3-f17a8d5ea5bb\n            \n                \n                    \n                        Comm: tcp://127.0.0.1:33947\n                    \n                    \n                        Workers: 4\n                    \n                \n                \n                    \n                        Dashboard: http://127.0.0.1:8787/status\n                    \n                    \n                        Total threads: 4\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 7.48 GiB\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:38069\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:44433/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:43685\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-6b5pkr_f\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:32859\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:36075/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:35291\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-piqb4cet\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:36601\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:45185/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:41163\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-d_91r19y\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:34309\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:38301/status\n                        \n                        \n                            Memory:  1.87 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:44119\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/GESDISC/dask-worker-space/worker-9wa5m1vc"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#get-temporary-s3-credentials",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#get-temporary-s3-credentials",
    "title": "GES DISC - MERRA2",
    "section": "Get temporary S3 credentials",
    "text": "Get temporary S3 credentials\nTemporary S3 credentials need to be passed to AWS. Note, these credentials must be refreshed after 1 hour.\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['gesdisc']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "title": "GES DISC - MERRA2",
    "section": "Direct Access a single netCDF4 file",
    "text": "Direct Access a single netCDF4 file\nPass temporary credentials to our filesystem object to access the S3 assets\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\nTime how long it takes to directly access a cloud asset for comparisons later.\n\n%%time\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\nCPU times: user 2.9 s, sys: 228 ms, total: 3.13 s\nWall time: 7.53 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (lon: 576, lat: 361, time: 24)\nCoordinates:\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-01T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(24, 361, 576), meta=np.ndarray>\nAttributes: (12/30)\n    History:                           Original file generated: Sat May 11 22...\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    Conventions:                       CF-1\n    Institution:                       NASA Global Modeling and Assimilation ...\n    References:                        http://gmao.gsfc.nasa.gov\n    ...                                ...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    RangeBeginningDate:                2019-05-01\n    RangeBeginningTime:                00:00:00.000000\n    RangeEndingDate:                   2019-05-01\n    RangeEndingTime:                   23:59:59.000000xarray.DatasetDimensions:lon: 576lat: 361time: 24Coordinates: (3)lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...long_name :timetime_increment :10000begin_date :20190501begin_time :3000vmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', '2019-05-01T03:30:00.000000000',\n       '2019-05-01T04:30:00.000000000', '2019-05-01T05:30:00.000000000',\n       '2019-05-01T06:30:00.000000000', '2019-05-01T07:30:00.000000000',\n       '2019-05-01T08:30:00.000000000', '2019-05-01T09:30:00.000000000',\n       '2019-05-01T10:30:00.000000000', '2019-05-01T11:30:00.000000000',\n       '2019-05-01T12:30:00.000000000', '2019-05-01T13:30:00.000000000',\n       '2019-05-01T14:30:00.000000000', '2019-05-01T15:30:00.000000000',\n       '2019-05-01T16:30:00.000000000', '2019-05-01T17:30:00.000000000',\n       '2019-05-01T18:30:00.000000000', '2019-05-01T19:30:00.000000000',\n       '2019-05-01T20:30:00.000000000', '2019-05-01T21:30:00.000000000',\n       '2019-05-01T22:30:00.000000000', '2019-05-01T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :cloud_top_pressureunits :Pafmissing_value :1000000000000000.0standard_name :cloud_top_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :cloud_top_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :cloud_top_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :zero_plane_displacement_heightunits :mfmissing_value :1000000000000000.0standard_name :zero_plane_displacement_heightvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_1000_mbunits :mfmissing_value :1000000000000000.0standard_name :height_at_1000_mbvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_250_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_500_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :height_at_850_hPaunits :mfmissing_value :1000000000000000.0standard_name :height_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :omega_at_500_hPaunits :Pa s-1fmissing_value :1000000000000000.0standard_name :omega_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :pbltop_pressureunits :Pafmissing_value :1000000000000000.0standard_name :pbltop_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :surface_pressureunits :Pafmissing_value :1000000000000000.0standard_name :surface_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_250_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_500_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :specific_humidity_at_850_hPaunits :kg kg-1fmissing_value :1000000000000000.0standard_name :specific_humidity_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_specific_humidityunits :kg kg-1fmissing_value :1000000000000000.0standard_name :10-meter_specific_humidityvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_specific_humidityunits :kg kg-1fmissing_value :1000000000000000.0standard_name :2-meter_specific_humidityvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :sea_level_pressureunits :Pafmissing_value :1000000000000000.0standard_name :sea_level_pressurevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_air_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :10-meter_air_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_250_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_air_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :2-meter_air_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :dew_point_temperature_at_2_munits :Kfmissing_value :1000000000000000.0standard_name :dew_point_temperature_at_2_mvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :wet_bulb_temperature_at_2_munits :Kfmissing_value :1000000000000000.0standard_name :wet_bulb_temperature_at_2_mvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_500_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :air_temperature_at_850_hPaunits :Kfmissing_value :1000000000000000.0standard_name :air_temperature_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_column_ozoneunits :Dobsonsfmissing_value :1000000000000000.0standard_name :total_column_ozonevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_column_odd_oxygenunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_column_odd_oxygenvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_ice_waterunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_ice_watervmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_liquid_waterunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_liquid_watervmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :total_precipitable_water_vaporunits :kg m-2fmissing_value :1000000000000000.0standard_name :total_precipitable_water_vaporvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_blended_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_blended_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_thermal_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_thermal_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_pressure_based_on_EPV_estimateunits :Pafmissing_value :1000000000000000.0standard_name :tropopause_pressure_based_on_EPV_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1fmissing_value :1000000000000000.0standard_name :tropopause_specific_humidity_using_blended_TROPP_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kfmissing_value :1000000000000000.0standard_name :tropopause_temperature_using_blended_TROPP_estimatevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :surface_skin_temperatureunits :Kfmissing_value :1000000000000000.0standard_name :surface_skin_temperaturevmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_eastward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :10-meter_eastward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_250_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_eastward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :2-meter_eastward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_500_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_50_metersunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_50_metersvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :eastward_wind_at_850_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :eastward_wind_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :10-meter_northward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :10-meter_northward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_250_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_250_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :2-meter_northward_windunits :m s-1fmissing_value :1000000000000000.0standard_name :2-meter_northward_windvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_500_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_500_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_50_metersunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_50_metersvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :northward_wind_at_850_hPaunits :m s-1fmissing_value :1000000000000000.0standard_name :northward_wind_at_850_hPavmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(24, 361, 576), meta=np.ndarray>long_name :lifting_condensation_levelunits :mfmissing_value :1000000000000000.0standard_name :lifting_condensation_levelvmax :1000000000000000.0vmin :-1000000000000000.0valid_range :[-1.e+15  1.e+15]\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         19.04 MiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (24, 361, 576) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nAttributes: (30)History :Original file generated: Sat May 11 22:08:52 2019 GMTComment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Conventions :CF-1Institution :NASA Global Modeling and Assimilation OfficeReferences :http://gmao.gsfc.nasa.govFormat :NetCDF-4/HDF-5SpatialCoverage :globalVersionID :5.12.4TemporalRange :1980-01-01 -> 2016-12-31identifier_product_doi_authority :http://dx.doi.org/ShortName :M2T1NXSLVGranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTLongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsTitle :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsSouthernmostLatitude :-90.0NorthernmostLatitude :90.0WesternmostLongitude :-180.0EasternmostLongitude :179.375LatitudeResolution :0.5LongitudeResolution :0.625DataResolution :0.5 x 0.625Source :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSContact :http://gmao.gsfc.nasa.govidentifier_product_doi :10.5067/VJAFPLI1CSIVRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#specify-a-list-of-s3-urls",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#specify-a-list-of-s3-urls",
    "title": "GES DISC - MERRA2",
    "section": "Specify a list of S3 URLs",
    "text": "Specify a list of S3 URLs\nData Collection: MERRA2_400.tavg1_2d_slv_Nx\nTime Range: 05/01/2019 - 05/31/2019\n\nurls = ['s3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4']"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "title": "GES DISC - MERRA2",
    "section": "Generate the Kerchunk reference files.",
    "text": "Generate the Kerchunk reference files.\nDefine a function to generate the Kerchunk reference files. These files can take a little time to generate.\n\ndef gen_json(u):\n    so = dict(\n        mode= \"rb\", \n        anon= False, \n        default_fill_cache= False,\n        default_cache_type= \"none\"\n    )\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outf:\n            outf.write(ujson.dumps(h5chunks.translate()).encode())\n\nCreate output jsons directory if one does not exist.\n\npathlib.Path('./jsons/').mkdir(exist_ok=True)\n\nUse the Dask Delayed function to create the Kerchunk reference file for each URL from the list of URLs in parallel\n\n%%time\n\nreference_files = []\nfor url in urls:\n    ref = dask.delayed(gen_json)(url)\n    reference_files.append(ref)\n\nreference_files_compute = dask.compute(*reference_files)\n\nCPU times: user 29 s, sys: 11.1 s, total: 40 s\nWall time: 11min 6s\n\n\nCreate a python list with the paths to the reference files.\n\nreference_list = sorted(glob('./jsons/*.json'))\nreference_list\n\n['./jsons/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4.json',\n './jsons/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4.json']"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "title": "GES DISC - MERRA2",
    "section": "Read single netCDF4 using Kerchunk reference file",
    "text": "Read single netCDF4 using Kerchunk reference file\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\",\n                              fo=reference,\n                              ref_storage_args=s_opts,\n                              remote_protocol='s3', \n                              remote_options=r_opts)\n\nRead in a single reference object. We get a lot of SerializationWarnings which are ignored here using the warning package.\nNOTE, the fill value, data range, min value, and max value DO NOT match the source file. Will need to look into this more.\n\n%%time\n\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\nCPU times: user 142 ms, sys: 3.29 ms, total: 146 ms\nWall time: 354 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (time: 24, lat: 361, lon: 576)\nCoordinates:\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-01T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\nAttributes: (12/30)\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    Conventions:                       CF-1\n    DataResolution:                    0.5 x 0.625\n    EasternmostLongitude:              179.375\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    ...                                ...\n    TemporalRange:                     1980-01-01 -> 2016-12-31\n    Title:                             MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Ti...\n    VersionID:                         5.12.4\n    WesternmostLongitude:              -180.0\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    identifier_product_doi_authority:  http://dx.doi.org/xarray.DatasetDimensions:time: 24lat: 361lon: 576Coordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', '2019-05-01T03:30:00.000000000',\n       '2019-05-01T04:30:00.000000000', '2019-05-01T05:30:00.000000000',\n       '2019-05-01T06:30:00.000000000', '2019-05-01T07:30:00.000000000',\n       '2019-05-01T08:30:00.000000000', '2019-05-01T09:30:00.000000000',\n       '2019-05-01T10:30:00.000000000', '2019-05-01T11:30:00.000000000',\n       '2019-05-01T12:30:00.000000000', '2019-05-01T13:30:00.000000000',\n       '2019-05-01T14:30:00.000000000', '2019-05-01T15:30:00.000000000',\n       '2019-05-01T16:30:00.000000000', '2019-05-01T17:30:00.000000000',\n       '2019-05-01T18:30:00.000000000', '2019-05-01T19:30:00.000000000',\n       '2019-05-01T20:30:00.000000000', '2019-05-01T21:30:00.000000000',\n       '2019-05-01T22:30:00.000000000', '2019-05-01T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_pressurestandard_name :cloud_top_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_temperaturestandard_name :cloud_top_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :zero_plane_displacement_heightstandard_name :zero_plane_displacement_heightunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_1000_mbstandard_name :height_at_1000_mbunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_250_hPastandard_name :height_at_250_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_500_hPastandard_name :height_at_500_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_850_hPastandard_name :height_at_850_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :omega_at_500_hPastandard_name :omega_at_500_hPaunits :Pa s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :pbltop_pressurestandard_name :pbltop_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_pressurestandard_name :surface_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_250_hPastandard_name :specific_humidity_at_250_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_500_hPastandard_name :specific_humidity_at_500_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_850_hPastandard_name :specific_humidity_at_850_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_specific_humiditystandard_name :10-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_specific_humiditystandard_name :2-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :sea_level_pressurestandard_name :sea_level_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_air_temperaturestandard_name :10-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_250_hPastandard_name :air_temperature_at_250_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_air_temperaturestandard_name :2-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :dew_point_temperature_at_2_mstandard_name :dew_point_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :wet_bulb_temperature_at_2_mstandard_name :wet_bulb_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_850_hPastandard_name :air_temperature_at_850_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_ozonestandard_name :total_column_ozoneunits :Dobsonsvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_odd_oxygenstandard_name :total_column_odd_oxygenunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_ice_waterstandard_name :total_precipitable_ice_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_liquid_waterstandard_name :total_precipitable_liquid_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_water_vaporstandard_name :total_precipitable_water_vaporunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_blended_estimatestandard_name :tropopause_pressure_based_on_blended_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_thermal_estimatestandard_name :tropopause_pressure_based_on_thermal_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_EPV_estimatestandard_name :tropopause_pressure_based_on_EPV_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_specific_humidity_using_blended_TROPP_estimatestandard_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_temperature_using_blended_TROPP_estimatestandard_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_skin_temperaturestandard_name :surface_skin_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_eastward_windstandard_name :10-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_250_hPastandard_name :eastward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_eastward_windstandard_name :2-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_500_hPastandard_name :eastward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_50_metersstandard_name :eastward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_850_hPastandard_name :eastward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_northward_windstandard_name :10-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_250_hPastandard_name :northward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_northward_windstandard_name :2-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_500_hPastandard_name :northward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_50_metersstandard_name :northward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_850_hPastandard_name :northward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :lifting_condensation_levelstandard_name :lifting_condensation_levelunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         19.04 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (24, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         385 Tasks \n                         384 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  24\n\n        \n    \nAttributes: (30)Comment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Contact :http://gmao.gsfc.nasa.govConventions :CF-1DataResolution :0.5 x 0.625EasternmostLongitude :179.375Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Format :NetCDF-4/HDF-5GranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4History :Original file generated: Sat May 11 22:08:52 2019 GMTInstitution :NASA Global Modeling and Assimilation OfficeLatitudeResolution :0.5LongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsLongitudeResolution :0.625NorthernmostLatitude :90.0ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000References :http://gmao.gsfc.nasa.govShortName :M2T1NXSLVSource :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSSouthernmostLatitude :-90.0SpatialCoverage :globalTemporalRange :1980-01-01 -> 2016-12-31Title :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsVersionID :5.12.4WesternmostLongitude :-180.0identifier_product_doi :10.5067/VJAFPLI1CSIVidentifier_product_doi_authority :http://dx.doi.org/"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "title": "GES DISC - MERRA2",
    "section": "Read multiple netCDF4 files using Kerchunk reference file",
    "text": "Read multiple netCDF4 files using Kerchunk reference file\nCombine the individual reference files into a single time series reference object\n\n%%time\n\nds_k =[]\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\"reference\",\n                           fo=ref,\n                           ref_storage_args=s_opts,\n                           remote_protocol='s3',\n                           remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nCPU times: user 8.93 s, sys: 174 ms, total: 9.1 s\nWall time: 14.9 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:   (time: 744, lat: 361, lon: 576)\nCoordinates:\n  * lat       (lat) float64 -90.0 -89.5 -89.0 -88.5 ... 88.5 89.0 89.5 90.0\n  * lon       (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time      (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-31T23:30:00\nData variables: (12/47)\n    CLDPRS    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    CLDTMP    (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    DISPH     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H1000     (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    H500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ...        ...\n    V250      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V2M       (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V500      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V50M      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    V850      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    ZLCL      (time, lat, lon) float32 dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\nAttributes: (12/30)\n    Comment:                           GMAO filename: d5124_m2_jan10.tavg1_2d...\n    Contact:                           http://gmao.gsfc.nasa.gov\n    Conventions:                       CF-1\n    DataResolution:                    0.5 x 0.625\n    EasternmostLongitude:              179.375\n    Filename:                          MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4\n    ...                                ...\n    TemporalRange:                     1980-01-01 -> 2016-12-31\n    Title:                             MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Ti...\n    VersionID:                         5.12.4\n    WesternmostLongitude:              -180.0\n    identifier_product_doi:            10.5067/VJAFPLI1CSIV\n    identifier_product_doi_authority:  http://dx.doi.org/xarray.DatasetDimensions:time: 744lat: 361lon: 576Coordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', ..., '2019-05-31T21:30:00.000000000',\n       '2019-05-31T22:30:00.000000000', '2019-05-31T23:30:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (47)CLDPRS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_pressurestandard_name :cloud_top_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nCLDTMP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :cloud_top_temperaturestandard_name :cloud_top_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nDISPH(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :zero_plane_displacement_heightstandard_name :zero_plane_displacement_heightunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH1000(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_1000_mbstandard_name :height_at_1000_mbunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_250_hPastandard_name :height_at_250_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_500_hPastandard_name :height_at_500_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nH850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :height_at_850_hPastandard_name :height_at_850_hPaunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nOMEGA500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :omega_at_500_hPastandard_name :omega_at_500_hPaunits :Pa s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nPBLTOP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :pbltop_pressurestandard_name :pbltop_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nPS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_pressurestandard_name :surface_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_250_hPastandard_name :specific_humidity_at_250_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_500_hPastandard_name :specific_humidity_at_500_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQ850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :specific_humidity_at_850_hPastandard_name :specific_humidity_at_850_hPaunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_specific_humiditystandard_name :10-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nQV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_specific_humiditystandard_name :2-meter_specific_humidityunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nSLP(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :sea_level_pressurestandard_name :sea_level_pressureunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_air_temperaturestandard_name :10-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_250_hPastandard_name :air_temperature_at_250_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_air_temperaturestandard_name :2-meter_air_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2MDEW(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :dew_point_temperature_at_2_mstandard_name :dew_point_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT2MWET(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :wet_bulb_temperature_at_2_mstandard_name :wet_bulb_temperature_at_2_munits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nT850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :air_temperature_at_850_hPastandard_name :air_temperature_at_850_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTO3(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_ozonestandard_name :total_column_ozoneunits :Dobsonsvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTOX(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_column_odd_oxygenstandard_name :total_column_odd_oxygenunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQI(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_ice_waterstandard_name :total_precipitable_ice_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_liquid_waterstandard_name :total_precipitable_liquid_waterunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTQV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :total_precipitable_water_vaporstandard_name :total_precipitable_water_vaporunits :kg m-2valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPB(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_blended_estimatestandard_name :tropopause_pressure_based_on_blended_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_thermal_estimatestandard_name :tropopause_pressure_based_on_thermal_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPPV(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_pressure_based_on_EPV_estimatestandard_name :tropopause_pressure_based_on_EPV_estimateunits :Pavalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPQ(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_specific_humidity_using_blended_TROPP_estimatestandard_name :tropopause_specific_humidity_using_blended_TROPP_estimateunits :kg kg-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTROPT(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :tropopause_temperature_using_blended_TROPP_estimatestandard_name :tropopause_temperature_using_blended_TROPP_estimateunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nTS(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :surface_skin_temperaturestandard_name :surface_skin_temperatureunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_eastward_windstandard_name :10-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_250_hPastandard_name :eastward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_eastward_windstandard_name :2-meter_eastward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_500_hPastandard_name :eastward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_50_metersstandard_name :eastward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nU850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :eastward_wind_at_850_hPastandard_name :eastward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV10M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :10-meter_northward_windstandard_name :10-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV250(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_250_hPastandard_name :northward_wind_at_250_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV2M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :2-meter_northward_windstandard_name :2-meter_northward_windunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV500(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_500_hPastandard_name :northward_wind_at_500_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV50M(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_50_metersstandard_name :northward_wind_at_50_metersunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nV850(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :northward_wind_at_850_hPastandard_name :northward_wind_at_850_hPaunits :m s-1valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nZLCL(time, lat, lon)float32dask.array<chunksize=(1, 91, 144), meta=np.ndarray>fmissing_value :999999986991104.0long_name :lifting_condensation_levelstandard_name :lifting_condensation_levelunits :mvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nAttributes: (30)Comment :GMAO filename: d5124_m2_jan10.tavg1_2d_slv_Nx.20190501.nc4Contact :http://gmao.gsfc.nasa.govConventions :CF-1DataResolution :0.5 x 0.625EasternmostLongitude :179.375Filename :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4Format :NetCDF-4/HDF-5GranuleID :MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4History :Original file generated: Sat May 11 22:08:52 2019 GMTInstitution :NASA Global Modeling and Assimilation OfficeLatitudeResolution :0.5LongName :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsLongitudeResolution :0.625NorthernmostLatitude :90.0ProductionDateTime :Original file generated: Sat May 11 22:08:52 2019 GMTRangeBeginningDate :2019-05-01RangeBeginningTime :00:00:00.000000RangeEndingDate :2019-05-01RangeEndingTime :23:59:59.000000References :http://gmao.gsfc.nasa.govShortName :M2T1NXSLVSource :CVS tag: GEOSadas-5_12_4_p16_sp3_M2-OPSSouthernmostLatitude :-90.0SpatialCoverage :globalTemporalRange :1980-01-01 -> 2016-12-31Title :MERRA2 tavg1_2d_slv_Nx: 2d,1-Hourly,Time-Averaged,Single-Level,Assimilation,Single-Level DiagnosticsVersionID :5.12.4WesternmostLongitude :-180.0identifier_product_doi :10.5067/VJAFPLI1CSIVidentifier_product_doi_authority :http://dx.doi.org/\n\n\nAgains, the fill value, data range, min value, and max value DO NOT match the source file. TODO: explore why the values are different\n\nds_multi['T500']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'T500' (time: 744, lat: 361, lon: 576)>\ndask.array<concatenate, shape=(744, 361, 576), dtype=float32, chunksize=(1, 91, 144), chunktype=numpy.ndarray>\nCoordinates:\n  * lat      (lat) float64 -90.0 -89.5 -89.0 -88.5 -88.0 ... 88.5 89.0 89.5 90.0\n  * lon      (lon) float64 -180.0 -179.4 -178.8 -178.1 ... 178.1 178.8 179.4\n  * time     (time) datetime64[ns] 2019-05-01T00:30:00 ... 2019-05-31T23:30:00\nAttributes:\n    fmissing_value:  999999986991104.0\n    long_name:       air_temperature_at_500_hPa\n    standard_name:   air_temperature_at_500_hPa\n    units:           K\n    valid_range:     [-999999986991104.0, 999999986991104.0]\n    vmax:            999999986991104.0\n    vmin:            -999999986991104.0xarray.DataArray'T500'time: 744lat: 361lon: 576dask.array<chunksize=(1, 91, 144), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         590.15 MiB \n                         51.19 kiB \n                    \n                    \n                    \n                         Shape \n                         (744, 361, 576) \n                         (1, 91, 144) \n                    \n                    \n                         Count \n                         23839 Tasks \n                         11904 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  576\n  361\n  744\n\n        \n    \nCoordinates: (3)lat(lat)float64-90.0 -89.5 -89.0 ... 89.5 90.0long_name :latitudeunits :degrees_northvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-90. , -89.5, -89. , ...,  89. ,  89.5,  90. ])lon(lon)float64-180.0 -179.4 ... 178.8 179.4long_name :longitudeunits :degrees_eastvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array([-180.   , -179.375, -178.75 , ...,  178.125,  178.75 ,  179.375])time(time)datetime64[ns]2019-05-01T00:30:00 ... 2019-05-...begin_date :20190501begin_time :3000long_name :timetime_increment :10000valid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0array(['2019-05-01T00:30:00.000000000', '2019-05-01T01:30:00.000000000',\n       '2019-05-01T02:30:00.000000000', ..., '2019-05-31T21:30:00.000000000',\n       '2019-05-31T22:30:00.000000000', '2019-05-31T23:30:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)fmissing_value :999999986991104.0long_name :air_temperature_at_500_hPastandard_name :air_temperature_at_500_hPaunits :Kvalid_range :[-999999986991104.0, 999999986991104.0]vmax :999999986991104.0vmin :-999999986991104.0\n\n\n\n# Commenting for quarto site render\n# ds_multi['T500'].hvplot.image(x='lon', y='lat')"
  },
  {
    "objectID": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#references",
    "href": "examples/GESDISC/GESDISC_MERRA2_tavg1_2d_flx_Nx__Kerchunk.html#references",
    "title": "GES DISC - MERRA2",
    "section": "References",
    "text": "References\n\nhttps://github.com/fsspec/kerchunk\nhttps://medium.com/pangeo/fake-it-until-you-make-it-reading-goes-netcdf4-data-on-aws-s3-as-zarr-for-rapid-data-access-61e33f8fe685\nhttps://medium.com/pangeo/cloud-performant-reading-of-netcdf4-hdf5-data-using-the-zarr-library-1a95c5c92314"
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Example Workflows",
    "section": "",
    "text": "This section contains end-to-end example workflows for processing and analyzing data in the cloud.\nE.g. Here are some examples for Kerchunk!"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html",
    "title": "PO.DAAC ECCO SSH",
    "section": "",
    "text": "Many of NASA’s current and legacy data collections are archive in netCDF4 format. By itself, netCDF4 are not cloud optimized and reading these files can take as long from a personal/local work environment as it takes to read the data from a working environment deployed in the cloud. Using Kerchunk, we can treat these files as cloud optimized assets by creating metadata json file describing existing netCDF4 files, their chunks, and where to access them. The json reference files can be read in using Zarr and Xarray for efficient reads and fast processing."
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#requirements",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#requirements",
    "title": "PO.DAAC ECCO SSH",
    "section": "Requirements",
    "text": "Requirements\n\n1. AWS instance running in us-west-2\nNASA Earthdata Cloud data in S3 can be directly accessed via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region.\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\n3. netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: Authentication for NASA Earthdata."
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#import-required-packages",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#import-required-packages",
    "title": "PO.DAAC ECCO SSH",
    "section": "Import required packages",
    "text": "Import required packages\n\nimport requests\nimport xarray as xr\nimport ujson\nimport s3fs\nimport fsspec\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport pathlib\nimport hvplot.xarray\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\nimport warnings\nwarnings.simplefilter(\"ignore\")"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#create-dask-client-to-process-the-output-json-file-in-parallel",
    "title": "PO.DAAC ECCO SSH",
    "section": "Create Dask client to process the output json file in parallel",
    "text": "Create Dask client to process the output json file in parallel\nGenerating the Kerchunk reference file can take some time depending on the internal structure of the data. Dask allows us to execute the reference file generation process in parallel, thus speeding up the overall process.\n\nimport dask\nfrom dask.distributed import Client\nclient = Client(n_workers=4)\nclient\n\n2022-05-11 15:27:29,674 - distributed.diskutils - INFO - Found stale lock file and directory '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-mezhdsy7', purging\n/srv/conda/envs/notebook/lib/python3.9/contextlib.py:126: UserWarning: Creating scratch directories is taking a surprisingly long time. This is often due to running workers on a network file system. Consider specifying a local-directory to point workers to write scratch data to a local disk.\n  next(self.gen)\n\n\n\n\n     \n    \n        Client\n        Client-ddf55e52-d13e-11ec-818c-b6609e8b92a4\n        \n\n        \n        \n            Connection method: Cluster object\n            Cluster type: distributed.LocalCluster\n        \n        \n\n        \n            \n                \n                    Dashboard:  http://127.0.0.1:41805/status\n                \n                \n            \n        \n\n        \n\n        \n            \n            Cluster Info\n            \n    \n    \n    \n        LocalCluster\n        a24e60d3\n        \n            \n                \n                    Dashboard: http://127.0.0.1:41805/status\n                \n                \n                    Workers: 4\n                \n            \n            \n                \n                    Total threads: 4\n                \n                \n                    Total memory: 15.18 GiB\n                \n            \n            \n            \n    Status: running\n    Using processes: True\n\n\n            \n        \n\n        \n            \n                Scheduler Info\n            \n\n            \n    \n         \n        \n            Scheduler\n            Scheduler-8e045442-a409-4c3b-8c8c-a95470883931\n            \n                \n                    \n                        Comm: tcp://127.0.0.1:36901\n                    \n                    \n                        Workers: 4\n                    \n                \n                \n                    \n                        Dashboard: http://127.0.0.1:41805/status\n                    \n                    \n                        Total threads: 4\n                    \n                \n                \n                    \n                        Started: Just now\n                    \n                    \n                        Total memory: 15.18 GiB\n                    \n                \n            \n        \n    \n\n    \n        \n            Workers\n        \n\n        \n        \n             \n            \n            \n                \n                    Worker: 0\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:34235\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:42845/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:37927\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-869qv5xb\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 1\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:40997\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:41189/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:35257\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-3mo0d80c\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 2\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:46429\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:42211/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:34287\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-o2fvmao4\n                        \n                    \n\n                    \n\n                    \n\n                \n            \n            \n        \n        \n        \n             \n            \n            \n                \n                    Worker: 3\n                \n                \n                    \n                        \n                            Comm:  tcp://127.0.0.1:41615\n                        \n                        \n                            Total threads:  1\n                        \n                    \n                    \n                        \n                            Dashboard:  http://127.0.0.1:41507/status\n                        \n                        \n                            Memory:  3.80 GiB\n                        \n                    \n                    \n                        \n                            Nanny:  tcp://127.0.0.1:43053\n                        \n                        \n                    \n                    \n                        \n                            Local directory:  /home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/dask-worker-space/worker-9u77hywd"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#get-temporary-s3-credentials",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#get-temporary-s3-credentials",
    "title": "PO.DAAC ECCO SSH",
    "section": "Get temporary S3 credentials",
    "text": "Get temporary S3 credentials\nTemporary S3 credentials need to be passed to AWS. Note, these credentials must be refreshed after 1 hour.\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['podaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#direct-access-a-single-netcdf4-file",
    "title": "PO.DAAC ECCO SSH",
    "section": "Direct Access a single netCDF4 file",
    "text": "Direct Access a single netCDF4 file\nPass temporary credentials to our filesystem object to access the S3 assets\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\nTime how long it takes to directly access a cloud asset for comparisons later.\n\n%%time\n\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf')\nxr_ds\n\nCPU times: user 228 ms, sys: 8.51 ms, total: 237 ms\nWall time: 272 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 1, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * time            (time) datetime64[ns] 2015-01-16T12:00:00\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\n    latitude_bnds   (latitude, nv) float32 dask.array<chunksize=(360, 2), meta=np.ndarray>\n    longitude_bnds  (longitude, nv) float32 dask.array<chunksize=(720, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    Conventions:                  CF-1.8, ACDD-1.3\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-02-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2015-01-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         088d03b8-4158-11eb-876b-0cc47a3f47f1xarray.DatasetDimensions:time: 1latitude: 360longitude: 720nv: 2Coordinates: (6)time(time)datetime64[ns]2015-01-16T12:00:00axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2015-01-16T12:00:00.000000000'], dtype='datetime64[ns]')latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         16 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (1, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  1\n\n        \n    \nlatitude_bnds(latitude, nv)float32dask.array<chunksize=(360, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :latitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.81 kiB \n                         2.81 kiB \n                    \n                    \n                    \n                         Shape \n                         (360, 2) \n                         (360, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  360\n\n        \n    \nlongitude_bnds(longitude, nv)float32dask.array<chunksize=(720, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :longitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.62 kiB \n                         5.62 kiB \n                    \n                    \n                    \n                         Shape \n                         (720, 2) \n                         (720, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  720\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mcomment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.valid_min :-1.8805772066116333valid_max :1.4207719564437866\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mcomment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.valid_min :-0.30144819617271423valid_max :0.5245633721351624\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mcomment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.valid_min :-1.6654272079467773valid_max :1.4550364017486572\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nAttributes: (57)acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.Conventions :CF-1.8, ACDD-1.3coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-02-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2015-01-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :088d03b8-4158-11eb-876b-0cc47a3f47f1"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#specify-a-list-of-s3-urls",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#specify-a-list-of-s3-urls",
    "title": "PO.DAAC ECCO SSH",
    "section": "Specify a list of S3 URLs",
    "text": "Specify a list of S3 URLs\nData Collection: ECCO_L4_SSH_05DEG_MONTHLY_V4R4\nTime Range: 2015\n\nurls = ['s3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-02_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-03_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-04_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-05_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-06_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-07_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-08_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-10_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-11_ECCO_V4r4_latlon_0p50deg.nc',\n 's3://podaac-ops-cumulus-protected/ECCO_L4_SSH_05DEG_MONTHLY_V4R4/SEA_SURFACE_HEIGHT_mon_mean_2015-12_ECCO_V4r4_latlon_0p50deg.nc']"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#generate-the-kerchunk-reference-files.",
    "title": "PO.DAAC ECCO SSH",
    "section": "Generate the Kerchunk reference files.",
    "text": "Generate the Kerchunk reference files.\nDefine a function to generate the Kerchunk reference files. These files can take a little time to generate.\n\ndef gen_json(u):\n    so = dict(\n        mode= \"rb\", \n        anon= False, \n        default_fill_cache= False,\n        default_cache_type= \"none\"\n    )\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outf:\n            outf.write(ujson.dumps(h5chunks.translate()).encode())\n\nCreate output jsons directory if one does not exist.\n\npathlib.Path('./jsons/').mkdir(exist_ok=True)\n\nUse the Dask Delayed function to create the Kerchunk reference file for each URL from the list of URLs in parallel\n\n%%time\n\nreference_files = []\nfor url in urls:\n    ref = dask.delayed(gen_json)(url)\n    reference_files.append(ref)\n\nreference_files_compute = dask.compute(*reference_files)\n\nCPU times: user 195 ms, sys: 83.4 ms, total: 278 ms\nWall time: 1.38 s\n\n\n\nfs_ref_list = fsspec.filesystem('file')\n\n\nreference_list = sorted([x for x in fs_ref_list.ls('jsons') if '.json' in x])\nreference_list\n\n['/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-01_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-02_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-03_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-04_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-05_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-06_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-07_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-08_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-09_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-10_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-11_ECCO_V4r4_latlon_0p50deg.nc.json',\n '/home/jovyan/earthdata-cloud-cookbook/examples/PODAAC/jsons/SEA_SURFACE_HEIGHT_mon_mean_2015-12_ECCO_V4r4_latlon_0p50deg.nc.json']"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-single-netcdf4-using-kerchunk-reference-file",
    "title": "PO.DAAC ECCO SSH",
    "section": "Read single netCDF4 using Kerchunk reference file",
    "text": "Read single netCDF4 using Kerchunk reference file\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\",\n                              fo=reference,\n                              ref_storage_args=s_opts,\n                              remote_protocol='s3', \n                              remote_options=r_opts)\n\nRead in a single reference object. We get a lot of SerializationWarnings which are ignored here using the warning package.\nNOTE, the fill value, data range, min value, and max value may not match the source file. Will need to look into this more.\n\n%%time\n\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\nCPU times: user 56.3 ms, sys: 26 ms, total: 82.2 ms\nWall time: 221 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 1, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float32 dask.array<chunksize=(360, 2), meta=np.ndarray>\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float32 dask.array<chunksize=(720, 2), meta=np.ndarray>\n  * time            (time) datetime64[ns] 2014-12-16T12:00:00\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2014-12-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         08a2fc68-4158-11eb-b498-0cc47a3f6943xarray.DatasetDimensions:time: 1latitude: 360longitude: 720nv: 2Coordinates: (6)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)latitude_bnds(latitude, nv)float32dask.array<chunksize=(360, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :latitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.81 kiB \n                         2.81 kiB \n                    \n                    \n                    \n                         Shape \n                         (360, 2) \n                         (360, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  360\n\n        \n    \nlongitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)longitude_bnds(longitude, nv)float32dask.array<chunksize=(720, 2), meta=np.ndarray>coverage_content_type :coordinatelong_name :longitude bounds grid cells\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         5.62 kiB \n                         5.62 kiB \n                    \n                    \n                    \n                         Shape \n                         (720, 2) \n                         (720, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  720\n\n        \n    \ntime(time)datetime64[ns]2014-12-16T12:00:00axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000'], dtype='datetime64[ns]')time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         16 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (1, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  1\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mvalid_max :0.5245633721351624valid_min :-0.30144819617271423\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mvalid_max :1.4550364017486572valid_min :-1.6654272079467773\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         0.99 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         2 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  1\n\n        \n    \nAttributes: (57)Conventions :CF-1.8, ACDD-1.3acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-01-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2014-12-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :08a2fc68-4158-11eb-b498-0cc47a3f6943"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#read-multiple-netcdf4-files-using-kerchunk-reference-file",
    "title": "PO.DAAC ECCO SSH",
    "section": "Read multiple netCDF4 files using Kerchunk reference file",
    "text": "Read multiple netCDF4 files using Kerchunk reference file\nCombine the individual reference files into a single time series reference object\n\n%%time\n\nds_k =[]\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\"reference\",\n                           fo=ref,\n                           ref_storage_args=s_opts,\n                           remote_protocol='s3',\n                           remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nCPU times: user 735 ms, sys: 31.4 ms, total: 766 ms\nWall time: 3.57 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:         (time: 13, latitude: 360, longitude: 720, nv: 2)\nCoordinates:\n  * latitude        (latitude) float32 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float32 -90.0 -89.5 -89.5 ... 89.5 89.5 90.0\n  * longitude       (longitude) float32 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float32 -180.0 -179.5 -179.5 ... 179.5 180.0\n  * time            (time) datetime64[ns] 2014-12-16T12:00:00 ... 2015-12-16T...\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    SSH             (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHIBC          (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    SSHNOIBC        (time, latitude, longitude) float32 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2015-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2014-12-01T00:00:00\n    title:                        ECCO Sea Surface Height - Monthly Mean 0.5 ...\n    uuid:                         08a2fc68-4158-11eb-b498-0cc47a3f6943xarray.DatasetDimensions:time: 13latitude: 360longitude: 720nv: 2Coordinates: (6)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)latitude_bnds(latitude, nv)float32-90.0 -89.5 -89.5 ... 89.5 90.0coverage_content_type :coordinatelong_name :latitude bounds grid cellsarray([[-90. , -89.5],\n       [-89.5, -89. ],\n       [-89. , -88.5],\n       [-88.5, -88. ],\n       [-88. , -87.5],\n       [-87.5, -87. ],\n       [-87. , -86.5],\n       [-86.5, -86. ],\n       [-86. , -85.5],\n       [-85.5, -85. ],\n       [-85. , -84.5],\n       [-84.5, -84. ],\n       [-84. , -83.5],\n       [-83.5, -83. ],\n       [-83. , -82.5],\n       [-82.5, -82. ],\n       [-82. , -81.5],\n       [-81.5, -81. ],\n       [-81. , -80.5],\n       [-80.5, -80. ],\n...\n       [ 80. ,  80.5],\n       [ 80.5,  81. ],\n       [ 81. ,  81.5],\n       [ 81.5,  82. ],\n       [ 82. ,  82.5],\n       [ 82.5,  83. ],\n       [ 83. ,  83.5],\n       [ 83.5,  84. ],\n       [ 84. ,  84.5],\n       [ 84.5,  85. ],\n       [ 85. ,  85.5],\n       [ 85.5,  86. ],\n       [ 86. ,  86.5],\n       [ 86.5,  87. ],\n       [ 87. ,  87.5],\n       [ 87.5,  88. ],\n       [ 88. ,  88.5],\n       [ 88.5,  89. ],\n       [ 89. ,  89.5],\n       [ 89.5,  90. ]], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)longitude_bnds(longitude, nv)float32-180.0 -179.5 ... 179.5 180.0coverage_content_type :coordinatelong_name :longitude bounds grid cellsarray([[-180. , -179.5],\n       [-179.5, -179. ],\n       [-179. , -178.5],\n       ...,\n       [ 178.5,  179. ],\n       [ 179. ,  179.5],\n       [ 179.5,  180. ]], dtype=float32)time(time)datetime64[ns]2014-12-16T12:00:00 ... 2015-12-...axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000', '2015-01-16T12:00:00.000000000',\n       '2015-02-15T00:00:00.000000000', '2015-03-16T12:00:00.000000000',\n       '2015-04-16T00:00:00.000000000', '2015-05-16T12:00:00.000000000',\n       '2015-06-16T00:00:00.000000000', '2015-07-16T12:00:00.000000000',\n       '2015-08-16T12:00:00.000000000', '2015-09-16T00:00:00.000000000',\n       '2015-10-16T12:00:00.000000000', '2015-11-16T00:00:00.000000000',\n       '2015-12-16T12:00:00.000000000'], dtype='datetime64[ns]')time_bnds(time, nv)datetime64[ns]dask.array<chunksize=(1, 2), meta=np.ndarray>comment :Start and end times of averaging period.coverage_content_type :coordinatelong_name :time bounds of averaging period\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         208 B \n                         16 B \n                    \n                    \n                    \n                         Shape \n                         (13, 2) \n                         (1, 2) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     datetime64[ns] \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  2\n  13\n\n        \n    \nData variables: (3)SSH(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nSSHIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Not an SSH itself, but a correction to model sea level anomaly (ETAN) required to account for the static part of sea surface displacement by atmosphere pressure loading: SSH = SSHNOIBC - SSHIBC. Note: Use SSH for model-data comparisons with altimetry data products that DO apply the IB correction and SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :The inverted barometer (IB) correction to sea surface height due to atmospheric pressure loadingunits :mvalid_max :0.5245633721351624valid_min :-0.30144819617271423\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nSSHNOIBC(time, latitude, longitude)float32dask.array<chunksize=(1, 360, 720), meta=np.ndarray>comment :Sea surface height anomaly above the geoid without the inverse barometer (IB) correction, suitable for comparisons with altimetry sea surface height data products that do NOT apply the inverse barometer (IB) correction. Note: SSHNOIBC is calculated by correcting model sea level anomaly ETAN for two effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). In ECCO Version 4 Release 4 the model is forced with atmospheric pressure loading. SSHNOIBC does not correct for the static part of the effect of atmosphere pressure loading on sea surface height (the so-called inverse barometer (IB) correction). Use SSH for comparisons with altimetry data products that DO apply the IB correction.coverage_content_type :modelResultlong_name :Sea surface height anomaly without the inverted barometer (IB) correctionunits :mvalid_max :1.4550364017486572valid_min :-1.6654272079467773\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nAttributes: (57)Conventions :CF-1.8, ACDD-1.3acknowledgement :This research was carried out by the Jet Propulsion Laboratory, managed by the California Institute of Technology under a contract with the National Aeronautics and Space Administration.author :Ian Fenty and Ou Wangcdm_data_type :Gridcomment :Fields provided on a regular lat-lon grid. They have been mapped to the regular lat-lon grid from the original ECCO lat-lon-cap 90 (llc90) native model grid. SSH (dynamic sea surface height) = SSHNOIBC (dynamic sea surface without the inverse barometer correction) - SSHIBC (inverse barometer correction). The inverted barometer correction accounts for variations in sea surface height due to atmospheric pressure variations.coordinates_comment :Note: the global 'coordinates' attribute describes auxillary coordinates.creator_email :ecco-group@mit.educreator_institution :NASA Jet Propulsion Laboratory (JPL)creator_name :ECCO Consortiumcreator_type :groupcreator_url :https://ecco-group.orgdate_created :2020-12-18T09:39:51date_issued :2020-12-18T09:39:51date_metadata_modified :2021-03-15T22:07:49date_modified :2021-03-15T22:07:49geospatial_bounds_crs :EPSG:4326geospatial_lat_max :90.0geospatial_lat_min :-90.0geospatial_lat_resolution :0.5geospatial_lat_units :degrees_northgeospatial_lon_max :180.0geospatial_lon_min :-180.0geospatial_lon_resolution :0.5geospatial_lon_units :degrees_easthistory :Inaugural release of an ECCO Central Estimate solution to PO.DAACid :10.5067/ECG5M-SSH44institution :NASA Jet Propulsion Laboratory (JPL)instrument_vocabulary :GCMD instrument keywordskeywords :EARTH SCIENCE > OCEANS > SEA SURFACE TOPOGRAPHY > SEA SURFACE HEIGHT, EARTH SCIENCE SERVICES > MODELS > EARTH SCIENCE REANALYSES/ASSIMILATION MODELSkeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordslicense :Public Domainmetadata_link :https://cmr.earthdata.nasa.gov/search/collections.umm_json?ShortName=ECCO_L4_SSH_05DEG_MONTHLY_V4R4naming_authority :gov.nasa.jplplatform :ERS-1/2, TOPEX/Poseidon, Geosat Follow-On (GFO), ENVISAT, Jason-1, Jason-2, CryoSat-2, SARAL/AltiKa, Jason-3, AVHRR, Aquarius, SSM/I, SSMIS, GRACE, DTU17MDT, Argo, WOCE, GO-SHIP, MEOP, Ice Tethered Profilers (ITP)platform_vocabulary :GCMD platform keywordsprocessing_level :L4product_name :SEA_SURFACE_HEIGHT_mon_mean_2014-12_ECCO_V4r4_latlon_0p50deg.ncproduct_time_coverage_end :2018-01-01T00:00:00product_time_coverage_start :1992-01-01T12:00:00product_version :Version 4, Release 4program :NASA Physical Oceanography, Cryosphere, Modeling, Analysis, and Prediction (MAP)project :Estimating the Circulation and Climate of the Ocean (ECCO)publisher_email :podaac@podaac.jpl.nasa.govpublisher_institution :PO.DAACpublisher_name :Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_type :institutionpublisher_url :https://podaac.jpl.nasa.govreferences :ECCO Consortium, Fukumori, I., Wang, O., Fenty, I., Forget, G., Heimbach, P., & Ponte, R. M. 2020. Synopsis of the ECCO Central Production Global Ocean and Sea-Ice State Estimate (Version 4 Release 4). doi:10.5281/zenodo.3765928source :The ECCO V4r4 state estimate was produced by fitting a free-running solution of the MITgcm (checkpoint 66g) to satellite and in situ observational data in a least squares sense using the adjoint methodstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsummary :This dataset provides monthly-averaged dynamic sea surface height interpolated to a regular 0.5-degree grid from the ECCO Version 4 Release 4 (V4r4) ocean and sea-ice state estimate. Estimating the Circulation and Climate of the Ocean (ECCO) state estimates are dynamically and kinematically-consistent reconstructions of the three-dimensional, time-evolving ocean, sea-ice, and surface atmospheric states. ECCO V4r4 is a free-running solution of a global, nominally 1-degree configuration of the MIT general circulation model (MITgcm) that has been fit to observations in a least-squares sense. Observational data constraints used in V4r4 include sea surface height (SSH) from satellite altimeters [ERS-1/2, TOPEX/Poseidon, GFO, ENVISAT, Jason-1,2,3, CryoSat-2, and SARAL/AltiKa]; sea surface temperature (SST) from satellite radiometers [AVHRR], sea surface salinity (SSS) from the Aquarius satellite radiometer/scatterometer, ocean bottom pressure (OBP) from the GRACE satellite gravimeter; sea-ice concentration from satellite radiometers [SSM/I and SSMIS], and in-situ ocean temperature and salinity measured with conductivity-temperature-depth (CTD) sensors and expendable bathythermographs (XBTs) from several programs [e.g., WOCE, GO-SHIP, Argo, and others] and platforms [e.g., research vessels, gliders, moorings, ice-tethered profilers, and instrumented pinnipeds]. V4r4 covers the period 1992-01-01T12:00:00 to 2018-01-01T00:00:00.time_coverage_duration :P1Mtime_coverage_end :2015-01-01T00:00:00time_coverage_resolution :P1Mtime_coverage_start :2014-12-01T00:00:00title :ECCO Sea Surface Height - Monthly Mean 0.5 Degree (Version 4 Release 4)uuid :08a2fc68-4158-11eb-b498-0cc47a3f6943\n\n\n\nds_multi['SSH']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'SSH' (time: 13, latitude: 360, longitude: 720)>\ndask.array<concatenate, shape=(13, 360, 720), dtype=float32, chunksize=(1, 360, 720), chunktype=numpy.ndarray>\nCoordinates:\n  * latitude   (latitude) float32 -89.75 -89.25 -88.75 ... 88.75 89.25 89.75\n  * longitude  (longitude) float32 -179.8 -179.2 -178.8 ... 178.8 179.2 179.8\n  * time       (time) datetime64[ns] 2014-12-16T12:00:00 ... 2015-12-16T12:00:00\nAttributes:\n    comment:                Dynamic sea surface height anomaly above the geoi...\n    coverage_content_type:  modelResult\n    long_name:              Dynamic sea surface height anomaly\n    standard_name:          sea_surface_height_above_geoid\n    units:                  m\n    valid_max:              1.4207719564437866\n    valid_min:              -1.8805772066116333xarray.DataArray'SSH'time: 13latitude: 360longitude: 720dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         12.85 MiB \n                         0.99 MiB \n                    \n                    \n                    \n                         Shape \n                         (13, 360, 720) \n                         (1, 360, 720) \n                    \n                    \n                         Count \n                         39 Tasks \n                         13 Chunks \n                    \n                    \n                     Type \n                     float32 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  720\n  360\n  13\n\n        \n    \nCoordinates: (3)latitude(latitude)float32-89.75 -89.25 ... 89.25 89.75axis :Ybounds :latitude_bndscomment :uniform grid spacing from -89.75 to 89.75 by 0.5coverage_content_type :coordinatelong_name :latitude at grid cell centerstandard_name :latitudeunits :degrees_northarray([-89.75, -89.25, -88.75, ...,  88.75,  89.25,  89.75], dtype=float32)longitude(longitude)float32-179.8 -179.2 ... 179.2 179.8axis :Xbounds :longitude_bndscomment :uniform grid spacing from -179.75 to 179.75 by 0.5coverage_content_type :coordinatelong_name :longitude at grid cell centerstandard_name :longitudeunits :degrees_eastarray([-179.75, -179.25, -178.75, ...,  178.75,  179.25,  179.75],\n      dtype=float32)time(time)datetime64[ns]2014-12-16T12:00:00 ... 2015-12-...axis :Tbounds :time_bndscoverage_content_type :coordinatelong_name :center time of averaging periodstandard_name :timearray(['2014-12-16T12:00:00.000000000', '2015-01-16T12:00:00.000000000',\n       '2015-02-15T00:00:00.000000000', '2015-03-16T12:00:00.000000000',\n       '2015-04-16T00:00:00.000000000', '2015-05-16T12:00:00.000000000',\n       '2015-06-16T00:00:00.000000000', '2015-07-16T12:00:00.000000000',\n       '2015-08-16T12:00:00.000000000', '2015-09-16T00:00:00.000000000',\n       '2015-10-16T12:00:00.000000000', '2015-11-16T00:00:00.000000000',\n       '2015-12-16T12:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)comment :Dynamic sea surface height anomaly above the geoid, suitable for comparisons with altimetry sea surface height data products that apply the inverse barometer (IB) correction. Note: SSH is calculated by correcting model sea level anomaly ETAN for three effects: a) global mean steric sea level changes related to density changes in the Boussinesq volume-conserving model (Greatbatch correction, see sterGloH), b) the inverted barometer (IB) effect (see SSHIBC) and c) sea level displacement due to sea-ice and snow pressure loading (see sIceLoad). SSH can be compared with the similarly-named SSH variable in previous ECCO products that did not include atmospheric pressure loading (e.g., Version 4 Release 3). Use SSHNOIBC for comparisons with altimetry data products that do NOT apply the IB correction.coverage_content_type :modelResultlong_name :Dynamic sea surface height anomalystandard_name :sea_surface_height_above_geoidunits :mvalid_max :1.4207719564437866valid_min :-1.8805772066116333\n\n\n\n# Commenting for quarto site render\n# ds_multi['SSH'].hvplot.image()"
  },
  {
    "objectID": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#references",
    "href": "examples/PODAAC/PODAAC_ECCO_SSH__Kerchunk.html#references",
    "title": "PO.DAAC ECCO SSH",
    "section": "References",
    "text": "References\n\nhttps://github.com/fsspec/kerchunk\nhttps://medium.com/pangeo/fake-it-until-you-make-it-reading-goes-netcdf4-data-on-aws-s3-as-zarr-for-rapid-data-access-61e33f8fe685\nhttps://medium.com/pangeo/cloud-performant-reading-of-netcdf4-hdf5-data-using-the-zarr-library-1a95c5c92314"
  },
  {
    "objectID": "examples/LPDAAC/LPDAAC_ECOSTRESS_LSTE__Kerchunk.html",
    "href": "examples/LPDAAC/LPDAAC_ECOSTRESS_LSTE__Kerchunk.html",
    "title": "LP DAAC ECOSTRESS",
    "section": "",
    "text": "!mamba install kerchunk -y --quiet\n\n\n!mamba install h5py=3.2 -y --quiet # Default version in this environment does not work. Must update\n\n\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport s3fs\nimport datetime as dt\nimport logging\nimport fsspec\nimport ujson\nimport requests\nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport hvplot.xarray\n\n# The xarray produced from the reference file throws a SerializationWarning for each variable. Will need to explore why\n#import warnings\n#warnings.simplefilter(\"ignore\")\n\n\n\n\n\n\n\n\n\n\n\n\nfrom kerchunk.hdf import SingleHdf5ToZarr\nfrom kerchunk.combine import MultiZarrToZarr\n\n\ns3_cred_endpoint = {\n    'podaac':'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'lpdaac':'https://data.lpdaac.earthdatacloud.nasa.gov/s3credentials',\n    'ornldaac':'https://data.ornldaac.earthdata.nasa.gov/s3credentials',\n    'gesdisc':'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n}\n\n\ndef get_temp_creds():\n    temp_creds_url = s3_cred_endpoint['lpdaac']\n    return requests.get(temp_creds_url).json()\n\n\ntemp_creds_req = get_temp_creds()\n\nDirect Access a Single file\n\nfs = s3fs.S3FileSystem(\n    anon=False,\n    key=temp_creds_req['accessKeyId'],\n    secret=temp_creds_req['secretAccessKey'],\n    token=temp_creds_req['sessionToken']\n)\n\n\nurl = 's3://lp-prod-protected/ECO_L1B_GEO.002/ECOv002_L1B_GEO_21547_021_20220424T215449_0700_01/ECOv002_L1B_GEO_21547_021_20220424T215449_0700_01.h5'\n\n\ns3_file_obj = fs.open(url, mode='rb')\n\n\nimport h5py\n\n\nh5_file = h5py.File(s3_file_obj)\n\n\n#list(h5_file['Geolocation']['latitude'])\n\n\n%%time\nxr_ds = xr.open_dataset(s3_file_obj, chunks='auto', engine='h5netcdf', backend_kwargs={\"mask_and_scale\" : False, \"decode_times\" : False, \"decode_timedelta\" : False, \"use_cftime\" : False, \"decode_coords\" : False})\nxr_ds\n\nCPU times: user 134 ms, sys: 35 ms, total: 169 ms\nWall time: 534 ms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    *empty*xarray.DatasetDimensions:Coordinates: (0)Data variables: (0)Attributes: (0)\n\n\n\nSpecify a list of S3 URLs (MERRA2, 05/01/2019 - 05/31/2019)\n\nurls = ['s3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190501.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190502.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190503.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190504.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190505.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190506.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190507.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190508.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190509.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190510.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190511.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190512.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190513.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190514.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190515.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190516.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190517.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190518.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190519.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190520.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190521.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190522.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190523.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190524.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190525.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190526.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190527.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190528.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190529.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190530.nc4',\n's3://gesdisc-cumulus-prod-protected/MERRA2/M2T1NXSLV.5.12.4/2019/05/MERRA2_400.tavg1_2d_slv_Nx.20190531.nc4']\n\nGenerate the reference kerchunk files. These files can take a little time to generate. Do not run if JSON files already exist in ./jsons/ directory.\n\nso = dict(\n    mode=\"rb\",\n    anon=False,\n    default_fill_cache=False,\n    default_cache_type=\"none\"\n)\n\n#references = []\nfor u in urls:\n    with fs.open(u, **so) as infile:\n        h5chunks = SingleHdf5ToZarr(infile, u, inline_threshold=300)\n        with open(f\"jsons/{u.split('/')[-1]}.json\", 'wb') as outfile:\n            translate = h5chunks.translate()\n            outfile.write(ujson.dumps(translate).encode())\n            #references.append(translate)\n\nCreate a list with the paths to the reference files\n\nfs_ref_list = fsspec.filesystem('file')\n\n\nreference_list = sorted([x for x in fs_ref_list.ls('jsons') if '.json' in x])\nreference_list\n\nOpen the first reference file to read into an xarray dataset\n\nwith open(reference_list[0]) as j:\n    reference = ujson.load(j)\n\nSet configurations options\n\ns_opts = {'skip_instance_cache':True}   #json\nr_opts = {'anon':False,          \n          'key':temp_creds_req['accessKeyId'], \n          'secret':temp_creds_req['secretAccessKey'], \n          'token':temp_creds_req['sessionToken']}    #ncfiles\n\n\nfs_single = fsspec.filesystem(\"reference\", \n                       fo=reference, \n                       ref_storage_args=s_opts,\n                       remote_protocol='s3', \n                       remote_options=r_opts)\n\nRead in a single reference object. Get lots of SerializationWarnings. Ignored using the warning package, but the fill value, data range, min value, and max value DO NOT match the source file.\n\n%%time\nm = fs_single.get_mapper(\"\")\nds_single = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\nds_single\n\n\n#ds_single\n\n\nCombine the single reference files created above into a single time series reference file THIS DID NOT WORK\n\n# mzz = MultiZarrToZarr(\n#     reference_list,\n#     remote_protocol=\"s3\",\n#     remote_options=r_opts,\n#     concat_dims=[\"time\"]\n# )\n\n# out = mzz.translate()\n\n\n# fs_mzz = fsspec.filesystem(\"reference\",\n#                            fo=out,\n#                            ref_storage_args=s_opts,\n#                            remote_protocol='s3',\n#                            remote_options=r_opts)\n\n\n# m = fs_mzz.get_mapper(\"\")\n# ds_multi = xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={})\n\n\nCombine the single reference files created above into a single time series reference file THIS DID WORK\n\n%%time\nds_k =[]\n\nfor ref in reference_list:\n    s_opts = s_opts\n    r_opts = r_opts\n    fs = fsspec.filesystem(\n        \"reference\", \n        fo=ref, \n        ref_storage_args=s_opts,\n        remote_protocol='s3', \n        remote_options=r_opts)\n    m = fs.get_mapper(\"\")\n    ds_k.append(xr.open_dataset(m, engine=\"zarr\", backend_kwargs={'consolidated':False}, chunks={}))\n    \nds_multi = xr.concat(ds_k, dim='time')\n    \nds_multi\n\nAgains, the fill value, data range, min value, and max value DO NOT match the source file\n\n#ds_multi = xr.concat(ds_k, dim='time')\n\n\n#ds_multi\n\n\nds_multi['T500']\n\n\n# Commenting for quarto site render\n# ds_multi['T500'].hvplot.image(x='lon', y='lat')"
  },
  {
    "objectID": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html",
    "href": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "import geopandas\nimport json\nimport shapely\nimport shapely.geometry\nfrom shapely.ops import transform\nfrom shapely.geometry import Point\nfrom shapely.geometry import Polygon\nimport geoviews as gv\nfrom pystac_client import Client  \nimport xarray\nimport rasterio as rio\nimport rioxarray\nimport os\ngv.extension('bokeh', 'matplotlib')"
  },
  {
    "objectID": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#create-buffer-around-point-location",
    "href": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#create-buffer-around-point-location",
    "title": "EarthData Cloud Cookbook",
    "section": "Create buffer around point location",
    "text": "Create buffer around point location\n\nlon = -84.0106\nlat = 10.432\nbuffer = 0.001    # decimal degrees equal to ~222 meters\n\n\nloc = Point(lon, lat).buffer(buffer)\n\n\ntype(loc)\n\nshapely.geometry.polygon.Polygon\n\n\n\nbase = gv.tile_sources.EsriImagery.opts(width=650, height=500)\nsample_loc = gv.Polygons(loc).opts(line_color='yellow', line_width=10, color=None)\nbase * sample_loc\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nTranslate the shapely polygon to a GeoJSON Polygon Object, which is what the STAC API expects.\n\nroi = json.loads(geopandas.GeoSeries([loc]).to_json())\nroi\n\n{'type': 'FeatureCollection',\n 'features': [{'id': '0',\n   'type': 'Feature',\n   'properties': {},\n   'geometry': {'type': 'Polygon',\n    'coordinates': [[[-84.00959999999999, 10.432],\n      [-84.00960481527332, 10.43190198285967],\n      [-84.00961921471959, 10.431804909677984],\n      [-84.00964305966427, 10.431709715322746],\n      [-84.00967612046749, 10.431617316567635],\n      [-84.00971807873565, 10.431528603263175],\n      [-84.00976853038769, 10.43144442976698],\n      [-84.00982698954664, 10.431365606715836],\n      [-84.0098928932188, 10.431292893218814],\n      [-84.00996560671584, 10.431226989546637],\n      [-84.01004442976698, 10.431168530387698],\n      [-84.01012860326317, 10.431118078735652],\n      [-84.01021731656763, 10.43107612046749],\n      [-84.01030971532275, 10.431043059664269],\n      [-84.01040490967799, 10.431019214719598],\n      [-84.01050198285967, 10.431004815273328],\n      [-84.0106, 10.431000000000001],\n      [-84.01069801714033, 10.431004815273328],\n      [-84.010795090322, 10.431019214719598],\n      [-84.01089028467725, 10.431043059664269],\n      [-84.01098268343236, 10.43107612046749],\n      [-84.01107139673682, 10.431118078735652],\n      [-84.01115557023302, 10.431168530387698],\n      [-84.01123439328416, 10.431226989546637],\n      [-84.01130710678119, 10.431292893218814],\n      [-84.01137301045335, 10.431365606715836],\n      [-84.0114314696123, 10.43144442976698],\n      [-84.01148192126435, 10.431528603263175],\n      [-84.0115238795325, 10.431617316567635],\n      [-84.01155694033572, 10.431709715322746],\n      [-84.0115807852804, 10.431804909677984],\n      [-84.01159518472667, 10.43190198285967],\n      [-84.0116, 10.432],\n      [-84.01159518472667, 10.43209801714033],\n      [-84.0115807852804, 10.432195090322017],\n      [-84.01155694033572, 10.432290284677254],\n      [-84.0115238795325, 10.432382683432365],\n      [-84.01148192126435, 10.432471396736826],\n      [-84.0114314696123, 10.43255557023302],\n      [-84.01137301045335, 10.432634393284165],\n      [-84.01130710678119, 10.432707106781187],\n      [-84.01123439328416, 10.432773010453364],\n      [-84.01115557023302, 10.432831469612303],\n      [-84.01107139673682, 10.432881921264348],\n      [-84.01098268343236, 10.432923879532511],\n      [-84.01089028467725, 10.432956940335732],\n      [-84.010795090322, 10.432980785280403],\n      [-84.01069801714033, 10.432995184726673],\n      [-84.0106, 10.433],\n      [-84.01050198285967, 10.432995184726673],\n      [-84.01040490967799, 10.432980785280403],\n      [-84.01030971532275, 10.432956940335732],\n      [-84.01021731656763, 10.432923879532511],\n      [-84.01012860326317, 10.432881921264348],\n      [-84.01004442976698, 10.432831469612303],\n      [-84.00996560671584, 10.432773010453364],\n      [-84.0098928932188, 10.432707106781187],\n      [-84.00982698954664, 10.432634393284165],\n      [-84.00976853038769, 10.43255557023302],\n      [-84.00971807873565, 10.432471396736826],\n      [-84.00967612046749, 10.432382683432365],\n      [-84.00964305966427, 10.432290284677254],\n      [-84.00961921471959, 10.432195090322017],\n      [-84.00960481527332, 10.43209801714033],\n      [-84.00959999999999, 10.432]]]},\n   'bbox': [-84.0116, 10.431000000000001, -84.00959999999999, 10.433]}],\n 'bbox': [-84.0116, 10.431000000000001, -84.00959999999999, 10.433]}\n\n\nGeoJSON Polygon Object vertices are expected to be in counterclockwise order. The current object vertices are in clockwise order. Below we reverse the order of the vertices and assign them back to our roi object.\n\nroi['features'][0]['geometry']['coordinates'][0] = roi['features'][0]['geometry']['coordinates'][0][::-1]"
  },
  {
    "objectID": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#find-data-using-the-stac-api",
    "href": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#find-data-using-the-stac-api",
    "title": "EarthData Cloud Cookbook",
    "section": "Find data using the STAC API",
    "text": "Find data using the STAC API\nSpecify the STAC API endpoint\n\nSTAC_URL = 'https://cmr.earthdata.nasa.gov/stac'\n\nConnect to the LPCLOUD catalog using PySTAC Client\n\ncatalog = Client.open(f'{STAC_URL}/LPCLOUD/')\n\nSubmit a query for: - HLSL30 and HLSS30 - The roi’s geometry - Dates between 05-01-2021 and 06-30-2022\n\nsearch = catalog.search(\n    collections = ['HLSL30.v2.0', 'HLSS30.v2.0'],\n    intersects = roi['features'][0]['geometry'],\n    datetime = '2021-05/2022-06'\n)               \n\n\nsearch.matched()\n\n87\n\n\nGet all the STAC Items/granules\n\nitems = search.get_all_items()\n\n\nlen(items)\n\n87\n\n\nGet the first STAC Item from the list and print off the available assets\n\nitems[0].assets\n\n{'B07': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B07.tif>,\n 'B01': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B01.tif>,\n 'B04': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B04.tif>,\n 'B06': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B06.tif>,\n 'VZA': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.VZA.tif>,\n 'Fmask': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.Fmask.tif>,\n 'B02': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B02.tif>,\n 'SAA': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.SAA.tif>,\n 'B11': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B11.tif>,\n 'B03': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B03.tif>,\n 'VAA': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.VAA.tif>,\n 'B10': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B10.tif>,\n 'B05': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B05.tif>,\n 'B09': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B09.tif>,\n 'SZA': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.SZA.tif>,\n 'browse': <Asset href=https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-public/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.jpg>,\n 'metadata': <Asset href=https://cmr.earthdata.nasa.gov/search/concepts/G2144745416-LPCLOUD.xml>}\n\n\nGrab the URL for the B04 asset\n\ndata_url = items[0].assets['B04'].href\ndata_url\n\n'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T16PHS.2021133T155359.v2.0/HLS.L30.T16PHS.2021133T155359.v2.0.B04.tif'\n\n\nNOTE: The above returns the HTTPS URL. For direct S3 access of cloud assets the S3 URL is need. See the following resource on how to generate the S3 URL: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/02_Data_Discovery_CMR-STAC_API.html"
  },
  {
    "objectID": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#read-in-the-url-using-rioxarray",
    "href": "examples/LPDAAC/Find_and_Access_HLS_PointBuffer.html#read-in-the-url-using-rioxarray",
    "title": "EarthData Cloud Cookbook",
    "section": "Read in the URL using rioxarray",
    "text": "Read in the URL using rioxarray\nNOTE: The example below show how to access the asset via HTTPS. An example for performing direct S3 access can be found here: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/05_Data_Access_Direct_S3.html\nFirst we need to set our gdal configs. Make sure a .netrc file has been created in your home directory\n\nrio_env = rio.Env(GDAL_DISABLE_READDIR_ON_OPEN='EMPTY',\n                  GDAL_HTTP_COOKIEFILE=os.path.expanduser('~/cookies.txt'),\n                  GDAL_HTTP_COOKIEJAR=os.path.expanduser('~/cookies.txt'))\nrio_env.__enter__()\n\n<rasterio.env.Env at 0x7f846be57f70>\n\n\n\nda = rioxarray.open_rasterio(data_url)\n\n\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (band: 1, y: 3660, x: 3660)>\n[13395600 values with dtype=int16]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 8e+05 8e+05 8.001e+05 ... 9.097e+05 9.098e+05\n  * y            (y) float64 1.2e+06 1.2e+06 1.2e+06 ... 1.09e+06 1.09e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -9999.0\n    scale_factor:  0.0001\n    add_offset:    0.0\n    long_name:     Redxarray.DataArrayband: 1y: 3660x: 3660...[13395600 values with dtype=int16]Coordinates: (4)band(band)int641array([1])x(x)float648e+05 8e+05 ... 9.097e+05 9.098e+05array([799995., 800025., 800055., ..., 909705., 909735., 909765.])y(y)float641.2e+06 1.2e+06 ... 1.09e+06array([1199985., 1199955., 1199925., ..., 1090275., 1090245., 1090215.])spatial_ref()int640crs_wkt :PROJCS[\"UTM Zone 16, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-87],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :Unknown datum based upon the WGS 84 ellipsoidhorizontal_datum_name :Not_specified_based_on_WGS_84_spheroidprojected_crs_name :UTM Zone 16, Northern Hemispheregrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-87.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"UTM Zone 16, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-87],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :799980.0 30.0 0.0 1200000.0 0.0 -30.0array(0)Attributes: (4)_FillValue :-9999.0scale_factor :0.0001add_offset :0.0long_name :Red\n\n\nDrop the ‘band’ coordinate\n\nda.squeeze('band', drop=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (y: 3660, x: 3660)>\n[13395600 values with dtype=int16]\nCoordinates:\n  * x            (x) float64 8e+05 8e+05 8.001e+05 ... 9.097e+05 9.098e+05\n  * y            (y) float64 1.2e+06 1.2e+06 1.2e+06 ... 1.09e+06 1.09e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    -9999.0\n    scale_factor:  0.0001\n    add_offset:    0.0\n    long_name:     Redxarray.DataArrayy: 3660x: 3660...[13395600 values with dtype=int16]Coordinates: (3)x(x)float648e+05 8e+05 ... 9.097e+05 9.098e+05array([799995., 800025., 800055., ..., 909705., 909735., 909765.])y(y)float641.2e+06 1.2e+06 ... 1.09e+06array([1199985., 1199955., 1199925., ..., 1090275., 1090245., 1090215.])spatial_ref()int640crs_wkt :PROJCS[\"UTM Zone 16, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-87],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :Unknown datum based upon the WGS 84 ellipsoidhorizontal_datum_name :Not_specified_based_on_WGS_84_spheroidprojected_crs_name :UTM Zone 16, Northern Hemispheregrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-87.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"UTM Zone 16, Northern Hemisphere\",GEOGCS[\"Unknown datum based upon the WGS 84 ellipsoid\",DATUM[\"Not_specified_based_on_WGS_84_spheroid\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-87],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]GeoTransform :799980.0 30.0 0.0 1200000.0 0.0 -30.0array(0)Attributes: (4)_FillValue :-9999.0scale_factor :0.0001add_offset :0.0long_name :Red"
  },
  {
    "objectID": "examples/USGS_Landsat/Landsat_C2_Search_Access.html",
    "href": "examples/USGS_Landsat/Landsat_C2_Search_Access.html",
    "title": "USGS Landsat Cloud Data - Search and Access",
    "section": "",
    "text": "import rasterio as rio\nfrom rasterio.session import AWSSession\nimport rioxarray\nimport boto3\nimport json\nfrom pystac_client import Client\nimport hvplot.xarray\nSeach for LS Scenes using STAC API\nPrint first 5 item ids and associated datetime"
  },
  {
    "objectID": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#data-access---rioxarray",
    "href": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#data-access---rioxarray",
    "title": "USGS Landsat Cloud Data - Search and Access",
    "section": "Data Access - rioxarray",
    "text": "Data Access - rioxarray\nSet working environment\n\nsession = boto3.Session()\n\n\nrio_env = rio.Env(AWSSession(session, requester_pays=True), \n                  AWS_NO_SIGN_REQUEST='NO',\n                  GDAL_DISABLE_READDIR_ON_OPEN='TRUE')\nrio_env.__enter__()\n\n<rasterio.env.Env at 0x7f6e5276eb50>\n\n\n\ns3_url = 's3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF'\n\nRead S3 asset as xarray datarray\n\nda = rioxarray.open_rasterio(s3_url, chunks='auto').squeeze('band', drop=True)\n\n\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray (y: 7821, x: 7661)>\ndask.array<getitem, shape=(7821, 7661), dtype=uint16, chunksize=(7821, 7661), chunktype=numpy.ndarray>\nCoordinates:\n  * x            (x) float64 2.889e+05 2.889e+05 ... 5.187e+05 5.187e+05\n  * y            (y) float64 2.992e+06 2.992e+06 ... 2.758e+06 2.758e+06\n    spatial_ref  int64 0\nAttributes:\n    _FillValue:    0.0\n    scale_factor:  1.0\n    add_offset:    0.0xarray.DataArrayy: 7821x: 7661dask.array<chunksize=(7821, 7661), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         114.28 MiB \n                         114.28 MiB \n                    \n                    \n                    \n                         Shape \n                         (7821, 7661) \n                         (7821, 7661) \n                    \n                    \n                         Count \n                         3 Tasks \n                         1 Chunks \n                    \n                    \n                     Type \n                     uint16 \n                     numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  7661\n  7821\n\n        \n    \nCoordinates: (3)x(x)float642.889e+05 2.889e+05 ... 5.187e+05array([288900., 288930., 288960., ..., 518640., 518670., 518700.])y(y)float642.992e+06 2.992e+06 ... 2.758e+06array([2992200., 2992170., 2992140., ..., 2757660., 2757630., 2757600.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 17N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-81],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32617\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 17Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-81.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 17N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-81],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32617\"]]GeoTransform :288885.0 30.0 0.0 2992215.0 0.0 -30.0array(0)Attributes: (3)_FillValue :0.0scale_factor :1.0add_offset :0.0\n\n\nPlot scene\n\n#da.hvplot(x='x', y='y', crs='epsg:32617', rasterize=True, width=800, height=600, tiles = 'ESRI') # TODO: how to exclude fill values\nda.hvplot(x='x', y='y', crs='epsg:32617', rasterize=True, width=800, height=600)"
  },
  {
    "objectID": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#aws-cli",
    "href": "examples/USGS_Landsat/Landsat_C2_Search_Access.html#aws-cli",
    "title": "USGS Landsat Cloud Data - Search and Access",
    "section": "AWS CLI",
    "text": "AWS CLI\nList content in bucket\n\n! aws s3 ls s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/ --request-payer requester\n\n2021-11-05 08:37:33     116979 LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt\n2021-11-05 08:37:33   77713726 LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF\n2021-11-05 08:37:34   76108899 LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF\n2021-11-05 08:37:36   75282069 LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF\n2021-11-05 08:37:37   77374352 LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF\n2021-11-05 08:37:38   77527685 LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF\n2021-11-05 08:37:39   76485245 LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF\n2021-11-05 08:37:40   78304185 LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF\n2021-11-05 08:37:42   75847018 LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF\n2021-11-05 08:37:44   73697164 LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF\n2021-11-05 08:37:45  304168225 LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF\n2021-11-05 08:37:48   60967770 LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF\n2021-11-05 08:37:49      15036 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json\n2021-11-05 08:37:49      12369 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt\n2021-11-05 08:37:49      18065 LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml\n2021-11-05 08:37:49    3527153 LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF\n2021-11-05 08:37:49     222983 LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF\n2021-11-05 08:37:49    2052489 LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF\n2021-11-05 08:37:49    1783702 LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF\n2021-11-05 08:37:50    8239344 LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF\n2021-11-05 08:37:50    2930826 LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF\n2021-11-05 08:37:50      26399 LC08_L1TP_016042_20211027_20211104_02_T1_stac.json\n2021-11-05 08:37:50      46747 LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg\n2021-11-05 08:37:50       6015 LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg\n\n\nDownload content in bucket to local\n\n! aws s3 cp s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/ . --recursive --request-payer \n\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt to ./LC08_L1TP_016042_20211027_20211104_02_T1_ANG.txt\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B10.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B2.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B1.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B11.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B6.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B3.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B4.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B5.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.json\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.txt\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml to ./LC08_L1TP_016042_20211027_20211104_02_T1_MTL.xml\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B7.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_SZA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_SAA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_QA_RADSAT.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_QA_PIXEL.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_VAA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_stac.json to ./LC08_L1TP_016042_20211027_20211104_02_T1_stac.json\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg to ./LC08_L1TP_016042_20211027_20211104_02_T1_thumb_large.jpeg\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg to ./LC08_L1TP_016042_20211027_20211104_02_T1_thumb_small.jpeg\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B9.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_VZA.TIF\ndownload: s3://usgs-landsat/collection02/level-1/standard/oli-tirs/2021/016/042/LC08_L1TP_016042_20211027_20211104_02_T1/LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF to ./LC08_L1TP_016042_20211027_20211104_02_T1_B8.TIF"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NASA Earthdata Cloud Cookbook",
    "section": "",
    "text": "Welcome to the NASA Openscapes EarthData Cloud Cookbook!\nThis Cookbook is learning-oriented to support scientific researchers using NASA Earthdata from Distributed Active Archive Centers (DAACs) as they migrate their workflows to the cloud. It has resources to learn how to work with NASA Earthdata on the cloud, as well as well as documentation for how to contribute to these resources. It is under active, open development."
  },
  {
    "objectID": "index.html#the-cloud-paradigm",
    "href": "index.html#the-cloud-paradigm",
    "title": "NASA Earthdata Cloud Cookbook",
    "section": "The Cloud Paradigm",
    "text": "The Cloud Paradigm\nNASA Distributed Active Archive Centers (DAACs) are in the process of moving their data holdings to the cloud. In the new paradigm, data storage (orange in the illustration) will migrate to the cloud (green) and DAAC-provided tools and services built on top of the data are co-located in the Earthdata Cloud.\n\n\n\nIllustration by Catalina Oaida, PO.DAAC\n\n\nAs this data migration occurs, DAACs will have more information about how users can access data. For example, the Cloud Data page at PO.DAAC offers access to resources to help guide data users in discovering, accessing, and utilizing cloud data. During this transition, some data will continue to be available from the traditional on premise archive, while some data will also be available from and within the Earthdata Cloud.\nTo learn more about NASA’s EarthData Cloud Migration:\n\nNASA EarthData Cloud Evolution - Starting point for understanding the background for moving to the Cloud.\nHow we work - Katie Baynes, Keynote at FedGeoDay2020 (video). Nice overview of EOSDIS work and emphasis on open science\nCloud Data Egress: How EOSDIS Supports User Needs - Emily Cassidy (blog). Describes supporting users’ needs during cloud migration by providing analysis-ready data"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "NASA Earthdata Cloud Cookbook",
    "section": "About",
    "text": "About\nThis Earthdata Cloud Cookbook is being developed as a cross-DAAC collaboration by the NASA-Openscapes team. Learn more at nasa-openscapes.github.io."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Starting advice from https://nasa-openscapes.github.io/2021-Cloud-Hackathon/logistics/github-workflows.html#git-update-revert-etc"
  },
  {
    "objectID": "troubleshooting.html#jupyterhub",
    "href": "troubleshooting.html#jupyterhub",
    "title": "Troubleshooting",
    "section": "JupyterHub",
    "text": "JupyterHub\nNot a git repository - in your terminal if you see the following, you likely need to cd change directory into your GitHub folder.\nfatal: not a git repository (or any parent up to mount point /home)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set)."
  },
  {
    "objectID": "troubleshooting.html#git-update-revert-etc",
    "href": "troubleshooting.html#git-update-revert-etc",
    "title": "Troubleshooting",
    "section": "Git: update, revert, etc",
    "text": "Git: update, revert, etc\nThese are some useful commands to revert/delete your local changes and update your fork with the most recent information from the main branch.\n\nDelete your local changes\nThere are several ways to delete your local changes if you were playing around and want to reset. Here are a few:\n\nUndo changes you’ve maybe saved or committed, but not pushed\nThis is less time and internet intensive (no new clone/download).\nIf you’ve got changes saved, but not yet staged, committed, or pushed, you’ll delete unstaged changes in the working directory with clean:\nYou’ll need to make sure you’re in the github repository (use pwd to check your present working directory and cd to change directory)\ngit clean -df\ngit checkout -- .\n\n\nBurn it all down\nYou’ll delete the whole repo that you have locally, and then reclone.\nYou’ll need to make sure you’re in the github repository (use pwd to check your present working directory and cd to change directory)\nrm -rf YOUR-REPO\nHere is a whole blog on how to go back in time (walk back changes), with conceptual diagrams, command line code, and screenshots from RStudio. https://ohi-science.org/news/github-going-back-in-time\n\n\n\nUpdate local branch with remote main branch\nIf while you’re working you would like to update your local your-branch with the most recent updates on the main branch on GitHub.com, there are several ways to do this. Here’s one.\ngit checkout your-branch\ngit fetch\ngit merge origin/main\n\n\nUpdate from main"
  },
  {
    "objectID": "external/zarr-eosdis-store.html",
    "href": "external/zarr-eosdis-store.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "Zarr Example\nimported on: 2023-02-22\n\nThis notebook is from NASA’s Zarr EOSDIS store notebook\n\n\nThe original source for this document is https://github.com/nasa/zarr-eosdis-store\n\n\n\nzarr-eosdis-store example\nInstall dependencies\n\nimport sys\n\n# zarr and zarr-eosdis-store, the main libraries being demoed\n!{sys.executable} -m pip install zarr zarr-eosdis-store\n\n# Notebook-specific libraries\n!{sys.executable} -m pip install matplotlib\n\nImportant: To run this, you must first create an Earthdata Login account (https://urs.earthdata.nasa.gov) and place your credentials in ~/.netrc e.g.:\n   machine urs.earthdata.nasa.gov login YOUR_USER password YOUR_PASSWORD\nNever share or commit your password / .netrc file!\nBasic usage. After these lines, we work with ds as though it were a normal Zarr dataset\n\nimport zarr\nfrom eosdis_store import EosdisStore\n\nurl = 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210715090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc'\n\nds = zarr.open(EosdisStore(url))\n\nView the file’s variable structure\n\nprint(ds.tree())\n\n/\n ├── analysed_sst (1, 17999, 36000) int16\n ├── analysis_error (1, 17999, 36000) int16\n ├── dt_1km_data (1, 17999, 36000) int16\n ├── lat (17999,) float32\n ├── lon (36000,) float32\n ├── mask (1, 17999, 36000) int16\n ├── sea_ice_fraction (1, 17999, 36000) int16\n ├── sst_anomaly (1, 17999, 36000) int16\n └── time (1,) int32\n\n\nFetch the latitude and longitude arrays and determine start and end indices for our area of interest. In this case, we’re looking at the Great Lakes, which have a nice, recognizeable shape. Latitudes 41 to 49, longitudes -93 to 76.\n\nlats = ds['lat'][:]\nlons = ds['lon'][:]\nlat_range = slice(lats.searchsorted(41), lats.searchsorted(49))\nlon_range = slice(lons.searchsorted(-93), lons.searchsorted(-76))\n\nGet the analysed sea surface temperature variable over our area of interest and apply scale factor and offset from the file metadata. In a future release, scale factor and add offset will be automatically applied.\n\nvar = ds['analysed_sst']\nanalysed_sst = var[0, lat_range, lon_range] * var.attrs['scale_factor'] + var.attrs['add_offset']\n\nDraw a pretty picture\n\nfrom matplotlib import pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = [16, 8]\nplt.imshow(analysed_sst[::-1, :])\nNone\n\n\n\n\nIn a dozen lines of code and a few seconds, we have managed to fetch and visualize the 3.2 megabyte we needed from a 732 megabyte file using the original archive URL and no processing services"
  },
  {
    "objectID": "external/cof-zarr-reformat.html",
    "href": "external/cof-zarr-reformat.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "imported on: 2023-02-22\n\nThis notebook is from NASA’s PO.DAAC, Access ECCO data via Harmony and the Zarr reformatter service example\n\n\nThe original source for this document is https://github.com/podaac/ECCO"
  },
  {
    "objectID": "external/cof-zarr-reformat.html#getting-started",
    "href": "external/cof-zarr-reformat.html#getting-started",
    "title": "EarthData Cloud Cookbook",
    "section": "Getting Started",
    "text": "Getting Started\nWe will access monthly ocean bottom pressure (OBP) data from ECCO V4r4 (10.5067/ECG5M-OBP44), which are provided as a monthly time series on a 0.5-degree latitude/longitude grid.\nThe data are archived in netCDF format. However, this notebook demonstration will request conversion to Zarr format for files covering the period between 2010 and 2018. Upon receiving our request, Harmony’s backend will convert the files and stage them in S3 for native access in AWS (us-west-2 region, specifically). We will access the new Zarr datasets as an aggregated dataset using xarray, and leverage the S3 native protocols for direct access to the data in an efficient manner.\n\n\nRequirements\n\nAWS\nThis notebook should be running in an EC2 instance in AWS region us-west-2, as previously mentioned. We recommend using an EC2 with at least 8GB of memory available.\nThe notebook was developed and tested using a t2.large instance (2 cpus; 8GB memory).\n\n\nPython 3\nMost of these imports are from the Python standard library. However, you will need to install these packages into your Python 3 environment if you have not already done so:\n\ns3fs\nrequests\npandas\nxarray\nmatplotlib\n\n\n\n\nRequirements\n\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nimport requests\nimport json\nimport time\nimport s3fs\n\nShortName = \"ECCO_L4_OBP_05DEG_MONTHLY_V4R4\"\n\n\n\nStudy period\nSet some “master” inputs to define the time and place contexts for our case studies in the ipynb. This example will be requesting time subsets and receiving global data back from the Harmony API.\n\nstart_date = \"2010-01-01\"\nend_date   = \"2018-12-31\"\n\n\n\nData Access\nSome features in the Harmony API require us to identify the target dataset/collection by its concept-id (which uniquely idenfifies it among the other datasets in the Common Metadata Repository). Support for selection by the dataset ShortName will be added in a future release.\n\nCommon Metadata Repository (CMR)\nFor now, we will need to get the concept-id that corresponds to our dataset by accessing its metadata from the CMR. Read more about the CMR at: https://cmr.earthdata.nasa.gov/\nRequest the UMM Collection metadata (i.e. metadata about the dataset) from the CMR and select the concept-id as a new variable ccid.\n\nresponse = requests.get(\n    url='https://cmr.earthdata.nasa.gov/search/collections.umm_json', \n    params={'provider': \"POCLOUD\",\n            'ShortName': ShortName,\n            'page_size': 1}\n)\n\nummc = response.json()['items'][0]\n\nccid = ummc['meta']['concept-id']\n\nccid\n\n'C1990404791-POCLOUD'\n\n\n\n\nHarmony API\nAnd get the Harmony API endpoint and zarr parameter like we did for SMAP before:\n\nbase = f\"https://harmony.earthdata.nasa.gov/{ccid}\"\nhreq = f\"{base}/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset\"\nrurl = f\"{hreq}?format=application/x-zarr\"\n\nprint(rurl)\n\nhttps://harmony.earthdata.nasa.gov/C1990404791-POCLOUD/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?format=application/x-zarr\n\n\nECCO monthly collections have 312 granules in V4r4 (you can confirm with the granule listing from CMR Search API) so we can get the entire time series for 2010 to 2018 with one request to the Harmony API.\nFormat a string of query parameters to limit the processing to the desired time period. Then, append the string of time subset parameters to the variable rurl.\n\nsubs = '&'.join([f'subset=time(\"{start_date}T00:00:00.000Z\":\"{end_date}T23:59:59.999Z\")'])\n\nrurl = f\"{rurl}&{subs}\"\n\nprint(rurl)\n\nhttps://harmony.earthdata.nasa.gov/C1990404791-POCLOUD/ogc-api-coverages/1.0.0/collections/all/coverage/rangeset?format=application/x-zarr&subset=time(\"2010-01-01T00:00:00.000Z\":\"2018-12-31T23:59:59.999Z\")\n\n\nSubmit the request and monitor the processing status in a while loop, breaking it on completion of the request job:\n\nresponse = requests.get(url=rurl).json()\n\n# Monitor status in a while loop. Wait 10 seconds for each check.\nwait = 10\nwhile True:\n    response = requests.get(url=response['links'][0]['href']).json()\n    if response['status']!='running':\n        break\n    print(f\"Job in progress ({response['progress']}%)\")\n    time.sleep(wait)\n\nprint(\"DONE!\")\n\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nJob in progress (0%)\nDONE!\n\n\nAccess the staged cloud datasets over native AWS interfaces\nCheck the message field in the response for clues about how to proceed:\n\nprint(response['message'])\n\nThe job has completed successfully. Contains results in AWS S3. Access from AWS us-west-2 with keys from https://harmony.earthdata.nasa.gov/cloud-access.sh\n\n\nThe third item in the list of links contains the shell script from the job status message printed above. Let’s download the same information in JSON format. It should be the fourth item; check to be sure:\n\nlen(response['links'])\n\n102\n\n\nSelect the url and download the json, then load to Python dictionary and print the keys:\n\nwith requests.get(response['links'][3]['href']) as r:\n    creds = r.json()\n\nprint(creds.keys())\n\ndict_keys(['AccessKeyId', 'SecretAccessKey', 'SessionToken', 'Expiration'])\n\n\nCheck the expiration timestamp for the temporary credentials:\n\ncreds['Expiration']\n\n'2021-06-11T02:36:29.000Z'\n\n\nOpen zarr datasets with s3fs and xarray\nGet the s3 output directory and list of zarr datasets from the list of links. The s3 directory should be the fifth item; the urls are from item six onward:\n\ns3_dir = response['links'][4]['href']\n\nprint(s3_dir)\n\ns3://harmony-prod-staging/public/harmony/netcdf-to-zarr/2295236b-8086-4543-9482-f524a9f2d0c3/\n\n\nNow select the URLs for the staged files and print the first one:\n\ns3_urls = [u['href'] for u in response['links'][5:]]\n\nprint(s3_urls[0])\n\ns3://harmony-prod-staging/public/harmony/netcdf-to-zarr/2295236b-8086-4543-9482-f524a9f2d0c3/OCEAN_BOTTOM_PRESSURE_mon_mean_2009-12_ECCO_V4r4_latlon_0p50deg.zarr\n\n\nUse the AWS s3fs package and your temporary aws_creds to open the zarr directory storage:\n\ns3 = s3fs.S3FileSystem(\n    key=creds['AccessKeyId'],\n    secret=creds['SecretAccessKey'],\n    token=creds['SessionToken'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nlen(s3.ls(s3_dir))\n\n97\n\n\nPlot the first Ocean Bottom Pressure dataset\nCheck out the documentation for xarray’s open_zarr method at this link. Open the first dataset and plot the OBP variable:\n\nds0 = xr.open_zarr(s3.get_mapper(s3_urls[0]), decode_cf=True, mask_and_scale=True)\n\n# Mask the dataset where OBP is not within the bounds of the variable's valid min/max:\nds0_masked = ds0.where((ds0.OBP>=ds0.OBP.valid_min) & (ds0.OBP<=ds0.OBP.valid_max))\n\n# Plot the masked dataset\nds0_masked.OBP.isel(time=0).plot.imshow(size=10)\n\n<matplotlib.image.AxesImage at 0x7f28ed2ba4c0>\n\n\n\n\n\nLoad the zarr datasets into one large xarray dataset\nLoad all the datasets in a loop and concatenate them:\n\nzds = xr.concat([xr.open_zarr(s3.get_mapper(u)) for u in s3_urls], dim=\"time\")\n\nprint(zds)\n\n<xarray.Dataset>\nDimensions:         (latitude: 360, longitude: 720, nv: 2, time: 97)\nCoordinates:\n  * latitude        (latitude) float64 -89.75 -89.25 -88.75 ... 89.25 89.75\n    latitude_bnds   (latitude, nv) float64 -90.0 -89.5 -89.5 ... 89.5 89.5 90.0\n  * longitude       (longitude) float64 -179.8 -179.2 -178.8 ... 179.2 179.8\n    longitude_bnds  (longitude, nv) float64 -180.0 -179.5 -179.5 ... 179.5 180.0\n  * time            (time) datetime64[ns] 2009-12-16T12:00:00 ... 2017-12-16T...\n    time_bnds       (time, nv) datetime64[ns] dask.array<chunksize=(1, 2), meta=np.ndarray>\nDimensions without coordinates: nv\nData variables:\n    OBP             (time, latitude, longitude) float64 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\n    OBPGMAP         (time, latitude, longitude) float64 dask.array<chunksize=(1, 360, 720), meta=np.ndarray>\nAttributes: (12/57)\n    Conventions:                  CF-1.8, ACDD-1.3\n    acknowledgement:              This research was carried out by the Jet Pr...\n    author:                       Ian Fenty and Ou Wang\n    cdm_data_type:                Grid\n    comment:                      Fields provided on a regular lat-lon grid. ...\n    coordinates_comment:          Note: the global 'coordinates' attribute de...\n    ...                           ...\n    time_coverage_duration:       P1M\n    time_coverage_end:            2010-01-01T00:00:00\n    time_coverage_resolution:     P1M\n    time_coverage_start:          2009-12-01T00:00:00\n    title:                        ECCO Ocean Bottom Pressure - Monthly Mean 0...\n    uuid:                         297c8df0-4158-11eb-b208-0cc47a3f687b\n\n\nReference OBP and mask the dataset according to the valid minimum and maximum:\n\nobp = zds.OBP\n\nprint(obp)\n\n<xarray.DataArray 'OBP' (time: 97, latitude: 360, longitude: 720)>\ndask.array<concatenate, shape=(97, 360, 720), dtype=float64, chunksize=(1, 360, 720), chunktype=numpy.ndarray>\nCoordinates:\n  * latitude   (latitude) float64 -89.75 -89.25 -88.75 ... 88.75 89.25 89.75\n  * longitude  (longitude) float64 -179.8 -179.2 -178.8 ... 178.8 179.2 179.8\n  * time       (time) datetime64[ns] 2009-12-16T12:00:00 ... 2017-12-16T06:00:00\nAttributes:\n    comment:                OBP excludes the contribution from global mean at...\n    coverage_content_type:  modelResult\n    long_name:              Ocean bottom pressure given as equivalent water t...\n    units:                  m\n    valid_max:              72.07011413574219\n    valid_min:              -1.7899188995361328\n\n\nGet the valid min and max from the corresponding CF attributes:\n\nobp_vmin, obp_vmax = obp.valid_min, obp.valid_max\n\nobp_vmin, obp_vmax\n\n(-1.7899188995361328, 72.07011413574219)\n\n\nMask the dataset according to the OBP min and max and plot a series:\n\n# Mask dataset where not inside OBP variable valid min/max:\nzds_masked = zds.where((obp>=obp_vmin)&(obp<=obp_vmax))\n\n# Plot SSH again for the first 12 time slices:\nobpp = zds_masked.OBP.isel(time=slice(0, 6)).plot(\n    x=\"longitude\", \n    y=\"latitude\", \n    col=\"time\",\n    levels=8,\n    col_wrap=3, \n    add_colorbar=False,\n    figsize=(14, 8)\n)\n\n# Plot a colorbar on a secondary axis\nmappable = obpp.axes[0][0].collections[0]\ncax = plt.axes([0.05, -0.04, 0.95, 0.04])\ncbar1 = plt.colorbar(mappable, cax=cax, orientation='horizontal')"
  },
  {
    "objectID": "our-cookbook.html",
    "href": "our-cookbook.html",
    "title": "Our Cookbook",
    "section": "",
    "text": "Our Cookbook is a place to learn, share, and experiment with NASA Earthdata on the Cloud. We know this has a lot of moving parts, and we are iterating as we go, and welcome feedback and contributions.\nThe Cookbook has How To building blocks and Tutorials that connect these building blocks through an example research question and specific data. How To guides and Tutorials are stable approaches we’ve developed and used to teach; they have been iterated and improved through feedback from researchers during events we’ve led. We also share work In Development: primarily lessons and other works-in-progress that we’re developing.\nWorking with NASA Earthdata in the Cloud means using a combination of software, tools, many of which require coding and are unfamiliar when we first get started. This is true for us all; we’re all coming with different skills and backgrounds and you’re not alone as we all learn these new technologies and workflows. We have found it helpful to have a growth mindset - these approaches are new and we don’t know how to do them yet. Please, don’t struggle alone - know that we’re all in this together as part of the open source community learning and co-creating together as we migrate our research to the Cloud.\nYou’re able to reuse any code in this book, adapting it for your own purposes. All chapters in the book are a combination of narrative, links, code, and outputs — and underlying each chapter is a file type that you can access on NASA-Openscapes GitHub (linked on the left navbar and right margin of each page): Markdown (.md), Jupyter (.ipynb), RMarkdown (.rmd) or Quarto (.qmd) files.\nWe will also be adding citations throughout so that you can easily credit the NASA Openscapes Mentors who created them."
  },
  {
    "objectID": "our-cookbook.html#learning-to-code",
    "href": "our-cookbook.html#learning-to-code",
    "title": "Our Cookbook",
    "section": "Learning to code",
    "text": "Learning to code\nHere are resources we recommend to help strengthen your coding skills for programmatic access to NASA data on the cloud. As a starting point, the Carpentries offer many workshops both remotely and in person around the world. They also offer workshops in R and Python. All curriculum is online, so it’s possible to use this as a self-taught course too.\n\nIntro Python\n\nDuke STA-663 - Colin Rundel. Lecture slides & recordings, code & notebooks. Features Jupyter, git, numpy, scipy, pandas, scikit-learn…\nIntro to Geospatial Raster and Vector Data with Python - Carpentries. Follow-along tutorials & code. Features NEON data, intro to rasters & geostats rioxarray, geopandas…\nIntro to Earth and Environmental Data Science- Ryan Abernathy. Intro to Python, JupyterLab, Unix, Git, some packages & workflows\n\nIntro R\n\nIntro to Open Data Science with R - Lowndes & Horst. Follow-along tutorials & code. Features workflows with RMarkdown, tidyverse, RStudio, GitHub…\nWhat they forgot to teach you about R - Bryan & Hester. Reinforcing lessons for moderately experienced R users\nR for Data Science - Wickham & Grolemund. - All things tidyverse, including dates, plots, modeling, programming, RMarkdown\n\nOnline learning community/book club: rfordatasci.com\n\n\nScientific Python Ecosystem, Earth science and Cloud Computing together:\n\nProject Pythia Foundations Book\nJupyter meets Earth\nThe Environmental Data Science Book\nCU EarthLab’s Earth Data Science\nPangeo\n\nPython environments with Conda useful for scientific Python: (recommended by Luis Lopez):\n\nReproducible and upgradable Conda environments with conda-lock\nManaging virtual environments with pyenv\nUnderstanding and Improving Conda’s performance\nThe definitive guide to Python virtual environments with conda\nMaking conda fast again"
  },
  {
    "objectID": "our-cookbook.html#cloud-optimized-data-formats",
    "href": "our-cookbook.html#cloud-optimized-data-formats",
    "title": "Our Cookbook",
    "section": "Cloud Optimized Data Formats",
    "text": "Cloud Optimized Data Formats\nSome nice info here from Pangeo about Cloud Optimized Data Formats.\n\nCloud-Performant NetCDF4/HDF5 Reading with the Zarr Library"
  },
  {
    "objectID": "our-cookbook.html#s3-buckets-etc",
    "href": "our-cookbook.html#s3-buckets-etc",
    "title": "Our Cookbook",
    "section": "S3 Buckets, etc",
    "text": "S3 Buckets, etc\n\nNASA AWS Cloud Primer"
  },
  {
    "objectID": "get-started/earthdata-login.html",
    "href": "get-started/earthdata-login.html",
    "title": "EarthData Login",
    "section": "",
    "text": "This content combines several original NASA sources:"
  },
  {
    "objectID": "get-started/earthdata-login.html#background",
    "href": "get-started/earthdata-login.html#background",
    "title": "EarthData Login",
    "section": "Background",
    "text": "Background\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need EarthData Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nTo avoid being prompted for credentials every time you run and also allow clients such as curl to log in, you can create and/or add the following to a “netrc” file (pronounced “Net RC”). On a Mac, this is a file called .netrc, and on Windows it is _netrc. (There are no extensions on either file).\nBelow are ways to create a “netrc” file in your home directory."
  },
  {
    "objectID": "get-started/earthdata-login.html#r-for-windows-or-macos",
    "href": "get-started/earthdata-login.html#r-for-windows-or-macos",
    "title": "EarthData Login",
    "section": "R for Windows or macOS",
    "text": "R for Windows or macOS\nCreate a “netrc” file by running the following code in your R console (or after saving to an R script).\n#| eval: false\n\n# Required packages for this script\npackages = c('sys', 'getPass')\n\n# Identify missing (not installed) packages\nnew.packages = packages[!(packages %in% installed.packages()[,\"Package\"])]\n\n# Install missing packages\nif(length(new.packages)) install.packages(new.packages, repos='http://cran.rstudio.com/')\n\n# Load packages into R\nlibrary(sys)\nlibrary(getPass)\n\n# Determine OS and associated netrc file \nnetrc_type <- if(.Platform$OS.type == \"windows\") \"_netrc\" else \".netrc\"    # Windows OS uses _netrc file\n\n# Specify path to user profile \nup <- file.path(Sys.getenv(\"USERPROFILE\"))                            # Retrieve user directory (for netrc file)\n\n# Below, HOME and Userprofile directories are set.  \n\nif (up == \"\") {\n    up <- Sys.getenv(\"HOME\") \n    Sys.setenv(\"userprofile\" = up)\n    if (up == \"\") {\n        cat('USERPROFILE/HOME directories need to be set up. Please type sys.setenv(\"HOME\" = \"YOURDIRECTORY\") or  sys.setenv(\"USERPROFILE\" = \"YOURDIRECTORY\") in your console and type your USERPROFILE/HOME direcory instead of \"YOURDIRECTORY\". Next, run the code chunk again.')\n    }\n} else {Sys.setenv(\"HOME\" = up)}        \n\nnetrc_path <- file.path(up, netrc_type, fsep = .Platform$file.sep)    # Path to netrc file\n\n# Create a netrc file if one does not exist already\nif (file.exists(netrc_path) == false || grepl(\"urs.earthdata.nasa.gov\", readLines(netrc_path)) == false) {\n    netrc_conn <- file(netrc_path)\n    \n    # User will be prompted for NASA Earthdata Login Username and Password below\n    writeLines(c(\"machine urs.earthdata.nasa.gov\",\n                 sprintf(\"login %s\", getPass(msg = \"Enter NASA Earthdata Login Username \\n (An account can be Created at urs.earthdata.nasa.gov):\")),\n                 sprintf(\"password %s\", getPass(msg = \"Enter NASA Earthdata Login Password:\"))), netrc_conn)\n    close(netrc_conn)\n}"
  },
  {
    "objectID": "get-started/earthdata-login.html#python-for-windows-or-macos",
    "href": "get-started/earthdata-login.html#python-for-windows-or-macos",
    "title": "EarthData Login",
    "section": "Python for Windows or macOS",
    "text": "Python for Windows or macOS\nCreate a “netrc” file by running the following code in your python console (or after saving to an .py script).\nLP DAAC Approach:\n#| eval: false\n\n# Load necessary packages into Python\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom getpass import getpass\nimport os\n\n# -----------------------------------AUTHENTICATION CONFIGURATION-------------------------------- #\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL to call for authentication\nprompts = ['Enter NASA Earthdata Login Username \\n(or create an account at urs.earthdata.nasa.gov): ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(\"~/.netrc\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}.netrc | chmod og-rw {0}.netrc | echo machine {1} >> {0}.netrc'.format(homeDir + os.sep, urs), shell=True)\n    Popen('echo login {} >> {}.netrc'.format(getpass(prompt=prompts[0]), homeDir + os.sep), shell=True)\n    Popen('echo password {} >> {}.netrc'.format(getpass(prompt=prompts[1]), homeDir + os.sep), shell=True)\n\n# Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} >> {0}.netrc'.format(homeDir + os.sep, urs), shell=True)\n    Popen('echo login {} >> {}.netrc'.format(getpass(prompt=prompts[0]), homeDir + os.sep), shell=True)\n    Popen('echo password {} >> {}.netrc'.format(getpass(prompt=prompts[1]), homeDir + os.sep), shell=True)\nPO.DAAC Approach:\nJulie note to Catalina/Jack: I wasn't sure if this would be best here or in the search-by-shapefile.qmd: \n\nThe setup_earthdata_login_auth function will allow Python scripts to log into any Earthdata Login application programmatically. To avoid being prompted for credentials every time you run and also allow clients such as curl to log in, you can add the following to a .netrc (_netrc on Windows) file in your home directory:\n\nmachine urs.earthdata.nasa.gov\n    login <your username>\n    password <your password>\nMake sure that this file is only readable by the current user or you will receive an error stating \"netrc access too permissive.\"\n\n$ chmod 0600 ~/.netrc\n#| eval: false\nfrom netrc import netrc\nfrom platform import system\nfrom getpass import getpass\nfrom http.cookiejar import CookieJar\nfrom os.path import join, expanduser\n\nTOKEN_DATA = (\"<token>\"\n              \"<username>%s</username>\"\n              \"<password>%s</password>\"\n              \"<client_id>PODAAC CMR Client</client_id>\"\n              \"<user_ip_address>%s</user_ip_address>\"\n              \"</token>\")\n\n\ndef setup_cmr_token_auth(endpoint: str='cmr.earthdata.nasa.gov'):\n    ip = requests.get(\"https://ipinfo.io/ip\").text.strip()\n    return requests.post(\n        url=\"https://%s/legacy-services/rest/tokens\" % endpoint,\n        data=TOKEN_DATA % (input(\"Username: \"), getpass(\"Password: \"), ip),\n        headers={'Content-Type': 'application/xml', 'Accept': 'application/json'}\n    ).json()['token']['id']\n\n\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\n\n# Get your authentication token for searching restricted records in the CMR:\n_token = setup_cmr_token_auth(endpoint=\"cmr.earthdata.nasa.gov\")\n\n# Start authenticated session with URS to allow restricted data downloads:\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")"
  },
  {
    "objectID": "get-started/earthdata-login.html#common-questions",
    "href": "get-started/earthdata-login.html#common-questions",
    "title": "EarthData Login",
    "section": "Common questions",
    "text": "Common questions\n\nHow do I know if I already have a netrc file?\nYour netrc file will likely be in your root directory. It is a hidden file that you will not be able to see from your Finder (Mac) or Windows Explorer (Windows), so you’ll have to do this from the Command Line. Navigate to your root directory and list all:\n\nOn a Mac:\ncd ~\nls -la\nIf you see a .netrc file, view what’s inside (perhaps with nano), and if you’d like to delete the current version to start afresh, type rm .netrc."
  },
  {
    "objectID": "get-started/authentication.html",
    "href": "get-started/authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "There are multiple ways to authenticate. Options are:…\nThe following are example notebooks (.ipynb)…"
  },
  {
    "objectID": "get-started/lpdaac-netrc.html",
    "href": "get-started/lpdaac-netrc.html",
    "title": "LP DAAC Authentication Example",
    "section": "",
    "text": "TODO"
  },
  {
    "objectID": "get-started/lpdaac-netrc.html#this-is-otherwise-just-testing",
    "href": "get-started/lpdaac-netrc.html#this-is-otherwise-just-testing",
    "title": "LP DAAC Authentication Example",
    "section": "This is otherwise just testing ",
    "text": "This is otherwise just testing \n\nImport the required packages and set the input/working directory to run this Jupyter Notebook locally.\n\nimport requests as r\nfrom skimage import io\nimport matplotlib.pyplot as plt\n\n\nprint(1+1)\nprint(\"woo NASA data!\")\n\n2\nwoo NASA data!"
  },
  {
    "objectID": "get-started/podaac-ecco-netrc.html",
    "href": "get-started/podaac-ecco-netrc.html",
    "title": "PO DAAC Authentication Example",
    "section": "",
    "text": "Note this is currently copied from https://github.com/podaac/ECCO/blob/main/Data_Access/local_bulk_download_and_open_in_py3.ipynb as a starting point and will be refined\n\n\n\n\nConfigure your .netrc file\nGood idea to back up your existing netrc file, if you have one. And while youre at it check for these entries because they might exist in there already:\n\n%cp ~/.netrc ~/bak.netrc\n\n%cat ~/.netrc | grep '.earthdata.nasa.gov' | cut -f-5 -d\" \"\n\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\n\n\n\nAdd entries to your netrc for these two earthdata.nasa.gov sub domains, at a minimum:\nmachine urs.earthdata.nasa.gov login jmcnelis password ***\nmachine opendap.earthdata.nasa.gov login jmcnelis password ***\nand replace jmcnelis and *** with your Earthdata Login username and password, respectively…\n\nReplace jmcnelis and *** with your Earthdata username and password, and then run the cell to append these two lines to your netrc file, if one exists. Otherwise write them to a new one. (all set up by -a)\n\n%%file -a ~/.netrc\nmachine urs.earthdata.nasa.gov login jmcnelis password ***\nmachine opendap.earthdata.nasa.gov login jmcnelis password ***\n\nAppending to /Users/lowndes/.netrc\n\n\nDump the netrc again sans passwords to confirm that it worked:\n\n!cat ~/.netrc | grep '.earthdata.nasa.gov' | cut -f-5 -d\" \"\n\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\nmachine urs.earthdata.nasa.gov login jmcnelis password\nmachine opendap.earthdata.nasa.gov login jmcnelis password\n\n\nFinally, you need to make sure to limit access to the netrc file because it stores your plain text password. Simple on MacOS and Linux:\n\n!chmod 0600 ~/.netrc"
  },
  {
    "objectID": "get-started/api-primer.html",
    "href": "get-started/api-primer.html",
    "title": "API Primer",
    "section": "",
    "text": "The code-based chapters of this Cookbook utilize several NASA EOSDIS-supported Application Programming Interfaces, or APIs, to discover and access data programmatically.\n\n\n\n\n\n\nNote\n\n\n\nWhat is an API? You can think of an API as a middle man between an application or end-use and a data provider. In most cases the data provider is either the NASA Common Metadata Repository (CMR), which houses data information, or one or more of the NASA DAACs as the data distributors. These APIs are generally structured as a root URL, plus individual key-value-pairs separated by ‘&’.\n\n\nProgrammatic API access is beneficial for those who want to incorporate data access into a visualization and analysis workflow. This method is also reproducible and documented to ensure data provenance.\nThe table below describes each of the common NASA Earthdata APIs along with their functions and use case examples. Documentation for each API is linked in each row.\n\n\n\nAPI\nKey Functions\nUse Case Example\n\n\n\n\nCommon Metadata Repository (CMR)\nSearch for datasets and data files using several filtering options, as well as associated tools, services, and data variables.\nFor a given data set, I want to retrieve file information, including data access URLs, for all data occurring over my region and time period of interest.\n\n\nCMR-STAC:\n\nCMR STAC Catalog Documentation\nCMR STAC Catalog Endpoint\nCMR STAC Catalog Endpoint for Cloud-hosted Holdings Only\n\nSearch data information housed by the CMR as assets through the SpatioTemporal Asset Catalog specification (STAC), which provides a common language for interpreting geospatial information in order to standardize indexing and discovering data.\nIn addition to the CMR use case example above, I also want to use Python to directly load a dataset STAC asset into memory in order to view imagery and plot the data.\n\n\nGlobal Imagery Browse Service (GIBS)\nAccess full-resolution browse imagery using standards-based web services and formats.\nI want to access and browse near real-time satellite imagery in a programming language or GIS application.\n\n\nHarmony\nAccess and Customize data through subsetting, reformatting, and reprojection options.\nI want to receive subsetted data by time, area, and variables of interest in order to reduce data volume, as well as reformat to a cloud-optimized format to improve analysis performance in the cloud.\n\n\nOPeNDAP\nAccess and Customize data through subsetting and reformatting options.\nI want to access data files on-the-fly, subsetted by area or time dimensions."
  },
  {
    "objectID": "tutorials/04_On-Prem_Cloud.html",
    "href": "tutorials/04_On-Prem_Cloud.html",
    "title": "EarthData Cloud Cookbook",
    "section": "",
    "text": "This tutorial will combine several workflow steps and components from the previous days, demonstrating the process of using the geolocation of data available outside of the Earthdata Cloud to then access coincident variables of cloud-accessible data. This may be a common use case as NASA Earthdata continues to migrate to the cloud, producing a “hybrid” data archive across Amazon Web Services (AWS) and original on-premise data storage systems. Additionally, you may also want to combine field measurements with remote sensing data available on the Earthdata Cloud.\nThis specific example explores the pairing of the ICESat-2 ATL07 Sea Ice Height data product, currently (as of November 2021) available publicly via direct download at the NSIDC DAAC, along with Sea Surface Temperature (SST) from the GHRSST MODIS L2 dataset (MODIS_A-JPL-L2P-v2019.0) available from PO.DAAC on the Earthdata Cloud.\nThe use case we’re looking at today centers over an area north of Greenland for a single day in June, where a melt pond was observed using the NASA OpenAltimetry application. Melt ponds are an important feature of Arctic sea ice dynamics, leading to an decrease in sea ice albedo and other changes in heat balance. Many NASA Earthdata datasets produce variables including sea ice albedo, sea surface temperature, air temperature, and sea ice height, which can be used to better understand these dynamics.\n\n\n\n\n\nAWS instance running in us-west 2\nEarthdata Login\n.netrc file\n\n\n\n\n\n\nSearch for data programmatically using the Common Metadata Repository (CMR), determining granule (file) coverage across two datasets over an area of interest.\nDownload data from an on-premise storage system to our cloud environment.\nRead in 1-dimensional trajectory data (ICESat-2 ATL07) into xarray and perform attribute conversions.\nSelect and read in sea surface temperature (SST) data (MODIS_A-JPL-L2P-v2019.0) from the Earthdata Cloud into xarray.\nExtract, resample, and plot coincident SST data based on ICESat-2 geolocation.\n\n\n\n\n\n\nimport os\nfrom pathlib import Path\nfrom pprint import pprint\n\n# Access via download\nimport requests\n\n# Access AWS S3\nimport s3fs\n\n# Read and work with datasets\nimport xarray as xr\nimport numpy as np\nimport h5py\n\n# For plotting\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nfrom shapely.geometry import box\n\n# For resampling\nimport pyresample\n\n\n\n\nWe are going to focus on getting data for an area north of Greenland for a single day in June.\nThese bounding_box and temporal variables will be used for data search, subset, and access below.\nThe same search and access steps for both datasets can be performed via Earthdata Search using the same spatial and temporal filtering options. See the Earthdata Search tutorial for more information on how to use Earthdata Search to discover and access data from the Earthdata Cloud.\n\n# Bounding Box spatial parameter in decimal degree 'W,S,E,N' format.\nbounding_box = '-62.8,81.7,-56.4,83'\n\n# Each date in yyyy-MM-ddTHH:mm:ssZ format; date range in start,end format\ntemporal = '2019-06-22T00:00:00Z,2019-06-22T23:59:59Z'\n\nSee the Data Discovery with CMR tutorial for more details on how to navigate the NASA Common Metadata Repository (CMR) Application Programming Interface, or API. For some background, the CMR catalogs all data for NASA’s Earth Observing System Data and Information System (EOSDIS). The CMR API allows applications (software, services, etc) to send information to each other. A helpful analogy is a waiter in a restaurant. The waiter takes your drink or food order that you select from the menu, often translated into short-hand, to the bar or kitchen, and then returns (hopefully) with what you ordered when it is ready.\nThe CMR API accepts search terms such as collection name, keywords, datetime range, and location, queries the CMR database and returns the results.\nFor this tutorial, we have already identified the unique identifier, or concept_id for each dataset:\n\nmodis_concept_id = 'C1940473819-POCLOUD'\nicesat2_concept_id = 'C2003771980-NSIDC_ECS'\n\nThis Earthdata Search Project also provides the same data access links that we will identify in the following steps for each dataset (note that you will need an Earthdata Login account to access this project).\n\n\n\nPerform a granule search over our time and area of interest. How many granules are returned?\n\ngranule_url = 'https://cmr.earthdata.nasa.gov/search/granules'\n\n\nresponse = requests.get(granule_url,\n                       params={\n                           'concept_id': icesat2_concept_id,\n                           'temporal': temporal,\n                           'bounding_box': bounding_box,\n                           'page_size': 200,\n                       },\n                       headers={\n                           'Accept': 'application/json'\n                       }\n                      )\nprint(response.headers['CMR-Hits'])\n\n2\n\n\nPrint the file names, size, and links:\n\ngranules = response.json()['feed']['entry']\nfor granule in granules:\n    print(f'{granule[\"producer_granule_id\"]} {granule[\"granule_size\"]} {granule[\"links\"][0][\"href\"]}')\n\nATL07-01_20190622055317_12980301_004_01.h5 237.0905504227 https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL07.004/2019.06.22/ATL07-01_20190622055317_12980301_004_01.h5\nATL07-01_20190622200154_13070301_004_01.h5 230.9151573181 https://n5eil01u.ecs.nsidc.org/DP9/ATLAS/ATL07.004/2019.06.22/ATL07-01_20190622200154_13070301_004_01.h5\n\n\n\n\nAlthough several services are supported for ICESat-2 data, we are demonstrating direct access through the “on-prem” file system at NSIDC for simplicity.\nSome of these services include: - icepyx - From the icepyx documentation: “icepyx is both a software library and a community composed of ICESat-2 data users, developers, and the scientific community. We are working together to develop a shared library of resources - including existing resources, new code, tutorials, and use-cases/examples - that simplify the process of querying, obtaining, analyzing, and manipulating ICESat-2 datasets to enable scientific discovery.” - NSIDC DAAC Data Access and Service API - The API provided by the NSIDC DAAC allows you to access data programmatically using specific temporal and spatial filters. The same subsetting, reformatting, and reprojection services available on select data sets through NASA Earthdata Search can also be applied using this API. - IceFlow - The IceFlow python library simplifies accessing and combining data from several of NASA’s cryospheric altimetry missions, including ICESat/GLAS, Operation IceBridge, and ICESat-2. In particular, IceFlow harmonizes the various file formats and georeferencing parameters across several of the missions’ data sets, allowing you to analyze data across the multi-decadal time series.\nWe’ve found 2 granules. We’ll download the first one and write it to a file with the same name as the producer_granule_id.\nWe need the url for the granule as well. This is href links we printed out above.\n\nicesat_id = granules[0]['producer_granule_id']\nicesat_url = granules[0]['links'][0]['href']\n\nTo retrieve the granule data, we use the requests.get() method, which will utilize the .netrc file on the backend to authenticate the request against Earthdata Login.\n\nr = requests.get(icesat_url)\n\nThe response returned by requests has the same structure as all the other responses: a header and contents. The header information has information about the response, including the size of the data we downloaded in bytes.\n\nfor k, v in r.headers.items():\n    print(f'{k}: {v}')\n\nDate: Sun, 12 Dec 2021 01:52:31 GMT\nServer: Apache\nVary: User-Agent\nContent-Disposition: attachment\nContent-Length: 248607461\nKeep-Alive: timeout=15, max=100\nConnection: Keep-Alive\n\n\nThe contents needs to be saved to a file. To keep the directory clean, we will create a downloads directory to store the file. We can use a shell command to do this or use the makedirs method from the os package.\n\nos.makedirs(\"downloads\", exist_ok=True)\n\nYou should see a downloads directory in the file browser.\nTo write the data to a file, we use open to open a file. We need to specify that the file is open for writing by using the write-mode w. We also need to specify that we want to write bytes by setting the binary-mode b. This is important because the response contents are bytes. The default mode for open is text-mode. So make sure you use b.\nWe’ll use the with statement context-manager to open the file, write the contents of the response, and then close the file. Once the data in r.content is written sucessfully to the file, or if there is an error, the file is closed by the context-manager.\nWe also need to prepend the downloads path to the filename. We do this using Path from the pathlib package in the standard library.\n\noutfile = Path('downloads', icesat_id)\n\n\nif not outfile.exists():\n    with open(outfile, 'wb') as f:\n        f.write(r.content)\n\nATL07-01_20190622055317_12980301_004_01.h5 is an HDF5 file. xarray can open this but you need to tell it which group to read the data from. In this case we read the sea ice segment height data for ground-track 1 left-beam. You can explore the variable hierarchy in Earthdata Search, by selecting the Customize option under Download Data.\nThis code block performs the following operations: - Extracts the height_segment_height variable from the heights group, along with the dimension variables contained in the higher level sea_ice_segments group, - Convert attributes from bytestrings to strings, - Drops the HDF attribute DIMENSION_LIST, - Sets _FillValue to NaN\n\nvariable_names = [\n    '/gt1l/sea_ice_segments/latitude',\n    '/gt1l/sea_ice_segments/longitude',\n    '/gt1l/sea_ice_segments/delta_time',\n    '/gt1l/sea_ice_segments/heights/height_segment_height'\n    ]\nwith h5py.File(outfile, 'r') as h5:\n    data_vars = {}\n    for varname in variable_names:\n        var = h5[varname]\n        name = varname.split('/')[-1]\n        # Convert attributes\n        attrs = {}\n        for k, v in var.attrs.items():\n            if k != 'DIMENSION_LIST':\n                if isinstance(v, bytes):\n                    attrs[k] = v.decode('utf-8')\n                else:\n                    attrs[k] = v\n        data = var[:]\n        if '_FillValue' in attrs:\n            data = np.where(data < attrs['_FillValue'], data, np.nan)\n        data_vars[name] = (['segment'], data, attrs)\n    is2_ds = xr.Dataset(data_vars)\n    \nis2_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                (segment: 235584)\nDimensions without coordinates: segment\nData variables:\n    latitude               (segment) float64 82.38 82.38 82.38 ... 72.61 72.61\n    longitude              (segment) float64 -55.11 -55.11 ... 145.1 145.1\n    delta_time             (segment) float64 4.642e+07 4.642e+07 ... 4.642e+07\n    height_segment_height  (segment) float32 nan nan nan ... -0.4335 -0.4463xarray.DatasetDimensions:segment: 235584Coordinates: (0)Data variables: (4)latitude(segment)float6482.38 82.38 82.38 ... 72.61 72.61contentType :referenceInformationcoordinates :delta_time longitudedescription :Latitude, WGS84, North=+, Lat of segment centerlong_name :Latitudesource :ATBD, section 4.4standard_name :latitudeunits :degrees_northvalid_max :90.0valid_min :-90.0array([82.38431982, 82.38431982, 82.38431982, ..., 72.60984638,\n       72.60977493, 72.60970985])longitude(segment)float64-55.11 -55.11 ... 145.1 145.1contentType :referenceInformationcoordinates :delta_time latitudedescription :Longitude, WGS84, East=+,Lon of segment centerlong_name :Longitudesource :ATBD, section 4.4standard_name :longitudeunits :degrees_eastvalid_max :180.0valid_min :-180.0array([-55.10896068, -55.10896068, -55.10896068, ..., 145.05396164,\n       145.05392851, 145.05389832])delta_time(segment)float644.642e+07 4.642e+07 ... 4.642e+07CLASS :DIMENSION_SCALENAME :gt1l/sea_ice_segments/delta_timeREFERENCE_LIST :[(<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)]contentType :physicalMeasurementcoordinates :latitude longitudedescription :Number of GPS seconds since the ATLAS SDP epoch. The ATLAS Standard Data Products (SDP) epoch offset is defined within /ancillary_data/atlas_sdp_gps_epoch as the number of GPS seconds between the GPS epoch (1980-01-06T00:00:00.000000Z UTC) and the ATLAS SDP epoch. By adding the offset contained within atlas_sdp_gps_epoch to delta time parameters, the time in gps_seconds relative to the GPS epoch can be computed.long_name :Elapsed GPS secondssource :telemetrystandard_name :timeunits :seconds since 2018-01-01array([46419293.64266939, 46419293.64266939, 46419293.64266939, ...,\n       46419681.87646231, 46419681.87759533, 46419681.87862704])height_segment_height(segment)float32nan nan nan ... -0.4335 -0.4463_FillValue :3.4028235e+38contentType :referenceInformationcoordinates :../delta_time ../latitude ../longitudedescription :Mean height from along-track segment fit detremined by the sea ice algorithm. The sea ice height is relative to the tide-free MSS.long_name :height of segment surfacesource :ATBD, section 4.2.2.4units :metersarray([        nan,         nan,         nan, ..., -0.46550068,\n       -0.43347716, -0.4462675 ], dtype=float32)Attributes: (0)\n\n\n\nis2_ds.height_segment_height.plot() ;\n\n\n\n\n\n\n\n\n\nresponse = requests.get(granule_url, \n                        params={\n                            'concept_id': modis_concept_id,\n                            'temporal': temporal,\n                            'bounding_box': bounding_box,\n                            'page_size': 200,\n                            },\n                        headers={\n                            'Accept': 'application/json'\n                            }\n                       )\nprint(response.headers['CMR-Hits'])\n\n14\n\n\n\ngranules = response.json()['feed']['entry']\nfor granule in granules:\n    print(f'{granule[\"title\"]} {granule[\"granule_size\"]} {granule[\"links\"][0][\"href\"]}')\n\n20190622000501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 20.71552562713623 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622000501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622014501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 9.34600830078125E-5 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622014501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622032501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 21.307741165161133 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622032501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622050001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 9.34600830078125E-5 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622050001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622050501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 20.065649032592773 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622050501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622064001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 9.34600830078125E-5 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622064001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622064501-JPL-L2P_GHRSST-SSTskin-MODIS_A-N-v02.0-fv01.0 18.602201461791992 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622064501-JPL-L2P_GHRSST-SSTskin-MODIS_A-N-v02.0-fv01.0.nc\n20190622064501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 18.665077209472656 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622064501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622082001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 19.782299995422363 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622082001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622100001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 19.13440227508545 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622100001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622113501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 20.3239164352417 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622113501-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622114001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 9.34600830078125E-5 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622114001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622163001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 19.257243156433105 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622163001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n20190622181001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0 19.93498420715332 s3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622181001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc\n\n\n\n\n\nOur CMR granule search returned 14 files for our time and area of interest. However, not all granules will be suitable for analysis.\nI’ve identified the image with granule id G1956158784-POCLOUD as a good candidate, this is the 9th granule. In this image, our area of interest is close to nadir. This means that the instantaneous field of view over the area of interest cover a smaller area than at the edge of the image.\nWe are looking for the link for direct download access via s3. This is a url but with a prefix s3://. This happens to be the first href link in the metadata.\nFor a single granule we can cut and paste the s3 link. If we have several granules, the s3 links can be extracted with some simple code.\n\ngranule = granules[9]\n\nfor link in granule['links']:\n    if link['href'].startswith('s3://'):\n        s3_link = link['href']\n        \ns3_link\n\n's3://podaac-ops-cumulus-protected/MODIS_A-JPL-L2P-v2019.0/20190622100001-JPL-L2P_GHRSST-SSTskin-MODIS_A-D-v02.0-fv01.0.nc'\n\n\n\n\nAs with the previous S3 download tutorials we need credentials to access data from s3: access keys and tokens.\n\ns3_credentials = requests.get('https://archive.podaac.earthdata.nasa.gov/s3credentials').json()\n\nEssentially, what we are doing in this step is to “mount” the s3 bucket as a file system. This allows us to treat the S3 bucket in a similar way to a local file system.\n\ns3_fs = s3fs.S3FileSystem(\n    key=s3_credentials[\"accessKeyId\"],\n    secret=s3_credentials[\"secretAccessKey\"],\n    token=s3_credentials[\"sessionToken\"],\n)\n\n\n\n\nNow we have the S3FileSystem set up, we can access the granule. xarray cannot open a S3File directly, so we use the open method for the S3FileSystem to open the granule using the endpoint url we extracted from the metadata. We also have to set the mode='rb'. This opens the granule in read-only mode and in byte-mode. Byte-mode is important. By default, open opens a file as text - in this case it would just be a string of characters - and xarray doesn’t know what to do with that.\nWe then pass the S3File object f to xarray.open_dataset. For this dataset, we also have to set decode_cf=False. This switch tells xarray not to use information contained in variable attributes to generate human readable coordinate variables. Normally, this should work for netcdf files but for this particular cloud-hosted dataset, variable attribute data is not in the form expected by xarray. We’ll fix this.\n\nf = s3_fs.open(s3_link, mode='rb')\nmodis_ds = xr.open_dataset(f, decode_cf=False)\n\nIf you click on the Show/Hide Attributes icon (the first document-like icon to the right of coordinate variable metadata) you can see that attributes are one-element arrays containing bytestrings.\n\nmodis_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (nj: 2030, ni: 1354, time: 1)\nCoordinates:\n  * time                     (time) int32 1214042401\nDimensions without coordinates: nj, ni\nData variables:\n    lat                      (nj, ni) float32 ...\n    lon                      (nj, ni) float32 ...\n    sea_surface_temperature  (time, nj, ni) int16 ...\n    sst_dtime                (time, nj, ni) int16 ...\n    quality_level            (time, nj, ni) int8 ...\n    sses_bias                (time, nj, ni) int8 ...\n    sses_standard_deviation  (time, nj, ni) int8 ...\n    l2p_flags                (time, nj, ni) int16 ...\n    chlorophyll_a            (time, nj, ni) float32 ...\n    K_490                    (time, nj, ni) int16 ...\n    wind_speed               (time, nj, ni) int8 ...\n    dt_analysis              (time, nj, ni) int8 ...\nAttributes: (12/49)\n    Conventions:                [b'CF-1.7, ACDD-1.3']\n    title:                      [b'MODIS Aqua L2P SST']\n    summary:                    [b'Sea surface temperature retrievals produce...\n    references:                 [b'GHRSST Data Processing Specification v2r5']\n    institution:                [b'NASA/JPL/OBPG/RSMAS']\n    history:                    [b'MODIS L2P created at JPL PO.DAAC']\n    ...                         ...\n    publisher_email:            [b'ghrsst-po@nceo.ac.uk']\n    processing_level:           [b'L2P']\n    cdm_data_type:              [b'swath']\n    startDirection:             [b'Ascending']\n    endDirection:               [b'Descending']\n    day_night_flag:             [b'Day']xarray.DatasetDimensions:nj: 2030ni: 1354time: 1Coordinates: (1)time(time)int321214042401long_name :[b'reference time of sst file']standard_name :[b'time']units :[b'seconds since 1981-01-01 00:00:00']comment :[b'time of first sensor observation']coverage_content_type :[b'coordinate']array([1214042401], dtype=int32)Data variables: (12)lat(nj, ni)float32...long_name :[b'latitude']standard_name :[b'latitude']units :[b'degrees_north']_FillValue :[-999.]valid_min :[-90.]valid_max :[90.]comment :[b'geographical coordinates, WGS84 projection']coverage_content_type :[b'coordinate'][2748620 values with dtype=float32]lon(nj, ni)float32...long_name :[b'longitude']standard_name :[b'longitude']units :[b'degrees_east']_FillValue :[-999.]valid_min :[-180.]valid_max :[180.]comment :[b'geographical coordinates, WGS84 projection']coverage_content_type :[b'coordinate'][2748620 values with dtype=float32]sea_surface_temperature(time, nj, ni)int16...long_name :[b'sea surface temperature']standard_name :[b'sea_surface_skin_temperature']units :[b'kelvin']_FillValue :[-32767]valid_min :[-1000]valid_max :[10000]comment :[b'sea surface temperature from thermal IR (11 um) channels']scale_factor :[0.005]add_offset :[273.15]source :[b'NASA and University of Miami']coordinates :[b'lon lat']coverage_content_type :[b'physicalMeasurement'][2748620 values with dtype=int16]sst_dtime(time, nj, ni)int16...long_name :[b'time difference from reference time']units :[b'seconds']_FillValue :[-32768]valid_min :[-32767]valid_max :[32767]comment :[b'time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981']coordinates :[b'lon lat']coverage_content_type :[b'referenceInformation'][2748620 values with dtype=int16]quality_level(time, nj, ni)int8...long_name :[b'quality level of SST pixel']_FillValue :[-128]valid_min :[0]valid_max :[5]comment :[b'thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value']coordinates :[b'lon lat']flag_values :[0 1 2 3 4 5]flag_meanings :[b'no_data bad_data worst_quality low_quality acceptable_quality best_quality']coverage_content_type :[b'qualityInformation'][2748620 values with dtype=int8]sses_bias(time, nj, ni)int8...long_name :[b'SSES bias error based on proximity confidence flags']units :[b'kelvin']_FillValue :[-128]valid_min :[-127]valid_max :[127]comment :[b'thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value']scale_factor :[0.15748031]add_offset :[0.]coordinates :[b'lon lat']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=int8]sses_standard_deviation(time, nj, ni)int8...long_name :[b'SSES standard deviation error based on proximity confidence flags']units :[b'kelvin']_FillValue :[-128]valid_min :[-127]valid_max :[127]comment :[b'thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value']scale_factor :[0.07874016]add_offset :[10.]coordinates :[b'lon lat']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=int8]l2p_flags(time, nj, ni)int16...long_name :[b'L2P flags']valid_min :[0]valid_max :[16]comment :[b'These flags can be used to further filter data variables']coordinates :[b'lon lat']flag_meanings :[b'microwave land ice lake river']flag_masks :[ 1  2  4  8 16]coverage_content_type :[b'qualityInformation'][2748620 values with dtype=int16]chlorophyll_a(time, nj, ni)float32...long_name :[b'Chlorophyll Concentration, OC3 Algorithm']units :[b'mg m^-3']_FillValue :[-32767.]valid_min :[0.001]valid_max :[100.]comment :[b'non L2P core field']coordinates :[b'lon lat']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=float32]K_490(time, nj, ni)int16...long_name :[b'Diffuse attenuation coefficient at 490 nm (OBPG)']units :[b'm^-1']_FillValue :[-32767]valid_min :[50]valid_max :[30000]comment :[b'non L2P core field']scale_factor :[0.0002]add_offset :[0.]coordinates :[b'lon lat']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=int16]wind_speed(time, nj, ni)int8...long_name :[b'10m wind speed']standard_name :[b'wind_speed']units :[b'm s-1']_FillValue :[-128]valid_min :[-127]valid_max :[127]comment :[b'Wind at 10 meters above the sea surface']scale_factor :[0.2]add_offset :[25.]source :[b'TBD.  Placeholder.  Currently empty']coordinates :[b'lon lat']grid_mapping :[b'TBD']time_offset :[2.]height :[b'10 m']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=int8]dt_analysis(time, nj, ni)int8...long_name :[b'deviation from SST reference climatology']units :[b'kelvin']_FillValue :[-128]valid_min :[-127]valid_max :[127]comment :[b'TBD']scale_factor :[0.1]add_offset :[0.]source :[b'TBD. Placeholder.  Currently empty']coordinates :[b'lon lat']coverage_content_type :[b'auxiliaryInformation'][2748620 values with dtype=int8]Attributes: (49)Conventions :[b'CF-1.7, ACDD-1.3']title :[b'MODIS Aqua L2P SST']summary :[b'Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAAC']references :[b'GHRSST Data Processing Specification v2r5']institution :[b'NASA/JPL/OBPG/RSMAS']history :[b'MODIS L2P created at JPL PO.DAAC']comment :[b'L2P Core without DT analysis or other ancillary fields; Day, Start Node:Ascending, End Node:Descending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Refined']license :[b'GHRSST and PO.DAAC protocol allow data use as free and open.']id :[b'MODIS_A-JPL-L2P-v2019.0']naming_authority :[b'org.ghrsst']product_version :[b'2019.0']uuid :[b'f6e1f61d-c4a4-4c17-8354-0c15e12d688b']gds_version_id :[b'2.0']netcdf_version_id :[b'4.1']date_created :[b'20200221T085224Z']file_quality_level :[3]spatial_resolution :[b'1km']start_time :[b'20190622T100001Z']time_coverage_start :[b'20190622T100001Z']stop_time :[b'20190622T100459Z']time_coverage_end :[b'20190622T100459Z']northernmost_latitude :[89.9862]southernmost_latitude :[66.2723]easternmost_longitude :[-45.9467]westernmost_longitude :[152.489]source :[b'MODIS sea surface temperature observations for the OBPG']platform :[b'Aqua']sensor :[b'MODIS']metadata_link :[b'http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_A-JPL-L2P-v2019.0']keywords :[b'Oceans > Ocean Temperature > Sea Surface Temperature']keywords_vocabulary :[b'NASA Global Change Master Directory (GCMD) Science Keywords']standard_name_vocabulary :[b'NetCDF Climate and Forecast (CF) Metadata Convention']geospatial_lat_units :[b'degrees_north']geospatial_lat_resolution :[0.01]geospatial_lon_units :[b'degrees_east']geospatial_lon_resolution :[0.01]acknowledgment :[b'The MODIS L2P sea surface temperature data are sponsored by NASA']creator_name :[b'Ed Armstrong, JPL PO.DAAC']creator_email :[b'edward.m.armstrong@jpl.nasa.gov']creator_url :[b'http://podaac.jpl.nasa.gov']project :[b'Group for High Resolution Sea Surface Temperature']publisher_name :[b'The GHRSST Project Office']publisher_url :[b'http://www.ghrsst.org']publisher_email :[b'ghrsst-po@nceo.ac.uk']processing_level :[b'L2P']cdm_data_type :[b'swath']startDirection :[b'Ascending']endDirection :[b'Descending']day_night_flag :[b'Day']\n\n\nTo fix this, we need to extract array elements as scalars, and convert those scalars from bytestrings to strings. We use the decode method to do this. The bytestrings are encoded as utf-8, which is a unicode character format. This is the default encoding for decode but we’ve included it as an argument to be explicit.\nNot all attributes are bytestrings. Some are floats. Take a look at _FillValue, and valid_min and valid_max. To avoid an error, we use the isinstance function to check if the value of an attributes is type bytes - a bytestring. If it is, then we decode it. If not, we just extract the scalar and do nothing else.\nWe also fix the global attributes.\n\ndef fix_attributes(da):\n    '''Decodes bytestring attributes to strings'''\n    for attr, value in da.attrs.items():\n        if isinstance(value[0], bytes):\n            da.attrs[attr] = value[0].decode('utf-8')\n        else:\n            da.attrs[attr] = value[0]\n    return\n\n# Fix variable attributes\nfor var in modis_ds.variables:\n    da = modis_ds[var]\n    fix_attributes(da)\n            \n# Fix global attributes\nfix_attributes(modis_ds)\n\nWith this done, we can use the xarray function decode_cf to convert the attributes.\n\nmodis_ds = xr.decode_cf(modis_ds)\n\n\nmodis_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (nj: 2030, ni: 1354, time: 1)\nCoordinates:\n    lat                      (nj, ni) float32 ...\n    lon                      (nj, ni) float32 ...\n  * time                     (time) datetime64[ns] 2019-06-22T10:00:01\nDimensions without coordinates: nj, ni\nData variables:\n    sea_surface_temperature  (time, nj, ni) float32 ...\n    sst_dtime                (time, nj, ni) timedelta64[ns] ...\n    quality_level            (time, nj, ni) float32 ...\n    sses_bias                (time, nj, ni) float32 ...\n    sses_standard_deviation  (time, nj, ni) float32 ...\n    l2p_flags                (time, nj, ni) int16 ...\n    chlorophyll_a            (time, nj, ni) float32 ...\n    K_490                    (time, nj, ni) float32 ...\n    wind_speed               (time, nj, ni) float32 ...\n    dt_analysis              (time, nj, ni) float32 ...\nAttributes: (12/49)\n    Conventions:                CF-1.7, ACDD-1.3\n    title:                      MODIS Aqua L2P SST\n    summary:                    Sea surface temperature retrievals produced a...\n    references:                 GHRSST Data Processing Specification v2r5\n    institution:                NASA/JPL/OBPG/RSMAS\n    history:                    MODIS L2P created at JPL PO.DAAC\n    ...                         ...\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L2P\n    cdm_data_type:              swath\n    startDirection:             Ascending\n    endDirection:               Descending\n    day_night_flag:             Dayxarray.DatasetDimensions:nj: 2030ni: 1354time: 1Coordinates: (3)lat(nj, ni)float32...long_name :latitudestandard_name :latitudeunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]lon(nj, ni)float32...long_name :longitudestandard_name :longitudeunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geographical coordinates, WGS84 projectioncoverage_content_type :coordinate[2748620 values with dtype=float32]time(time)datetime64[ns]2019-06-22T10:00:01long_name :reference time of sst filestandard_name :timecomment :time of first sensor observationcoverage_content_type :coordinatearray(['2019-06-22T10:00:01.000000000'], dtype='datetime64[ns]')Data variables: (10)sea_surface_temperature(time, nj, ni)float32...long_name :sea surface temperaturestandard_name :sea_surface_skin_temperatureunits :kelvinvalid_min :-1000valid_max :10000comment :sea surface temperature from thermal IR (11 um) channelssource :NASA and University of Miamicoverage_content_type :physicalMeasurement[2748620 values with dtype=float32]sst_dtime(time, nj, ni)timedelta64[ns]...long_name :time difference from reference timevalid_min :-32767valid_max :32767comment :time plus sst_dtime gives seconds after 00:00:00 UTC January 1, 1981coverage_content_type :referenceInformation[2748620 values with dtype=timedelta64[ns]]quality_level(time, nj, ni)float32...long_name :quality level of SST pixelvalid_min :0valid_max :5comment :thermal IR SST proximity confidence value; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valueflag_values :0flag_meanings :no_data bad_data worst_quality low_quality acceptable_quality best_qualitycoverage_content_type :qualityInformation[2748620 values with dtype=float32]sses_bias(time, nj, ni)float32...long_name :SSES bias error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST bias error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]sses_standard_deviation(time, nj, ni)float32...long_name :SSES standard deviation error based on proximity confidence flagsunits :kelvinvalid_min :-127valid_max :127comment :thermal IR SST standard deviation error; signed byte array: WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported valuecoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]l2p_flags(time, nj, ni)int16...long_name :L2P flagsvalid_min :0valid_max :16comment :These flags can be used to further filter data variablesflag_meanings :microwave land ice lake riverflag_masks :1coverage_content_type :qualityInformation[2748620 values with dtype=int16]chlorophyll_a(time, nj, ni)float32...long_name :Chlorophyll Concentration, OC3 Algorithmunits :mg m^-3valid_min :0.001valid_max :100.0comment :non L2P core fieldcoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]K_490(time, nj, ni)float32...long_name :Diffuse attenuation coefficient at 490 nm (OBPG)units :m^-1valid_min :50valid_max :30000comment :non L2P core fieldcoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]wind_speed(time, nj, ni)float32...long_name :10m wind speedstandard_name :wind_speedunits :m s-1valid_min :-127valid_max :127comment :Wind at 10 meters above the sea surfacesource :TBD.  Placeholder.  Currently emptygrid_mapping :TBDtime_offset :2.0height :10 mcoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]dt_analysis(time, nj, ni)float32...long_name :deviation from SST reference climatologyunits :kelvinvalid_min :-127valid_max :127comment :TBDsource :TBD. Placeholder.  Currently emptycoverage_content_type :auxiliaryInformation[2748620 values with dtype=float32]Attributes: (49)Conventions :CF-1.7, ACDD-1.3title :MODIS Aqua L2P SSTsummary :Sea surface temperature retrievals produced at the NASA OBPG for the MODIS Aqua sensor.  These have been reformatted to GHRSST GDS specifications by the JPL PO.DAACreferences :GHRSST Data Processing Specification v2r5institution :NASA/JPL/OBPG/RSMAShistory :MODIS L2P created at JPL PO.DAACcomment :L2P Core without DT analysis or other ancillary fields; Day, Start Node:Ascending, End Node:Descending; WARNING Some applications are unable to properly handle signed byte values. If values are encountered > 127, please subtract 256 from this reported value; Refinedlicense :GHRSST and PO.DAAC protocol allow data use as free and open.id :MODIS_A-JPL-L2P-v2019.0naming_authority :org.ghrsstproduct_version :2019.0uuid :f6e1f61d-c4a4-4c17-8354-0c15e12d688bgds_version_id :2.0netcdf_version_id :4.1date_created :20200221T085224Zfile_quality_level :3spatial_resolution :1kmstart_time :20190622T100001Ztime_coverage_start :20190622T100001Zstop_time :20190622T100459Ztime_coverage_end :20190622T100459Znorthernmost_latitude :89.9862southernmost_latitude :66.2723easternmost_longitude :-45.9467westernmost_longitude :152.489source :MODIS sea surface temperature observations for the OBPGplatform :Aquasensor :MODISmetadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MODIS_A-JPL-L2P-v2019.0keywords :Oceans > Ocean Temperature > Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventiongeospatial_lat_units :degrees_northgeospatial_lat_resolution :0.01geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.01acknowledgment :The MODIS L2P sea surface temperature data are sponsored by NASAcreator_name :Ed Armstrong, JPL PO.DAACcreator_email :edward.m.armstrong@jpl.nasa.govcreator_url :http://podaac.jpl.nasa.govproject :Group for High Resolution Sea Surface Temperaturepublisher_name :The GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L2Pcdm_data_type :swathstartDirection :AscendingendDirection :Descendingday_night_flag :Day\n\n\nLet’s make a quick plot to take a look at the sea_surface_temperature variable.\n\nmodis_ds.sea_surface_temperature.plot() ;\n\n\n\n\n\n\n\n\nmap_proj = ccrs.NorthPolarStereo()\n\nfig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(projection=map_proj)\nax.coastlines()\n\n# Plot MODIS sst, save object as sst_img, so we can add colorbar\nsst_img = ax.pcolormesh(modis_ds.lon, modis_ds.lat, modis_ds.sea_surface_temperature[0,:,:], \n                        vmin=240, vmax=270,  # Set max and min values for plotting\n                        cmap='viridis', shading='auto',   # shading='auto' to avoid warning\n                        transform=ccrs.PlateCarree())  # coords are lat,lon but map if NPS \n\n# Plot IS2 surface height \nis2_img = ax.scatter(is2_ds.longitude, is2_ds.latitude,\n                     c=is2_ds.height_segment_height, \n                     vmax=1.5,  # Set max height to plot\n                     cmap='Reds', alpha=0.6, s=2,\n                     transform=ccrs.PlateCarree())\n\n# Add colorbars\nfig.colorbar(sst_img, label='MODIS SST (K)')\nfig.colorbar(is2_img, label='ATL07 Height (m)')\n\n\n<matplotlib.colorbar.Colorbar at 0x7fb3944adb50>\n\n\n\n\n\n\n\n\nThe MODIS SST is swath data, not a regularly-spaced grid of sea surface temperatures. ICESat-2 sea surface heights are irregularly spaced segments along one ground-track traced by the ATLAS instrument on-board ICESat-2. Fortunately, pyresample allows us to resample swath data.\npyresample has many resampling methods. We’re going to use the nearest neighbour resampling method, which is implemented using a k-dimensional tree algorithm or K-d tree. K-d trees are data structures that improve search efficiency for large data sets.\nThe first step is to define the geometry of the ICESat-2 and MODIS data. To do this we use the latitudes and longitudes of the datasets.\n\nis2_geometry = pyresample.SwathDefinition(lons=is2_ds.longitude,\n                                          lats=is2_ds.latitude)\n\n\nmodis_geometry = pyresample.SwathDefinition(lons=modis_ds.lon, lats=modis_ds.lat)\n\nWe then implement the resampling method, passing the two geometries we have defined, the data array we want to resample - in this case sea surface temperature, and a search radius. The resampling method expects a numpy.Array rather than an xarray.DataArray, so we use values to get the data as a numpy.Array.\nWe set the search radius to 1000 m. The MODIS data is nominally 1km spacing.\n\nsearch_radius=1000.\nfill_value = np.nan\nis2_sst = pyresample.kd_tree.resample_nearest(\n    modis_geometry,\n    modis_ds.sea_surface_temperature.values,\n    is2_geometry,\n    search_radius,\n    fill_value=fill_value\n)\n\n\nis2_sst\n\narray([263.375, 263.375, 263.375, ...,     nan,     nan,     nan],\n      dtype=float32)\n\n\n\nis2_ds['sea_surface_temperature'] = xr.DataArray(is2_sst, dims='segment')\nis2_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset>\nDimensions:                  (segment: 235584)\nDimensions without coordinates: segment\nData variables:\n    latitude                 (segment) float64 82.38 82.38 82.38 ... 72.61 72.61\n    longitude                (segment) float64 -55.11 -55.11 ... 145.1 145.1\n    delta_time               (segment) float64 4.642e+07 4.642e+07 ... 4.642e+07\n    height_segment_height    (segment) float32 nan nan nan ... -0.4335 -0.4463\n    sea_surface_temperature  (segment) float32 263.4 263.4 263.4 ... nan nan nanxarray.DatasetDimensions:segment: 235584Coordinates: (0)Data variables: (5)latitude(segment)float6482.38 82.38 82.38 ... 72.61 72.61contentType :referenceInformationcoordinates :delta_time longitudedescription :Latitude, WGS84, North=+, Lat of segment centerlong_name :Latitudesource :ATBD, section 4.4standard_name :latitudeunits :degrees_northvalid_max :90.0valid_min :-90.0array([82.38431982, 82.38431982, 82.38431982, ..., 72.60984638,\n       72.60977493, 72.60970985])longitude(segment)float64-55.11 -55.11 ... 145.1 145.1contentType :referenceInformationcoordinates :delta_time latitudedescription :Longitude, WGS84, East=+,Lon of segment centerlong_name :Longitudesource :ATBD, section 4.4standard_name :longitudeunits :degrees_eastvalid_max :180.0valid_min :-180.0array([-55.10896068, -55.10896068, -55.10896068, ..., 145.05396164,\n       145.05392851, 145.05389832])delta_time(segment)float644.642e+07 4.642e+07 ... 4.642e+07CLASS :DIMENSION_SCALENAME :gt1l/sea_ice_segments/delta_timeREFERENCE_LIST :[(<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)\n (<HDF5 object reference>, 0) (<HDF5 object reference>, 0)]contentType :physicalMeasurementcoordinates :latitude longitudedescription :Number of GPS seconds since the ATLAS SDP epoch. The ATLAS Standard Data Products (SDP) epoch offset is defined within /ancillary_data/atlas_sdp_gps_epoch as the number of GPS seconds between the GPS epoch (1980-01-06T00:00:00.000000Z UTC) and the ATLAS SDP epoch. By adding the offset contained within atlas_sdp_gps_epoch to delta time parameters, the time in gps_seconds relative to the GPS epoch can be computed.long_name :Elapsed GPS secondssource :telemetrystandard_name :timeunits :seconds since 2018-01-01array([46419293.64266939, 46419293.64266939, 46419293.64266939, ...,\n       46419681.87646231, 46419681.87759533, 46419681.87862704])height_segment_height(segment)float32nan nan nan ... -0.4335 -0.4463_FillValue :3.4028235e+38contentType :referenceInformationcoordinates :../delta_time ../latitude ../longitudedescription :Mean height from along-track segment fit detremined by the sea ice algorithm. The sea ice height is relative to the tide-free MSS.long_name :height of segment surfacesource :ATBD, section 4.2.2.4units :metersarray([        nan,         nan,         nan, ..., -0.46550068,\n       -0.43347716, -0.4462675 ], dtype=float32)sea_surface_temperature(segment)float32263.4 263.4 263.4 ... nan nan nanarray([263.375, 263.375, 263.375, ...,     nan,     nan,     nan],\n      dtype=float32)Attributes: (0)\n\n\n\n\n\nThis is a quick plot of the extracted data. We’re using matplotlib so we can use latitude as the x-value:\n\nis2_ds = is2_ds.set_coords(['latitude'])\n\nfig, ax1 = plt.subplots(figsize=(15, 7))\nax1.set_xlim(82.,88.)\nax1.plot(is2_ds.latitude, is2_ds.sea_surface_temperature, \n         color='orange', label='SST', zorder=3)\nax1.set_ylabel('SST (K)')\n\nax2 = ax1.twinx()\nax2.plot(is2_ds.latitude, is2_ds.height_segment_height, label='Height')\nax2.set_ylabel('Height (m)')\n\nfig.legend()\n\n<matplotlib.legend.Legend at 0x7fb39fcd8040>"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "We develop tutorials for teaching events that each has its own e-book. Tutorials are developed to teach open science and Cloud workflows for specific audiences. They are a snapshot in time as workflows with NASA Earthdata Cloud emerge and evolve. We will be updating How-To Guides as more stable (“source”) instruction as we develop and learn from teaching the tutorials below."
  },
  {
    "objectID": "tutorials/index.html#ecostress-cloud-workshop",
    "href": "tutorials/index.html#ecostress-cloud-workshop",
    "title": "Tutorials",
    "section": "2022 ECOSTRESS Cloud Workshop",
    "text": "2022 ECOSTRESS Cloud Workshop\nhttps://nasa-openscapes.github.io/2022-ECOSTRESS-Cloud-Workshop/\nThe goal of the workshop is expose ECOSTRESS data users to ECOSTRESS version 2 (v2) data products in the cloud. Learning objectives focus on how to find and access ECOSTRESS v2 data from Earthdata Cloud either by downloading or accessing the data on the cloud. The LP DAAC is the NASA archive for ECOSTRESS data products. ECOSTRESS v2 data products will hosted in the NASA Earthdata Cloud, hosted in AWS."
  },
  {
    "objectID": "tutorials/index.html#swot-ocean-cloud-workshop",
    "href": "tutorials/index.html#swot-ocean-cloud-workshop",
    "title": "Tutorials",
    "section": "2022 SWOT Ocean Cloud Workshop",
    "text": "2022 SWOT Ocean Cloud Workshop\nhttps://podaac.github.io/2022-SWOT-Ocean-Cloud-Workshop/\nThe goal of the workshop is to get ready for Surface Water and Ocean Topography (SWOT) and enable the (oceanography) science team to be ready for processing and handling the large volumes of SWOT SSH data in the cloud. Learning objectives focus on how to access the simulated SWOT L2 SSH data from Earthdata Cloud either by downloading or accessing the data on the cloud. PO.DAAC is the NASA archive for the SWOT mission, and once launched will be making data available via the NASA Earthdata Cloud, hosted in AWS."
  },
  {
    "objectID": "tutorials/index.html#cloud-agu-workshop",
    "href": "tutorials/index.html#cloud-agu-workshop",
    "title": "Tutorials",
    "section": "2021 Cloud AGU Workshop",
    "text": "2021 Cloud AGU Workshop\nhttps://nasa-openscapes.github.io/2021-Cloud-Workshop-AGU\nThe 2021 Cloud Workshop at AGU: Enabling Analysis in the Cloud Using NASA Earth Science Data is a virtual half-day collaborative open science learning experience aimed at exploring, learning, and promoting effective cloud-based science and applications workflows using NASA Earthdata Cloud data, tools, and services (among others), in support of Earth science data processing and analysis in the era of big data."
  },
  {
    "objectID": "tutorials/index.html#cloud-hackathon",
    "href": "tutorials/index.html#cloud-hackathon",
    "title": "Tutorials",
    "section": "2021 Cloud Hackathon",
    "text": "2021 Cloud Hackathon\nhttps://nasa-openscapes.github.io/2021-Cloud-Hackathon\nThe Cloud Hackathon: Transitioning Earthdata Workflows to the Cloud is a virtual 5-day (4 hours per day) collaborative open science learning experience aimed at exploring, creating, and promoting effective cloud-based science and applications workflows using NASA Earthdata Cloud data, tools, and services (among others), in support of Earth science data processing and analysis in the era of big data. Its goals are to:\n\nIntroduce Earth science data users to NASA Earthdata cloud-based data products, tools and services in order to increase awareness and support transition to cloud-based science and applications workflows.\nEnable science and applications workflows in the cloud that leverage NASA Earth Observations and capabilities (services) from within the NASA Earthdata Cloud, hosted in Amazon Web Services (AWS) cloud, thus increasing NASA Earthdata data utility and meaningfulness for science and applications use cases.\nFoster community engagement utilizing Earthdata cloud tools and services in support of open science and open data."
  },
  {
    "objectID": "tutorials/index.html#pairing-cloud-and-non-cloud-data",
    "href": "tutorials/index.html#pairing-cloud-and-non-cloud-data",
    "title": "Tutorials",
    "section": "Pairing Cloud and non-Cloud Data",
    "text": "Pairing Cloud and non-Cloud Data\nPairing Cloud and non-Cloud Data\nAccessing and harmonizing data located within and outside of the NASA Earthdata Cloud\nThis tutorial will combine several workflow steps and components from the previous days, demonstrating the process of using the geolocation of data available outside of the Earthdata Cloud to then access coincident variables of cloud-accessible data. This may be a common use case as NASA Earthdata continues to migrate to the cloud, producing a “hybrid” data archive across Amazon Web Services (AWS) and original on-premise data storage systems. Additionally, you may also want to combine field measurements with remote sensing data available on the Earthdata Cloud."
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#why",
    "href": "tutorials/earthaccess-demo.html#why",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Why?",
    "text": "Why?\nProgrammatic, Easy, Reproducible.\nThere are many ways to access NASA datasets, we can use the Earthdata search portal. We can use DAAC specific portals or tools. We could even use data.gov! Web portals are great but they are not designed for programmatic access and reproducible workflows. This is extremely important in the age of the cloud and reproducible open science.\nThe good news is that NASA also exposes APIs that allows us to search, transform and access data in a programmatic way. Many of these libraries contain amazing features and some similarities. In this context, earthaccess aims to be a simple library that can deal with the important parts of the metadata so we can access or download data without having to worry if a given dataset is on-prem or in the cloud."
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#how",
    "href": "tutorials/earthaccess-demo.html#how",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "How?",
    "text": "How?\n\nNote: There are a lot of acronyms that we need to get familiar with before any of this makes sense, here is a brief glossary for NASA Earthdata terms: NASA glossary\n\n\nAuthentication: Before we can use earthaccess we need an account with NASA EDL\nEarthdata Login provides free and immediate access to thousands of EOSDIS data products covering all Earth science disciplines and topic areas for researchers, applied science users, application developers, and the general public.\nOnce we have our NASA EDL login credentials we can start accessing NASA data in a programmatic way.\n\nimport earthaccess\nearthaccess.__version__\n\n'0.3.0'\n\n\n\nfrom earthaccess import Auth, Store, DataCollections, DataGranules\nauth = Auth()\n\n\nAuth()\nearthaccess’s Auth class provides 3 different strategies to authenticate ourselves with NASA EDL.\n\nnetrc: Do we have a .netrc file with our EDL credentials? if so, we can use it with earthaccess. If we don’t have it and want to create one we can, earthaccess allows users to type their credentials and persist them into a .netrc file.\nenvironment: If we have our EDL credentials as environment variables\n\nEDL_USERNAME\nEDL_PASSWORD\n\ninteractive: We will be asked for our EDL credentials with optinal persistance to .netrc\n\nTo persist our credentials to a .netrc file we have to do the following:\nauth.login(strategy=\"interactive\", persist=True)\n\nauth.login(strategy=\"netrc\")\n# are we authenticated?\nprint(auth.authenticated)\n\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 07/24/2022\nTrue\n\n\n\na = auth.login(strategy=\"environment\")\n# are we authenticated?\nprint(auth.authenticated)\n\nWe are already authenticated with NASA EDL\nTrue"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#querying-for-datasets",
    "href": "tutorials/earthaccess-demo.html#querying-for-datasets",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Querying for datasets",
    "text": "Querying for datasets\nThe DataCollections class can query CMR for any collection (dataset) using all of CMR’s Query parameters and has built-in functions to extract useful information from the response.\n\n# The first step is to create a DataCollections query \nQuery = DataCollections()\n\n# Use chain methods to customize our query\nQuery.keyword('elevation').bounding_box(-134.7,58.9,-133.9,59.2).temporal(\"2020-01-01\",\"2020-02-01\")\n\nprint(f'Collections found: {Query.hits()}')\n\n# filtering what UMM fields to print, to see the full record we omit the fields filters\n# meta is always included as \ncollections = Query.fields(['ShortName','Version']).get(5)\n# Inspect some results printing just the ShortName and Abstract\ncollections[0:3]\n\nThe results from a DataCollections and DataGranules query are enhanced python dictionaries, this means that we can access all the keys and values like we usually do with Python dictionaries.\n\ncollections[0][\"umm\"][\"ShortName\"]\n\nThe DataCollections class returns python dictionaries with some handy methods.\ncollection.concept_id() # returns the concept-id, used to search for data granules\ncollection.abstract() # returns the abstract\ncollection.landing_page() # returns the landing page if present in the UMM fields\ncollection.get_data() # returns the portal where data can be accessed.\nThe same results can be obtained using the dict syntax:\ncollection[\"meta\"][\"concept-id\"] # concept-id\ncollection[\"umm\"][\"RelatedUrls\"] # URLs, with GET DATA, LANDING PAGE etc\n\n# We can now search for collections using a pythonic API client for CMR.\nQuery = DataCollections().daac(\"PODAAC\")\n\nprint(f'Collections found: {Query.hits()}')\ncollections = Query.fields(['ShortName']).get(10)\n# Printing the first collection\ncollections[0]\n\n\n# What if we want cloud collections\nQuery = DataCollections().daac(\"PODAAC\").cloud_hosted(True)\n\nprint(f'Collections found: {Query.hits()}')\ncollections = Query.fields(['ShortName']).get(10)\n# Printing 3 collections\ncollections[0]\n\n\n# Printing the concept-id for the first 10 collections\n[collection.concept_id() for collection in collections]"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#querying-for-data-files-granules",
    "href": "tutorials/earthaccess-demo.html#querying-for-data-files-granules",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Querying for data files (granules)",
    "text": "Querying for data files (granules)\nThe DataGranules class provides similar functionality as the collection class. To query for granules in a more reliable way concept-id would be the main key. You can search data granules using a short name but that could (more likely will) return different versions of the same data granules.\nIn this example we’re querying for 10 data grnaules from ICESat-2 ATL06 version 005 dataset.\n\nNote: Generally speaking we won’t need authenticated queries unless they are restricted datasets for early adopters.\n\n\n# We build our query\nfrom pprint import pprint\nQuery = DataGranules().short_name('ATL06').version(\"005\").bounding_box(-134.7,58.9,-133.9,59.2)\n# We get 5 metadata records\ngranules = Query.get(5)\ngranules"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#pretty-printing-data-granules",
    "href": "tutorials/earthaccess-demo.html#pretty-printing-data-granules",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Pretty printing data granules",
    "text": "Pretty printing data granules\nSince we are in a notebook we can take advantage of it to see a more user friendly version of the granules with the built-in function display This will render browse image for the granule if available and eventually will have a similar representation as the one from the Earthdata search portal\n\n# printing 2 granules using display\n[display(granule) for granule in granules]\n\n\nSpatiotemporal queries\nOur granules and collection classes accept the same spatial and temporal arguments as CMR so we can search for granules that match spatiotemporal criteria.\n\nQuery = DataGranules().short_name(\"ATL06\").temporal(\"2020-03-01\", \"2020-03-30\").bounding_box(-134.7,58.9,-133.9,59.2).version(\"005\")\n# Always inspects the hits before retrieven the granule metadata, just because it's very verbose.\nprint(f\"Granules found: {Query.hits()}\")\n\n\n# Now we can print some info about these granules using the built-in methods\ngranules = Query.get(5)\ndata_links = [{'links': g.data_links(access=\"on_prem\"), 'size (MB):': g.size()} for g in granules]\ndata_links"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#accessing-the-data",
    "href": "tutorials/earthaccess-demo.html#accessing-the-data",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Accessing the data",
    "text": "Accessing the data\nWith earthaccess a researcher can get the files regardless if they are on-prem or cloud based with the same API call, although an important consideration is that if we want to access data in the cloud (direct access) we must run the code in the cloud. This is because some S3 buckets are configured to only allow direct access (s3:// links) if the requester is in the same zone, us-west-2."
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#on-prem-access-daac-hosted-data",
    "href": "tutorials/earthaccess-demo.html#on-prem-access-daac-hosted-data",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "On-prem access: DAAC hosted data 📡",
    "text": "On-prem access: DAAC hosted data 📡\nThe Store() class will allow us to download or access our data and needs to be instantiated with our auth instance.\n\nstore = Store(auth)\n\nFor this example we are going to use a PODAAC dataset SMAP_JPL_L3_SSS_CAP_8DAY-RUNNINGMEAN_V5 which we previously queried (see querying for datasets) and got the concept id: C1972955240-PODAAC\n\nQuery = DataGranules().concept_id(\"C1972955240-PODAAC\").bounding_box(-134.7,54.9,-100.9,69.2)\nprint(f\"Granule hits: {Query.hits()}\")\n# getting more than 6,000 metadata records for demo purposes is going to slow us down a bit so let's get only a few\ngranules = Query.get(10)\n# Does this granule belong to a cloud-based collection?\ngranules[0].cloud_hosted\n\n\nFinally! let’s get the data\nThe Store class accepts the results from a DataGranules() query or it can also accept a list of URLs for the data files. In the second case we’ll have to specify the DAAC since it cannot infer which credentials to use solely on the URL.\n\n%%time\nfiles = store.get(granules[0:4], \"./data/C1972955240-PODAAC/\")"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#accessing-the-data-in-the-cloud",
    "href": "tutorials/earthaccess-demo.html#accessing-the-data-in-the-cloud",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Accessing the data in the cloud ☁️",
    "text": "Accessing the data in the cloud ☁️\n\nWith earthaccess a researcher can get the files regardless if they are on-prem or cloud based with the same API call, although an important consideration is that if we want to access data in the cloud we must run the code in the cloud. This is because some S3 buckets are configured to only allow direct access (s3:// links) if the requester is in the same zone, us-west-2.\nSame API, just a different place, in this case the concept-id for the same dataset is C2208422957-POCLOUD > Note: The concept-id changed even though is the same dataset.\n\n\nQuery = DataGranules().concept_id(\"C2208422957-POCLOUD\").bounding_box(-134.7,54.9,-100.9,69.2)\nprint(f\"Granule hits: {Query.hits()}\")\ncloud_granules = Query.get(10)\n# is this a cloud hosted data granule?\ncloud_granules[0].cloud_hosted\n\n\n# Let's pretty print this\ncloud_granules[0]\n\n\n%%time\n# If we get an error with direct_access=True, most likely is because\n# we are running this code outside the us-west-2 region.\ntry:\n    files = store.get(cloud_granules[0:4], local_path=\"./data/demo-POCLOUD\")\nexcept Exception as e:\n    print(f\"Error: {e}, we are probably not using this code in the Amazon cloud. Trying external links...\")\n    # There is hope, even if we are not in the Amazon cloud we can still get the data\n    files = store.get(cloud_granules[0:4], access=\"external\", local_path=\"./data/demo-POCLOUD\")"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#cloud-access-part-ii-streaming-data",
    "href": "tutorials/earthaccess-demo.html#cloud-access-part-ii-streaming-data",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "☁️ Cloud Access Part II: streaming data",
    "text": "☁️ Cloud Access Part II: streaming data\nBeing in the cloud allows us to stream data as if we were using it locally. Pairing gridded datasets on S3 and xarray isa very useful patter when we deal with a lot of data.\n\nRecommended read: Skip the download! Stream NASA data directly into Python objects\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')\nimport xarray as xr\n# data_links\nhttps_links = []\ns3_links = []\n\nfs = store.get_s3fs_session('POCLOUD')\n\nfor granule in cloud_granules:\n    https_links.extend(granule.data_links(access=\"on_prem\"))\n    s3_links.extend(granule.data_links(access=\"direct\"))\ns3_links\n\n\n%%time\n\nimport xarray as xr\n\ntry:\n    files = store.open(s3_links, provider=\"POCLOUD\")\n\n    ds_L3 = xr.open_mfdataset(\n        files,\n        combine='nested',\n        concat_dim='time',\n        decode_cf=True,\n        coords='minimal',\n        chunks={'time': 1}\n        )\n    ds_L3\nexcept Exception as e:\n    pass\n    # print(e)"
  },
  {
    "objectID": "tutorials/earthaccess-demo.html#now-to-the-important-science",
    "href": "tutorials/earthaccess-demo.html#now-to-the-important-science",
    "title": "Introducing NASA earthaccess 🌍",
    "section": "Now to the important science! 🚀",
    "text": "Now to the important science! 🚀\n\nRecap\n\nfrom earthaccess import Auth, DataGranules, Store\n\n# first we authenticate with NASA EDL\nauth = Auth().login(strategy=\"netrc\")\n\n# Then we build a Query with spatiotemporal parameters\nGranuleQuery = DataGranules().concept_id(\"C1575731655-LPDAAC_ECS\").bounding_box(-134.7,58.9,-133.9,59.2)\n\n# We get the metadata records from CMR\ngranules = GranuleQuery.get()\n\n# Now it{s time to download (or open) our data granules list with get()\nfiles = Store(auth).get(granules, local_path='./data')\n\n# Now to the important science!\n\n\nRelated links\nGithub repository: https://github.com/nsidc/earthaccess\nCMR API documentation: https://cmr.earthaccess.nasa.gov/search/site/docs/search/api.html\nEDL API documentation: https://urs.earthaccess.nasa.gov/\nNASA OpenScapes: https://nasa-openscapes.github.io/earthaccess-cloud-cookbook/\nNSIDC: https://nsidc.org\nContact: luis.lopez@nsidc.org"
  }
]