{
  "hash": "e3dd7050b8e319c04650a7a2499b2f55",
  "result": {
    "markdown": "---\ntitle: Harmony Subsetting\n---\n\nThis notebook demonstrates basic harmony subsetting from PO.DAAC: [**Harmony EOSS L2SS API Tutorial**](https://github.com/podaac/tutorials/blob/master/notebooks/harmony%20subsetting/Harmony%20L2%20Subsetter.ipynb)\n\n::: {.cell}\n::: {.cell-output-stderr}\n```\nsaving local_Harmony_L2_Subsetter.ipynb\n```\n:::\n\n::: {.cell-output-stderr}\n```\nsaving environment.yml\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# now convert from a .ipynb to a .qmd\nquarto convert local_Harmony_L2_Subsetter.ipynb\n```\n\n\n::: {.cell-output-stdout}\n```\nConverted to local_Harmony_L2_Subsetter.qmd\n```\n:::\n:::\n\nAnd some more text here\n\n\n# What is the Jupyter Notebook?\n\n## Introduction\n\nThe Jupyter Notebook is an **interactive computing environment** that enables users to author notebook documents that include: \n- Live code\n- Interactive widgets\n- Plots\n- Narrative text\n- Equations\n- Images\n- Video\n\nThese documents provide a **complete and self-contained record of a computation** that can be converted to various formats and shared with others using email, [Dropbox](https://www.dropbox.com/), version control systems (like git/[GitHub](https://github.com)) or [nbviewer.jupyter.org](https://nbviewer.jupyter.org).\n\n### Components\n\nThe Jupyter Notebook combines three components:\n\n* **The notebook web application**: An interactive web application for writing and running code interactively and authoring notebook documents.\n* **Kernels**: Separate processes started by the notebook web application that runs users' code in a given language and returns output back to the notebook web application. The kernel also handles things like computations for interactive widgets, tab completion and introspection. \n* **Notebook documents**: Self-contained documents that contain a representation of all content visible in the notebook web application, including inputs and outputs of the computations, narrative\ntext, equations, images, and rich media representations of objects. Each notebook document has its own kernel.\n\n## Notebook web application\n\nThe notebook web application enables users to:\n\n* **Edit code in the browser**, with automatic syntax highlighting, indentation, and tab completion/introspection.\n* **Run code from the browser**, with the results of computations attached to the code which generated them.\n* See the results of computations with **rich media representations**, such as HTML, LaTeX, PNG, SVG, PDF, etc.\n* Create and use **interactive JavaScript widgets**, which bind interactive user interface controls and visualizations to reactive kernel side computations.\n* Author **narrative text** using the [Markdown](https://daringfireball.net/projects/markdown/) markup language.\n* Include mathematical equations using **LaTeX syntax in Markdown**, which are rendered in-browser by [MathJax](https://www.mathjax.org/).\n\n## Kernels\n\nThrough Jupyter's kernel and messaging architecture, the Notebook allows code to be run in a range of different programming languages.  For each notebook document that a user opens, the web application starts a kernel that runs the code for that notebook. Each kernel is capable of running code in a single programming language and there are kernels available in the following languages:\n\n* Python(https://github.com/ipython/ipython)\n* Julia (https://github.com/JuliaLang/IJulia.jl)\n* R (https://github.com/IRkernel/IRkernel)\n* Ruby (https://github.com/minrk/iruby)\n* Haskell (https://github.com/gibiansky/IHaskell)\n* Scala (https://github.com/Bridgewater/scala-notebook)\n* node.js (https://gist.github.com/Carreau/4279371)\n* Go (https://github.com/takluyver/igo)\n\nThe default kernel runs Python code. The notebook provides a simple way for users to pick which of these kernels is used for a given notebook. \n\nEach of these kernels communicate with the notebook web application and web browser using a JSON over ZeroMQ/WebSockets message protocol that is described [here](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messaging). Most users don't need to know about these details, but it helps to understand that \"kernels run code.\"\n\n## Notebook documents\n\nNotebook documents contain the **inputs and outputs** of an interactive session as well as **narrative text** that accompanies the code but is not meant for execution. **Rich output** generated by running code, including HTML, images, video, and plots, is embeddeed in the notebook, which makes it a complete and self-contained record of a computation. \n\nWhen you run the notebook web application on your computer, notebook documents are just **files on your local filesystem with a** `.ipynb` **extension**. This allows you to use familiar workflows for organizing your notebooks into folders and sharing them with others.\n\nNotebooks consist of a **linear sequence of cells**. There are three basic cell types:\n\n* **Code cells:** Input and output of live code that is run in the kernel\n* **Markdown cells:** Narrative text with embedded LaTeX equations\n* **Raw cells:** Unformatted text that is included, without modification, when notebooks are converted to different formats using nbconvert\n\nInternally, notebook documents are [JSON](https://en.wikipedia.org/wiki/JSON) **data** with **binary values** [base64](https://en.wikipedia.org/wiki/Base64) encoded. This allows them to be **read and manipulated programmatically** by any programming language. Because JSON is a text format, notebook documents are version control friendly.\n\n**Notebooks can be exported** to different static formats including HTML, reStructeredText, LaTeX, PDF, and slide shows ([reveal.js](https://revealjs.com)) using Jupyter's `nbconvert` utility.\n\nFurthermore, any notebook document available from a **public URL or on GitHub can be shared** via [nbviewer](https://nbviewer.jupyter.org). This service loads the notebook document from the URL and renders it as a static web page. The resulting web page may thus be shared with others **without their needing to install the Jupyter Notebook**.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}